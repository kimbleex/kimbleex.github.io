<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kimbleex Blogs</title>
  
  <subtitle>丢掉幻想，准备斗争！</subtitle>
  <link href="http://xujunliang666.com/atom.xml" rel="self"/>
  
  <link href="http://xujunliang666.com/"/>
  <updated>2025-02-19T16:00:00.000Z</updated>
  <id>http://xujunliang666.com/</id>
  
  <author>
    <name>Kimbleex</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>偶然发现的Vercel托管文件/图床的好功能</title>
    <link href="http://xujunliang666.com/Tools/Vercel_Directory_Listing/"/>
    <id>http://xujunliang666.com/Tools/Vercel_Directory_Listing/</id>
    <published>2025-02-19T16:00:00.000Z</published>
    <updated>2025-02-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在用Vercel托管文件，发现了一个好功能，就是Vercel的托管目录可以自动生成目录列表，非常方便。</p><h2 id="功能展示"><a href="#功能展示" class="headerlink" title="功能展示"></a>功能展示</h2><p>在常规的操作中，当使用<code>Github</code> + <code>Vercel</code> + 域名的方式来托管仓库，以方便远程访问文件的过程中，当直接访问域名地址，会出现<code>404</code>报错，但是当具体到文件名去访问时，就可以访问到文件内容。</p><p><img src="https://images.kimbleex.top/BlogIMG/Vercel_Directory_Listing/bad.avif" alt="bad"></p><h2 id="一个很好的接口"><a href="#一个很好的接口" class="headerlink" title="一个很好的接口"></a>一个很好的接口</h2><p>通过查询资料得知，如果想要在访问域名的时候有页面展示，需要在仓库的根目录下创建一个<code>index.html</code>，这样在访问仓库绑定的域名时，就可以展示出默认网页的内容，但是很多情况下我只希望能看到我这个仓库的文件，并且很快的预览。</p><p>最后通过阅读<code>Vercel</code>官方文档后找到了它自带的一个功能接口，在设置里面的<code>Advanced</code>选项中，有一个<code>Directory Listing</code>选项，当开启选项后，如果在一个目录中没有<code>index.html</code>文件，<code>Vercel</code>会自动生成该目录下的文件索引，并且可以预览文件内容/图片，非常方便。</p><p><img src="https://images.kimbleex.top/BlogIMG/Vercel_Directory_Listing/good.avif" alt="good"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个功能非常实用，特别是对于一些小型的文件/图片托管，可以很方便的预览文件内容，并且不需要额外的配置，只需要在<code>Vercel</code>的设置中开启选项即可，非常方便。</p><p>但是需要注意的时，当你不希望别人通过域名可以看到你的仓库中的内容时，最好是关闭这个选项；当然有更好的方法，可以将<code>Github</code>仓库设置为私有仓库，这样就可以避免别人通过域名看到你的仓库中的内容了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在用Vercel托管文件，发现了一个好功能，就是Vercel的托管目录可以自动生成目录列表，非常方便。&lt;/p&gt;
&lt;h2 id=&quot;功能展示</summary>
      
    
    
    
    <category term="Tools" scheme="http://xujunliang666.com/categories/Tools/"/>
    
    
    <category term="工具" scheme="http://xujunliang666.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="前端" scheme="http://xujunliang666.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vercel" scheme="http://xujunliang666.com/tags/Vercel/"/>
    
  </entry>
  
  <entry>
    <title>关于订阅集成工具Follow</title>
    <link href="http://xujunliang666.com/Tools/Follow/"/>
    <id>http://xujunliang666.com/Tools/Follow/</id>
    <published>2025-02-05T16:00:00.000Z</published>
    <updated>2025-02-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近了解到一个名为Follow的RSS订阅集成工具，到目前已经体验了一个多月，总体体验还不错，记录一下。</p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><code>Follow</code>目前完整的玩法体验是需要邀请码的，邀请码是需要已激活账号花费<code>100 Power</code>才能够进行生成的，<code>Power</code>是<code>Follow</code>的货币，目前仅能够通过每日签到根据活跃度获取，举个例子，我目前是<code>Level 1</code>，等级是根据你在所有用户中的排名来设定的，每天刷满活跃后，可以获取大约<code>1.6 Power</code>，所以还是比较难获取的 。  </p><p>所以如果想激活账号的话，推荐去海鲜市场，大约<code>2~5 RMB</code>即可购买到激活码，如果你有朋友可以直接伸手索取，当然求人不如求己。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>项目地址 : <a href="https://github.com/RSSNext/Follow">Follow</a></p><p><code>Follow</code> 目前提供了网页端和客户端，网页端可以直接在浏览器中打开使用，客户端可以在项目地址的<code>Release</code>页面自行下载安装。登录或者注册可以直接使用<code>Github</code>账户即可完成绑定。</p><p>这里还是推荐客户端，网页端是最近不久才开发的，我也体验了一段时间，在图片展示和视频展示上还是会有很多<code>Bug</code>，所以如果现在打算入门的话，建议使用客户端。</p><h2 id="玩法"><a href="#玩法" class="headerlink" title="玩法"></a>玩法</h2><h3 id="1-添加订阅源"><a href="#1-添加订阅源" class="headerlink" title="1. 添加订阅源"></a>1. 添加订阅源</h3><p>万物皆可订阅，我这里提供本博客的<code>RSS</code>订阅地址 : <code>https://xujunliang666.com/atom.xml</code>，当你下载好客户端之后，可以点击左上角的<code>+</code>号，并在右边界面中输入订阅地址，选择你想要添加的订阅源即可。<br><img src="https://images.kimbleex.top/BlogIMG/Follow/rss_add.avif" alt="rss_add"><br><img src="https://images.kimbleex.top/BlogIMG/Follow/rss_add2.avif" alt="rss_add2"></p><h3 id="2-订阅源展示"><a href="#2-订阅源展示" class="headerlink" title="2. 订阅源展示"></a>2. 订阅源展示</h3><p>添加好订阅源之后，就可以在<code>Follow</code>中看到订阅源的内容了，<code>Follow</code>提供了多种展示方式，包括<code>文章</code>、<code>社交媒体</code>、<code>图片</code>等，可以根据自己的喜好进行选择。<br><img src="https://images.kimbleex.top/BlogIMG/Follow/rss_show.avif" alt="rss_show"></p><h2 id="关于订阅源的获取"><a href="#关于订阅源的获取" class="headerlink" title="关于订阅源的获取"></a>关于订阅源的获取</h2><p><code>RssHub</code>可以支持将各种各样社交媒体等平台的内容转化为<code>RSS</code>，具体可以参考<a href="https://docs.rsshub.app/"><code>RssHub</code></a>的文档。仅需要提供你想要订阅的用户的<code>UserID</code>即可。</p><p>当然<code>Follow</code>也支持搜索订阅源，在<code>Follow</code>的搜索框中输入你想要订阅的社交媒体用户名，即可搜索到对应的订阅源，然后点击<code>Follow</code>即可添加订阅源。不是所有的用户都可以搜索到的，更多的还是需要自己去<code>RssHub</code>中制作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近了解到一个名为Follow的RSS订阅集成工具，到目前已经体验了一个多月，总体体验还不错，记录一下。&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;&lt;c</summary>
      
    
    
    
    <category term="Tools" scheme="http://xujunliang666.com/categories/Tools/"/>
    
    
    <category term="Rss" scheme="http://xujunliang666.com/tags/Rss/"/>
    
    <category term="工具" scheme="http://xujunliang666.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Go 安装问题汇总解决</title>
    <link href="http://xujunliang666.com/Programming/Go-Install-Problem/"/>
    <id>http://xujunliang666.com/Programming/Go-Install-Problem/</id>
    <published>2024-12-24T16:00:00.000Z</published>
    <updated>2024-12-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下错误会在在官网安装完<code>Go</code>语言之后，到<code>Vscode</code>安装语言拓展，新建一个<code>.go</code>文件之后。</p><h2 id="1-无法在GOROOT或GOPATH中找到Go"><a href="#1-无法在GOROOT或GOPATH中找到Go" class="headerlink" title="1. 无法在GOROOT或GOPATH中找到Go"></a>1. 无法在GOROOT或GOPATH中找到Go</h2><p>在安装完成后，<code>vscode</code>报错无法在<code>GOROOT</code>或<code>GOPATH</code>中找到<code>Go</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">failed to find the <span class="string">&quot;go&quot;</span> binary <span class="keyword">in</span> either goroot() or path()...</span><br></pre></td></tr></table></figure><p>检查系统的环境变量中的<code>GOROOT</code>和<code>GOPATH</code>，确保它们指向正确的<code>Go</code>安装目录。<br><strong>重要</strong>：重启电脑！ 重启电脑！ 重启电脑！</p><h2 id="2-无法成功安装Go插件"><a href="#2-无法成功安装Go插件" class="headerlink" title="2. 无法成功安装Go插件"></a>2. 无法成功安装Go插件</h2><p>在安装<code>Go</code>插件时，<code>vscode</code>报错无法成功安装<code>Go</code>插件。</p><p>这是代理问题，换成国内的代理即可，打开<code>CMD</code>，输入一下命令:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">env</span> -w GO111MODULE=on</span><br><span class="line">go <span class="built_in">env</span> -w GOPROXY=https://proxy.golang.com.cn,direct</span><br></pre></td></tr></table></figure><p>重启<code>Vscode</code>即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以下错误会在在官网安装完&lt;code&gt;Go&lt;/code&gt;语言之后，到&lt;code&gt;Vscode&lt;/code&gt;安装语言拓展，新建一个&lt;code&gt;.go&lt;/code&gt;文件之后。&lt;/p&gt;
&lt;h2 id=&quot;1-无法在GOROOT或GOPATH中找到Go&quot;&gt;&lt;a href=&quot;#1-无法在</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="Go" scheme="http://xujunliang666.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>关于发布Python库全过程总结和踩坑记录</title>
    <link href="http://xujunliang666.com/Tools/Python-PyPI/"/>
    <id>http://xujunliang666.com/Tools/Python-PyPI/</id>
    <published>2024-11-26T16:00:00.000Z</published>
    <updated>2024-11-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>兴致来了，打算做一个自己的<code>Python</code>工具库，发布到<code>PyPi</code>上，这样可以自己在生活工作的时候直接通过<code>pip install</code>来进行安装和使用。</p><p>我的库名最后决定为<a href="https://pypi.org/project/HandyToolsPy/0.1.1/">HandyToolsPy</a>，也就是便捷工具库，里面包含了一些自己常用的工具函数和有趣的项目。</p><p>欢迎大家<code>pip install</code>食用。</p><p>如果有想加入这个库的好点子请告诉我，我会积极反馈并考虑加入其中。</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><h3 id="1-1-创建目录"><a href="#1-1-创建目录" class="headerlink" title="1.1 创建目录"></a>1.1 创建目录</h3><p>需要到一个空目录下，创建一个文件夹和<code>setup.py</code>、<code>README.md</code>、<code>LICENSE</code>文件。文件夹名就是库名，比如我创建的文件夹名就是<code>HandyToolsPy</code>。<br><img src="https://images.kimbleex.top/BlogIMG/HandyToolsPy/dist_struct.avif" alt="目录结构"></p><h3 id="1-2-目录功能介绍"><a href="#1-2-目录功能介绍" class="headerlink" title="1.2 目录功能介绍"></a>1.2 目录功能介绍</h3><p><code>README.md</code>即是库的说明文档，<code>LICENSE</code>是库的许可证，我选择的是<code>GPL 3.0</code>许可证。其他更多的许可证请至<a href="https://choosealicense.com/">这里</a>查看和使用。</p><p><code>setup.py</code>即为你的库的管理工具，<code>Python</code>官网更喜欢使用<code>.toml</code>文件进行管理，但是我都捣鼓了一下，发现还是<code>setup.py</code>的形式比较方便，而且<code>requests</code>库的作者写了一个非常经典的<a href="https://github.com/kennethreitz/setup.py">模板</a>，可以参考使用。</p><p>可以看到我在<code>HandyToolsPy</code>中创建了<code>__init__.py</code>、<code>__version__.py</code>、<code>DataProcess.py</code>、<code>Translator.py</code>四个文件，具体功能如下:</p><ul><li><code>__init__.py</code><ol><li>将目录标记为Python包，这是它最基本的作用，它使得<code>Python</code>解释器知道该目录及其包含的文件应该被视为一个包.</li><li>包的命名空间管理，<code>__init__.py</code>文件可以用来组织包的命名空间。通过在这个文件中导入函数、类或其他模块，你可以提供一个经过精心设计的对外接口，使得包的结构对用户更加透明。</li></ol></li><li><code>__version__.py</code><ol><li>定义库的版本号，方便用户查看和更新。</li></ol></li></ul><p>另外两个文件即功能模块，就是这个库导入后的功能类或功能函数。</p><h2 id="2-开始"><a href="#2-开始" class="headerlink" title="2. 开始"></a>2. 开始</h2><h3 id="2-1-许可证"><a href="#2-1-许可证" class="headerlink" title="2.1 许可证"></a>2.1 许可证</h3><p>上传到<code>Python Package Index</code>的每个包都包含许可证，这一点很重要。这告诉用户安装你的软件包可以使用您的软件包的条款。</p><h3 id="2-2-setup-py"><a href="#2-2-setup-py" class="headerlink" title="2.2 setup.py"></a>2.2 <code>setup.py</code></h3><p>使用上一小节提供的模板即可，注意<code>NAME</code>和<code>VERSION</code>要分别对应你自己库的名称和版本号。</p><p>一个可能的<code>setup.py</code>文件如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note: To use the &#x27;upload&#x27; functionality of this file, you must:</span></span><br><span class="line"><span class="comment">#   $ pipenv install twine --dev</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> shutil <span class="keyword">import</span> rmtree</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> find_packages, setup, Command</span><br><span class="line"></span><br><span class="line"><span class="comment"># Package meta-data.</span></span><br><span class="line">NAME = <span class="string">&#x27;HandyToolsPy&#x27;</span></span><br><span class="line">DESCRIPTION = <span class="string">&#x27;Handypy is a multifunctional Python tool library, which aims to provide developers with a series of convenient practical tools and simplify daily programming tasks.Whether it is processing data, operating file systems, or network requests, Handypy can provide you with efficient and reliable solutions.&#x27;</span></span><br><span class="line">URL = <span class="string">&#x27;https://github.com/kimbleex/HandyToolsPy&#x27;</span></span><br><span class="line">EMAIL = <span class="string">&#x27;kimbleex@outlook.com&#x27;</span></span><br><span class="line">AUTHOR = <span class="string">&#x27;kimbleex&#x27;</span></span><br><span class="line">REQUIRES_PYTHON = <span class="string">&#x27;&gt;=3.6.0&#x27;</span></span><br><span class="line">VERSION = <span class="string">&#x27;0.1.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># What packages are required for this module to be executed?</span></span><br><span class="line">REQUIRED = [</span><br><span class="line">    <span class="string">&#x27;pandas&#x27;</span>, <span class="string">&#x27;googletrans&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># What packages are optional?</span></span><br><span class="line">EXTRAS = &#123;</span><br><span class="line">    <span class="comment"># &#x27;fancy feature&#x27;: [&#x27;django&#x27;],</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># The rest you shouldn&#x27;t have to touch too much :)</span></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"><span class="comment"># Except, perhaps the License and Trove Classifiers!</span></span><br><span class="line"><span class="comment"># If you do change the License, remember to change the Trove Classifier for that!</span></span><br><span class="line"></span><br><span class="line">here = os.path.abspath(os.path.dirname(__file__))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import the README and use it as the long-description.</span></span><br><span class="line"><span class="comment"># Note: this will only work if &#x27;README.md&#x27; is present in your MANIFEST.in file!</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> io.<span class="built_in">open</span>(os.path.join(here, <span class="string">&#x27;README.md&#x27;</span>), encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        long_description = <span class="string">&#x27;\n&#x27;</span> + f.read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    long_description = DESCRIPTION</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load the package&#x27;s __version__.py module as a dictionary.</span></span><br><span class="line">about = &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> VERSION:</span><br><span class="line">    project_slug = NAME.lower().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;_&quot;</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;_&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(here, project_slug, <span class="string">&#x27;__version__.py&#x27;</span>)) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="built_in">exec</span>(f.read(), about)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    about[<span class="string">&#x27;__version__&#x27;</span>] = VERSION</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UploadCommand</span>(<span class="title class_ inherited__">Command</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Support setup.py upload.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    description = <span class="string">&#x27;Build and publish the package.&#x27;</span></span><br><span class="line">    user_options = []</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">status</span>(<span class="params">s</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Prints things in bold.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[1m&#123;0&#125;\033[0m&#x27;</span>.<span class="built_in">format</span>(s))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize_options</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">finalize_options</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="variable language_">self</span>.status(<span class="string">&#x27;Removing previous builds…&#x27;</span>)</span><br><span class="line">            rmtree(os.path.join(here, <span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span> OSError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.status(<span class="string">&#x27;Building Source and Wheel (universal) distribution…&#x27;</span>)</span><br><span class="line">        os.system(<span class="string">&#x27;&#123;0&#125; setup.py sdist bdist_wheel --universal&#x27;</span>.<span class="built_in">format</span>(sys.executable))</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.status(<span class="string">&#x27;Uploading the package to PyPI via Twine…&#x27;</span>)</span><br><span class="line">        os.system(<span class="string">&#x27;twine upload dist/*&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.status(<span class="string">&#x27;Pushing git tags…&#x27;</span>)</span><br><span class="line">        os.system(<span class="string">&#x27;git tag v&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(about[<span class="string">&#x27;__version__&#x27;</span>]))</span><br><span class="line">        os.system(<span class="string">&#x27;git push --tags&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Where the magic happens:</span></span><br><span class="line">setup(</span><br><span class="line">    name=NAME,</span><br><span class="line">    version=about[<span class="string">&#x27;__version__&#x27;</span>],</span><br><span class="line">    description=DESCRIPTION,</span><br><span class="line">    long_description=long_description,</span><br><span class="line">    long_description_content_type=<span class="string">&#x27;text/markdown&#x27;</span>,</span><br><span class="line">    author=AUTHOR,</span><br><span class="line">    author_email=EMAIL,</span><br><span class="line">    python_requires=REQUIRES_PYTHON,</span><br><span class="line">    url=URL,</span><br><span class="line">    packages=find_packages(exclude=[<span class="string">&quot;tests&quot;</span>, <span class="string">&quot;*.tests&quot;</span>, <span class="string">&quot;*.tests.*&quot;</span>, <span class="string">&quot;tests.*&quot;</span>]),</span><br><span class="line">    <span class="comment"># If your package is a single module, use this instead of &#x27;packages&#x27;:</span></span><br><span class="line">    <span class="comment"># py_modules=[&#x27;mypackage&#x27;],</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># entry_points=&#123;</span></span><br><span class="line">    <span class="comment">#     &#x27;console_scripts&#x27;: [&#x27;mycli=mymodule:cli&#x27;],</span></span><br><span class="line">    <span class="comment"># &#125;,</span></span><br><span class="line">    install_requires=REQUIRED,</span><br><span class="line">    extras_require=EXTRAS,</span><br><span class="line">    include_package_data=<span class="literal">True</span>,</span><br><span class="line">    license=<span class="string">&#x27;MIT&#x27;</span>,</span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="comment"># Trove classifiers</span></span><br><span class="line">        <span class="comment"># Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers</span></span><br><span class="line">        <span class="string">&#x27;License :: OSI Approved :: MIT License&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Programming Language :: Python&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Programming Language :: Python :: 3.6&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Programming Language :: Python :: 3.7&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Programming Language :: Python :: 3.8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Programming Language :: Python :: 3.9&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;Programming Language :: Python :: 3.10&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Programming Language :: Python :: 3.11&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Programming Language :: Python :: 3.12&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Programming Language :: Python :: Implementation :: CPython&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Programming Language :: Python :: Implementation :: PyPy&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment"># $ setup.py publish support.</span></span><br><span class="line">    cmdclass=&#123;</span><br><span class="line">        <span class="string">&#x27;upload&#x27;</span>: UploadCommand,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="2-3-编写功能类"><a href="#2-3-编写功能类" class="headerlink" title="2.3 编写功能类"></a>2.3 编写功能类</h3><p>在上述过程完成后，你可以在你的库文件夹下面编写你的功能类。</p><h3 id="2-4-生成分发档案"><a href="#2-4-生成分发档案" class="headerlink" title="2.4 生成分发档案"></a>2.4 生成分发档案</h3><p>接着，需要生成库的分发档案，以便上传到 PyPI。</p><p>更新<code>build</code>，并使用它生成分发档案文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade build</span><br><span class="line">python -m build</span><br></pre></td></tr></table></figure><p>如果正常执行，会有大片输出，并在目录下生成<code>dist</code>和<code>.egg-info</code>目录<br><img src="https://images.kimbleex.top/BlogIMG/HandyToolsPy/build.avif" alt="build"></p><h2 id="3-PyPi部分"><a href="#3-PyPi部分" class="headerlink" title="3. PyPi部分"></a>3. <code>PyPi</code>部分</h2><h3 id="3-1-注册并认证"><a href="#3-1-注册并认证" class="headerlink" title="3.1 注册并认证"></a>3.1 注册并认证</h3><p>至于如何注册账号，如何获取<code>2FA</code>认证获取发布权限，请自行学习，这里不再赘述。</p><p>完成后生成一个<code>API Token</code>，记得勾选全部权限。</p><h2 id="4-发布"><a href="#4-发布" class="headerlink" title="4. 发布"></a>4. 发布</h2><p>使用<code>twine</code>上传你的库到<code>PyPi</code>。</p><p>首先安装<code>twine</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install twine</span><br></pre></td></tr></table></figure><p>然后使用<code>twine</code>上传你的库。执行之后会让你输入你的<code>API Token</code>，复制进去即可，它不会显示出来。无需多次<code>Ctrl V</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m twine upload dist/*</span><br></pre></td></tr></table></figure><p><strong>注意</strong> : 如果显示你不是这个包的主人，或者显示你没有权限，或者报错<code>403</code>有关的错误，请更换你的库名，<code>PyPi</code>的库名要求全球唯一，所以重复了的话会直接上传失败。</p><h2 id="5-完成"><a href="#5-完成" class="headerlink" title="5. 完成"></a>5. 完成</h2><p>如果一切顺利，你的库就发布成功了。</p><p>可能的发布成功的输出结果:<br><img src="https://images.kimbleex.top/BlogIMG/HandyToolsPy/success.avif" alt="发布成功"></p><h2 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h2><p>发布成功后，你可以使用<code>pip</code>安装你的库。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install &lt;your-package-name&gt;</span><br></pre></td></tr></table></figure><h2 id="7-更新"><a href="#7-更新" class="headerlink" title="7. 更新"></a>7. 更新</h2><p>删除目录下的<code>dist</code>和<code>.egg-info</code>文件夹，然后重新执行<code>build</code>和<code>twine</code>即可。</p><p>记得修改版本号。</p><h2 id="8-一些吐槽"><a href="#8-一些吐槽" class="headerlink" title="8. 一些吐槽"></a>8. 一些吐槽</h2><p>这个更新必须每一次都版本不一样，不然会显示报名重复等报错，真是鸡肋。</p><p>就比如我要修改一下<code>README.md</code>文件，没有修改<code>VERSION</code>，就会在上传的时候报错说这个库已存在。😅</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;兴致来了，打算做一个自己的&lt;code&gt;Python&lt;/code&gt;工具库，发布到&lt;code&gt;PyPi&lt;/code&gt;上，这样可以</summary>
      
    
    
    
    <category term="Tools" scheme="http://xujunliang666.com/categories/Tools/"/>
    
    
    <category term="Python" scheme="http://xujunliang666.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript实现本地文件扫描</title>
    <link href="http://xujunliang666.com/Programming/JS-LocalFileScan/"/>
    <id>http://xujunliang666.com/Programming/JS-LocalFileScan/</id>
    <published>2024-11-21T16:00:00.000Z</published>
    <updated>2024-11-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>跟一个老前端在做一个<code>NAS</code>云存储的工具，涉及到了本地文件扫描，作为一个前端菜鸡，我去了解了一下功能的具体原理，然后自己使用<code>JavaScript</code>实现了一下，现在做一个记录。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>说白了，就是普通的递归查找，输入所需要查找的文件目录，使用<code>Node</code>的<code>fs</code>模块读取目录，然后递归查找子目录，通过<code>isDirectory</code>方法判断子目录中是否也存在文件夹，然后一直重复即可，直到找到所有文件。</p><h2 id="预期结果"><a href="#预期结果" class="headerlink" title="预期结果"></a>预期结果</h2><p>我是想返回一个类似于<code>JSON</code>的变量，预期的结构为:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;根目录&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;子目录1&quot;</span><span class="punctuation">:</span><span class="string">&quot;floder&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;子目录2&quot;</span><span class="punctuation">:</span><span class="string">&quot;floder&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;文件1&quot;</span><span class="punctuation">:</span><span class="string">&quot;file&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;文件2&quot;</span><span class="punctuation">:</span><span class="string">&quot;file&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;子目录1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;文件1&quot;</span><span class="punctuation">:</span><span class="string">&quot;file&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;文件2&quot;</span><span class="punctuation">:</span><span class="string">&quot;file&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;子目录3&quot;</span><span class="punctuation">:</span><span class="string">&quot;floder&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;子目录2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;文件1&quot;</span><span class="punctuation">:</span><span class="string">&quot;file&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;文件2&quot;</span><span class="punctuation">:</span><span class="string">&quot;file&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在这个类似于<code>JSON</code>变量中，每一个<code>Key</code>代表着一个目录，对应的<code>Value</code>对应着这个目录下的所有文件和子目录，并且都有标签与其对应，<code>floder</code>表示这是一个目录，而<code>file</code>表示这是一个文件。这样的标记有利于后续在前端页面中展示的时候对图标的选择等。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>写来写去，为了让最后结果能够<strong>集大成</strong>，选择了使用<code>柯里化 Currying</code>和<code>闭包</code>来实现这个功能。</p><p>首先定义一个父函数<code>scanFile</code>，它声明一个<code>fileList</code>变量，用来保存最后的结果。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">scanFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> fileList = &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义一个子函数<code>scan</code>，用来递归查找目录。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">scan</span>(<span class="params">dir</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> files</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      files = <span class="keyword">await</span> <span class="title function_">readdir</span>(dir, &#123; <span class="attr">withFileTypes</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fileList[dir] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> file <span class="keyword">of</span> files)&#123;</span><br><span class="line">      <span class="keyword">if</span> (file.<span class="title function_">isDirectory</span>()) &#123;</span><br><span class="line">        <span class="keyword">const</span> sonFilePath = <span class="string">`<span class="subst">$&#123;dir&#125;</span><span class="subst">$&#123;file.name&#125;</span>/`</span>;</span><br><span class="line">        fileList[dir][file.<span class="property">name</span>] = <span class="string">&quot;floder&quot;</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">scan</span>(sonFilePath);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        fileList[dir][file.<span class="property">name</span>] = <span class="string">&quot;file&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fileList</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上述代码中，<code>readdir</code>是<code>Node</code>的<code>fs</code>模块中的方法，用来读取目录，<code>withFileTypes: true</code>表示返回的是一个<code>Dirent</code>对象，这个对象中包含了文件名、文件类型等信息。使用<code>files</code>保存读取到的文件列表，然后遍历这个列表，如果当前遍历到的文件是一个目录，则递归调用<code>scan</code>函数，否则将文件名和类型添加到<code>fileList</code>中。最后返回<code>fileList</code>。</p><p>然后，在<code>scanFile</code>函数中返回<code>scan</code>函数。<br>完整代码:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; readdir &#125; <span class="keyword">from</span> <span class="string">&#x27;node:fs/promises&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">scanFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> fileList = &#123;&#125;;</span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">scan</span>(<span class="params">dir</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> files</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      files = <span class="keyword">await</span> <span class="title function_">readdir</span>(dir, &#123; <span class="attr">withFileTypes</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fileList[dir] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> file <span class="keyword">of</span> files)&#123;</span><br><span class="line">      <span class="keyword">if</span> (file.<span class="title function_">isDirectory</span>()) &#123;</span><br><span class="line">        <span class="keyword">const</span> sonFilePath = <span class="string">`<span class="subst">$&#123;dir&#125;</span><span class="subst">$&#123;file.name&#125;</span>/`</span>;</span><br><span class="line">        fileList[dir][file.<span class="property">name</span>] = <span class="string">&quot;floder&quot;</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">scan</span>(sonFilePath);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        fileList[dir][file.<span class="property">name</span>] = <span class="string">&quot;file&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fileList</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> scan</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以尝试打印一下结果。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="title function_">await</span> (<span class="keyword">await</span> <span class="title function_">scanFile</span>())(<span class="string">&quot;D:/git/&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>输出为:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  &#x27;D<span class="punctuation">:</span>/git/&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">    &#x27;Git<span class="number">-2.45</span><span class="number">.2</span><span class="number">-64</span>-bit.exe&#x27;<span class="punctuation">:</span> &#x27;file&#x27;<span class="punctuation">,</span> </span><br><span class="line">    xxx<span class="punctuation">:</span> &#x27;folder&#x27; </span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  &#x27;D<span class="punctuation">:</span>/git/xxx/&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    hhh<span class="punctuation">:</span> &#x27;folder&#x27;<span class="punctuation">,</span></span><br><span class="line">    &#x27;hhh.zip&#x27;<span class="punctuation">:</span> &#x27;file&#x27;<span class="punctuation">,</span></span><br><span class="line">    &#x27;xh.bmp&#x27;<span class="punctuation">:</span> &#x27;file&#x27;<span class="punctuation">,</span></span><br><span class="line">    &#x27;xxx.pptx&#x27;<span class="punctuation">:</span> &#x27;file&#x27;<span class="punctuation">,</span></span><br><span class="line">    &#x27;xxx.txt&#x27;<span class="punctuation">:</span> &#x27;file&#x27;</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  &#x27;D<span class="punctuation">:</span>/git/xxx/hhh/&#x27;<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以看到，<code>scanFile</code>函数返回了一个函数，这个函数返回了一个<code>fileList</code>对象，这个对象中保存了所有目录和文件的信息。</p><p>本地目录结果为:<br><img src="https://images.kimbleex.top/BlogIMG/JS_LocalFileScan/local.avif" alt="本地目录"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;跟一个老前端在做一个&lt;code&gt;NAS&lt;/code&gt;云存储的工具，涉及到了本地文件扫描，作为一个前端菜鸡，我去了解了一下功能的具体原理，然后自己使用&lt;code&gt;JavaScript&lt;/code&gt;实现了一下，现在做一个记录。&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="JavaScript" scheme="http://xujunliang666.com/tags/JavaScript/"/>
    
    <category term="前端" scheme="http://xujunliang666.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="算法" scheme="http://xujunliang666.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Corn调度任务表达式写法笔记</title>
    <link href="http://xujunliang666.com/Programming/Corn/"/>
    <id>http://xujunliang666.com/Programming/Corn/</id>
    <published>2024-11-19T16:00:00.000Z</published>
    <updated>2024-11-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>起因是写<code>Github</code>主页的时候，突发奇想打算设置<code>Action</code>来定时推送仓库，于是就涉及到了Corn调度任务表达式写法，记录一下。</p><h2 id="Corn规范"><a href="#Corn规范" class="headerlink" title="Corn规范"></a><code>Corn</code>规范</h2><p>Corn表达式由6个字段组成，每个字段之间用空格分隔，格式如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*  *  *  *  *  *</span><br><span class="line">|  |  |  |  |  |___________ 星期， 数值为0-6，周日为0，也可以使用星期缩写，比如mon等</span><br><span class="line">|  |  |  |  |______________ 月份， 数值为1-12，也可以使用月份缩写，比如jan等</span><br><span class="line">|  |  |  |_________________ 日期， 数值为1-31</span><br><span class="line">|  |  |____________________ 小时， 数值为0-23</span><br><span class="line">|  |_______________________ 分钟， 数值为0-59</span><br><span class="line">|__________________________ 秒钟， 数值为0-59，可选字段</span><br></pre></td></tr></table></figure><h2 id="其他符号支持"><a href="#其他符号支持" class="headerlink" title="其他符号支持"></a>其他符号支持</h2><p>除了上面的基础字段写法，<code>Corn</code>还支持一些符号</p><ul><li>星号(*) 表示匹配任意值，即全部值 。例如，* 在分钟字段中表示每分钟都执行。</li><li>逗号(,) 用于分隔多个值。例如，1,3,5 在小时字段中表示 1 点、3 点和 5 点执行。</li><li>斜线(/) 用于指定间隔值。例如，*/5 在分钟字段中表示每 5 分钟执行一次。</li><li>连字符(-) 用于指定范围。例如，10-20 在日期字段中表示从 10 号到 20 号。</li><li>问号(?) 仅用于日期和星期几字段，表示不指定具体值。通常用于避免冲突。</li></ul><h2 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h2><div class="note success no-icon flat"><p><mark class="hl-label green">每分钟执行一次</mark><br>0 * * * * *</p></div><div class="note warning no-icon flat"><p><mark class="hl-label orange">每天上午9点执行一次</mark><br>0 0 9 * * *</p></div><div class="note primary no-icon flat"><p><mark class="hl-label purple">每周一上午10点执行一次</mark><br>0 0 10 * * mon</p></div><div class="note danger no-icon flat"><p><mark class="hl-label red">每个月10-20号的每天8点执行一次</mark><br>0 0 8 10-20 * *</p></div><div class="note success no-icon flat"><p><mark class="hl-label green">每两个小时执行一次</mark><br>0 0 */2 * * *</p></div><h2 id="一些注意"><a href="#一些注意" class="headerlink" title="一些注意"></a>一些注意</h2><p>上面说到秒钟单位是可以省略的，所以在写表达式时，可以直接省略秒的那一位。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;起因是写&lt;code&gt;Github&lt;/code&gt;主页的时候，突发奇想打算设置&lt;code&gt;Action&lt;/code&gt;来定时推送仓库，于是就涉及到了Corn调度任务表达式写法，记录一下。&lt;/p&gt;
&lt;h2 id=&quot;Corn规范&quot;&gt;&lt;a href=&quot;#Corn规范&quot; class=&quot;h</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="Linux" scheme="http://xujunliang666.com/tags/Linux/"/>
    
    <category term="定时调度" scheme="http://xujunliang666.com/tags/%E5%AE%9A%E6%97%B6%E8%B0%83%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>Windows Office 无需任何成本激活方法</title>
    <link href="http://xujunliang666.com/Tools/Windows-Office-Activate/"/>
    <id>http://xujunliang666.com/Tools/Windows-Office-Activate/</id>
    <published>2024-11-13T16:00:00.000Z</published>
    <updated>2024-11-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>官方开源仓库: <a href="https://github.com/massgravel/Microsoft-Activation-Scripts">Microsoft-Activation-Scripts</a></p><p>本文受启发于: <a href="https://yangqiuyi.com/blog/windows/windows11%E4%B8%93%E4%B8%9A%E7%89%88%E6%BF%80%E6%B4%BB/">Windows11专业版激活</a></p><p>这是一个利用硬件ID激活的办法, 激活后一劳永逸, 即使重装系统也不需要再激活, 但是需要保持硬件不变。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>打开<code>Windwos PowerShell</code>, 输入以下命令(<strong>注意不是<code>CMD</code></strong>):</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">irm</span> https://get.activated.win | <span class="built_in">iex</span></span><br></pre></td></tr></table></figure><p>输入完成后回车，会弹出一个新界面，在新界面中选择你需要激活的内容即可。</p><ul><li>选项: <code>[1] HWID</code>用于激活<code>Windows</code></li><li>选项: <code>[2] Ohook</code>用于激活<code>Office</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;官方开源仓库: &lt;a href=&quot;https://github.com/massgravel/Microsoft-Activation-Scripts&quot;&gt;Microsoft-Activation-Scripts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文受启发于: &lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="Tools" scheme="http://xujunliang666.com/categories/Tools/"/>
    
    
    <category term="工具" scheme="http://xujunliang666.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>关于新图片格式AVIF和Pillow格式转换方法</title>
    <link href="http://xujunliang666.com/Programming/AVIF-Pillow/"/>
    <id>http://xujunliang666.com/Programming/AVIF-Pillow/</id>
    <published>2024-11-12T16:00:00.000Z</published>
    <updated>2024-11-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>AVIF (AV1 Image File Format)</code>是一种现代图像格式, 基于<code>AV1</code>视频编码技术。它由<code>Alliance for Open Media</code>开发, 旨在提供高效的图像压缩, 同时保持优良的图像质量。</p><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p><code>AVIF</code>源于<code>AV1</code>视频编码格式, 这是一种开源、免版税的视频编码格式, 旨在替代<code>VP9</code>和<code>H.264</code>。<code>AVIF</code>利用<code>AV1</code>的压缩技术来处理静态图像和图像序列, 提供高效的图像存储和传输。</p><h2 id="AVIF格式的特点和优势"><a href="#AVIF格式的特点和优势" class="headerlink" title="AVIF格式的特点和优势"></a>AVIF格式的特点和优势</h2><ul><li>高压缩效率: <code>AVIF</code>具有出色的压缩效率, 能够在较小的文件大小下提供优质的图像质量。这使得它在带宽和存储有限的情况下非常有用。</li><li>支持<code>HDR</code>: <code>AVIF</code>支持高动态范围<code>HDR</code>图像, 能够呈现更丰富的色彩和对比度。</li><li>色彩深度: 支持8位、10位和12位色深, 能够更好地处理复杂的色彩信息。</li><li>透明度: 支持透明度通道, 使其适用于需要透明背景的图像。</li><li>动画支持: <code>AVIF</code>支持动画, 与<code>GIF</code>和<code>APNG</code>相比, 提供了更高效的动画压缩。</li></ul><h2 id="与其他格式的比较"><a href="#与其他格式的比较" class="headerlink" title="与其他格式的比较"></a>与其他格式的比较</h2><ul><li><code>JPEG</code>: <code>AVIF</code>在相同图像质量下通常比<code>JPEG</code>文件小得多, 并且支持更高的色彩深度和透明度。</li><li><code>PNG</code>: 虽然<code>PNG</code>支持无损压缩和透明度, 但<code>AVIF</code>在有损压缩情况下提供了更小的文件大小。</li><li><code>WebP</code>: <code>AVIF</code>通常比<code>WebP</code>提供更高的压缩效率, 尤其是在处理高分辨率图像时。</li><li><code>HEIC</code>: <code>AVIF</code>与<code>HEIC</code>相似, 但<code>AVIF</code>是免版税的, 而<code>HEIC</code>可能涉及专利许可问题。</li></ul><h2 id="兼容性（截至2024年）"><a href="#兼容性（截至2024年）" class="headerlink" title="兼容性（截至2024年）"></a>兼容性（截至2024年）</h2><div class="note success no-icon % } {% label 浏览器支持 green flat"><ul><li><code>Google Chrome</code>: 支持。</li><li><code>Mozilla Firefox</code>: 支持。</li><li><code>Microsoft Edge</code>: 支持。</li><li><code>Safari</code>: 从<code>Safari 16</code>开始支持, 但支持可能不如其他浏览器全面。</li></ul></div><div class="note success no-icon % } {% label 操作系统支持 green flat"><ul><li><code>Windows</code>: <code>Windows 10</code>及以上已通过系统更新支持。</li><li><code>macOS</code>: 从<code>macOS Ventura</code>开始支持。</li><li><code>Android</code>: 较新的<code>Android</code>版本支持。</li><li><code>iOS</code>: 从<code>iOS 16</code>开始支持。</li></ul></div><p>总结<br><code>AVIF</code>作为一种现代图像格式, 提供了卓越的压缩效率和图像质量, 逐渐被主流浏览器和操作系统采纳。随着技术的进步和普及, <code>AVIF</code>有望成为广泛使用的图像格式之一。</p><h2 id="Pillow库实现AVIF格式转换"><a href="#Pillow库实现AVIF格式转换" class="headerlink" title="Pillow库实现AVIF格式转换"></a>Pillow库实现AVIF格式转换</h2><p><code>Pillow</code>是一个强大的Python图像处理库, 支持多种图像格式, 包括<code>AVIF</code>。通过<code>Pillow</code>, 可以轻松实现<code>AVIF</code>与其他图像格式的相互转换。</p><h3 id="安装Pillow库"><a href="#安装Pillow库" class="headerlink" title="安装Pillow库"></a>安装Pillow库</h3><p>在开始之前, 需要确保已安装<code>Pillow</code>库以及<code>pillow-avif-plugin</code>库。可以使用以下命令安装:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install Pillow pillow-avif-plugin</span><br></pre></td></tr></table></figure><h3 id="AVIF格式转换为其他格式"><a href="#AVIF格式转换为其他格式" class="headerlink" title="AVIF格式转换为其他格式"></a>AVIF格式转换为其他格式</h3><p>以下是一个示例, 将<code>AVIF</code>格式转换为其他格式:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image    <span class="comment"># Pillow                    9.0.0</span></span><br><span class="line"><span class="keyword">import</span> pillow_avif       <span class="comment"># pillow-avif-plugin        1.2.2</span></span><br><span class="line"><span class="comment">#以上只是其中一个可用版本，并非必须</span></span><br><span class="line"></span><br><span class="line">AVIFfilename = <span class="string">&#x27;test.avif&#x27;</span></span><br><span class="line">AVIFimg = Image.<span class="built_in">open</span>(AVIFfilename)</span><br><span class="line"><span class="comment"># 将AVIF格式转换为JPEG格式，当然其他格式都可以</span></span><br><span class="line">AVIFimg.save(AVIFfilename.replace(<span class="string">&quot;avif&quot;</span>,<span class="string">&#x27;jpg&#x27;</span>),<span class="string">&#x27;JPEG&#x27;</span>)</span><br></pre></td></tr></table></figure><p>当然, 也可以将其他格式转为<code>AVIF</code>格式:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image    <span class="comment"># Pillow                    9.0.0</span></span><br><span class="line"><span class="keyword">import</span> pillow_avif       <span class="comment"># pillow-avif-plugin        1.2.2</span></span><br><span class="line"><span class="comment">#以上只是其中一个可用版本，并非必须</span></span><br><span class="line"></span><br><span class="line">img_path_ = <span class="string">&quot;./test.png&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(path_)</span><br><span class="line">img.save(path_.replace(<span class="string">&quot;jpg&quot;</span>,<span class="string">&#x27;avif&#x27;</span>),<span class="string">&#x27;AVIF&#x27;</span>)</span><br></pre></td></tr></table></figure><p>转换完成后，我们可以在根目录看到转换完成后的文件，文件名后缀为<code>.avif</code>。<br><img src="https://images.kimbleex.top/BlogIMG/AVIF_Pillow/converted.avif" alt="图片转换完成"></p><p>我们可以在文件管理器中比较转换前后的图片大小。<br><img src="https://images.kimbleex.top/BlogIMG/AVIF_Pillow/size_compare.avif" alt="图片大小比较"><br>可以看到，转换后的图片大小明显小于转换前的图片大小。由此可见，<code>AVIF</code>格式具有更高的压缩效率。</p><p>最后让我们从视觉上感受两张图片的差距。<br><img src="https://images.kimbleex.top/BlogIMG/AVIF_Pillow/vis_compare.avif" alt="图片对比"><br>可以看到，转换前后的图片几乎没有什么差别，说明<code>AVIF</code>格式在保持图像质量的同时，也具有很高的压缩效率。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;AVIF (AV1 Image File Format)&lt;/code&gt;是一种现代图像格式, 基于&lt;code&gt;AV1&lt;/code&gt;视频编码技术。它由&lt;code&gt;Alliance for Open Media&lt;/code&gt;开发, 旨在提供高效的图像压缩, 同时保持优</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="Python" scheme="http://xujunliang666.com/tags/Python/"/>
    
    <category term="图像处理" scheme="http://xujunliang666.com/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    <category term="前端" scheme="http://xujunliang666.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Prisma操作Docker远程数据库PostgreSQL</title>
    <link href="http://xujunliang666.com/Programming/Prisma-Docker-PostgreSQL/"/>
    <id>http://xujunliang666.com/Programming/Prisma-Docker-PostgreSQL/</id>
    <published>2024-10-24T16:00:00.000Z</published>
    <updated>2024-10-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前提条件：安装好Docker-Desktop、NodeJS以及具备一定的TypeScript基础"><a href="#前提条件：安装好Docker-Desktop、NodeJS以及具备一定的TypeScript基础" class="headerlink" title="前提条件：安装好Docker Desktop、NodeJS以及具备一定的TypeScript基础"></a><strong>前提条件：安装好Docker Desktop、NodeJS以及具备一定的TypeScript基础</strong></h4><h4 id="本教程实验环境为Windows-11、NodeJS-20-15-0、Docker-27-2-0"><a href="#本教程实验环境为Windows-11、NodeJS-20-15-0、Docker-27-2-0" class="headerlink" title="本教程实验环境为Windows 11、NodeJS-20.15.0、Docker-27.2.0"></a><strong>本教程实验环境为Windows 11、NodeJS-20.15.0、Docker-27.2.0</strong></h4><h5 id="本地部署的数据库同样可以实现，确保数据库可以成功连接即可"><a href="#本地部署的数据库同样可以实现，确保数据库可以成功连接即可" class="headerlink" title="本地部署的数据库同样可以实现，确保数据库可以成功连接即可"></a>本地部署的数据库同样可以实现，确保数据库可以成功连接即可</h5><h2 id="1-Docker部署PostgreSQL"><a href="#1-Docker部署PostgreSQL" class="headerlink" title="1. Docker部署PostgreSQL"></a>1. Docker部署PostgreSQL</h2><h3 id="1-1-首先创建一个空文件夹"><a href="#1-1-首先创建一个空文件夹" class="headerlink" title="1.1 首先创建一个空文件夹"></a>1.1 首先创建一个空文件夹</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\&gt; <span class="title">mkdir</span> <span class="title">postgresql</span></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\&gt; <span class="title">cd</span> <span class="title">postgresql</span></span></span><br></pre></td></tr></table></figure><h3 id="1-2-配置Docker-Compose"><a href="#1-2-配置Docker-Compose" class="headerlink" title="1.2 配置Docker Compose"></a>1.2 配置Docker Compose</h3><p><code>Docker Compose</code> 简化了对整个应用程序堆栈的控制，使得在一个易于理解的 YAML 配置文件中轻松管理服务、网络和数据卷。 接下来我们创建配置文件来对它进行配置。</p><p>在上面创建好的空文件夹中创建配置文件<code>docker-compose.yml</code>，并编辑：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">postgres_db:</span> <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:15.7</span> <span class="comment"># 指定镜像及其版本</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">docker_postgres</span> <span class="comment"># 指定容器的名称</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">postgres</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">postgres</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">ports:</span> <span class="comment"># 端口映射</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5432:5432&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment"># 数据持久化的配置</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data:/var/lib/postgresql/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">log:/var/log/postgresql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span> <span class="comment"># 数据卷</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">  <span class="attr">log:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对配置文件中属性的一些注解：</p><blockquote><p><code>image</code> :  指定了要使用的 Docker 镜像及其版本。在这里，我们使用了官方的 PostgreSQL 15.7 版本镜像。为了确保系统的稳定性和兼容性，推荐使用 PostgreSQL 官方镜像的一个稳定版本而不是最新版<code>latest</code>。如果没有写版本，将会默认使用最新版本<code>latest</code>。</p><p><code>contain_name</code>:  容器名称。</p><p><code>environment</code>:  环境变量，可以是数据库的用户名、数据库类型和密码。</p><p><code>ports</code>:  端口。</p><p><code>volumes</code>:  数据持久化卷。这个可以保证容器被删除的情况下，数据卷中的数据不会丢失。如果不需要可以把日志数据卷去掉。很多不被使用的数据卷可能会占用很大的存储空间。</p></blockquote><h3 id="1-3-部署和验证"><a href="#1-3-部署和验证" class="headerlink" title="1.3 部署和验证"></a>1.3 部署和验证</h3><p>接下来启动<code>Docker Compose</code>，它会按照配置文件来配置容器，我们已经配置了数据库镜像，所以启动后它会自动拉取<code>Postgresql</code>数据库镜像并部署运行：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">postgresql</span>&gt; <span class="title">docker</span> <span class="title">compose</span> <span class="title">up</span> -<span class="title">d</span></span></span><br></pre></td></tr></table></figure><p>如果没有刚才创建的<code>docker-compose.yml</code>配置文件，将会报错：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">postgresql</span>&gt; <span class="title">docker</span> <span class="title">compose</span> <span class="title">up</span> -<span class="title">d</span></span></span><br><span class="line"><span class="function"><span class="title">no</span> <span class="title">configuration</span> <span class="title">file</span> <span class="title">provided</span>: <span class="title">not</span> <span class="title">found</span></span></span><br></pre></td></tr></table></figure><p>部署成功显示如下：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">[+] Running <span class="number">1</span>/<span class="number">1</span></span><br><span class="line">[+] Running <span class="number">1</span>/<span class="number">2</span>tgresql_default  Created                            <span class="number">0</span>.<span class="number">1</span>s</span><br><span class="line">[+] Running <span class="number">1</span>/<span class="number">2</span>tgresql_default  Created                            <span class="number">0</span>.<span class="number">1</span>s</span><br><span class="line">[+] Running <span class="number">1</span>/<span class="number">2</span>tgresql_default  Created                            <span class="number">0</span>.<span class="number">1</span>s</span><br><span class="line">[+] Running <span class="number">1</span>/<span class="number">2</span>tgresql_default  Created                            <span class="number">0</span>.<span class="number">1</span>s</span><br><span class="line">[+] Running <span class="number">1</span>/<span class="number">2</span>tgresql_default  Created                            <span class="number">0</span>.<span class="number">1</span>s</span><br><span class="line">[+] Running <span class="number">2</span>/<span class="number">2</span>tgresql_default  Created                            <span class="number">0</span>.<span class="number">1</span>s</span><br><span class="line"> ✔ Network postgresql_default  Created                             <span class="number">0</span>.<span class="number">1</span>s </span><br><span class="line">  - Container docker_postgres   Starting                         <span class="number">0</span>.<span class="number">6</span>s</span><br><span class="line"> ✔ Container docker_postgres   Started                             <span class="number">0</span>.<span class="number">7</span>s</span><br></pre></td></tr></table></figure><p>这里我已经运行过相同指令，所以输出可能会有所不同，初次运行可能的成功结果如下：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">[+] Running <span class="number">15</span>/<span class="number">15</span></span><br><span class="line"> ✔ postgres_db Pulled                                                           <span class="number">61</span>.<span class="number">9</span>s</span><br><span class="line">   ✔ <span class="number">09</span>f376ebb190 Pull complete                                                 <span class="number">8</span>.<span class="number">9</span>s</span><br><span class="line">   ✔ <span class="number">119215</span>dfb3e3 Pull complete                                                 <span class="number">2</span>.<span class="number">0</span>s</span><br><span class="line">   ✔ <span class="number">94</span>fccb772ad3 Pull complete                                                 <span class="number">10</span>.<span class="number">7</span>s</span><br><span class="line">   ✔ <span class="number">0</span>fc3acb16548 Pull complete                                                 <span class="number">8</span>.<span class="number">6</span>s</span><br><span class="line">   ✔ d7dba7d03fe8 Pull complete                                                 <span class="number">13</span>.<span class="number">1</span>s</span><br><span class="line">   ✔ <span class="number">898</span>ae395a1ca Pull complete                                                 <span class="number">12</span>.<span class="number">6</span>s</span><br><span class="line">   ✔ <span class="number">088</span>e651df7e9 Pull complete                                                 <span class="number">12</span>.<span class="number">4</span>s</span><br><span class="line">   ✔ ed155773e5e0 Pull complete                                                 <span class="number">14</span>.<span class="number">2</span>s</span><br><span class="line">   ✔ <span class="number">52</span>df7d12fb73 Pull complete                                                 <span class="number">33</span>.<span class="number">4</span>s</span><br><span class="line">   ✔ bab1ecc22dc9 Pull complete                                                 <span class="number">15</span>.<span class="number">2</span>s</span><br><span class="line">   ✔ <span class="number">1655</span>a257a5b5 Pull complete                                                 <span class="number">16</span>.<span class="number">0</span>s</span><br><span class="line">   ✔ <span class="number">978</span>f02dfc247 Pull complete                                                 <span class="number">18</span>.<span class="number">0</span>s</span><br><span class="line">   ✔ d715d7d9aee0 Pull complete                                                 <span class="number">17</span>.<span class="number">8</span>s</span><br><span class="line">   ✔ b2e9251b2f8d Pull complete                                                 <span class="number">19</span>.<span class="number">8</span>s</span><br><span class="line">[+] Running <span class="number">3</span>/<span class="number">3</span></span><br><span class="line"> ✔ Volume &quot;postgresql_log&quot;    Created                                           <span class="number">0</span>.<span class="number">0</span>s</span><br><span class="line"> ✔ Volume &quot;postgresql_data&quot;   Created                                           <span class="number">0</span>.<span class="number">0</span>s</span><br><span class="line"> ✔ Container docker_postgres  Started                                           <span class="number">0</span>.<span class="number">9</span>s</span><br></pre></td></tr></table></figure><p>接着，验证一下数据库是否在运行：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">postgresql</span>&gt;<span class="title">docker</span> <span class="title">compose</span> <span class="title">ps</span></span></span><br><span class="line"><span class="function"><span class="title">NAME</span>              <span class="title">IMAGE</span>           <span class="title">COMMAND</span>                   <span class="title">SERVICE</span>       <span class="title">CREATED</span>         <span class="title">STATUS</span>         <span class="title">PORTS</span></span></span><br><span class="line"><span class="function"><span class="title">docker_postgres</span>   <span class="title">postgres</span>:15.7   &quot;<span class="title">docker</span>-<span class="title">entrypoint.s</span>…&quot;   <span class="title">postgres_db</span>   4 <span class="title">minutes</span> <span class="title">ago</span>   <span class="title">Up</span> 4 <span class="title">minutes</span>   0.0.0.0:5432-&gt;5432/<span class="title">tcp</span></span></span><br></pre></td></tr></table></figure><p>可以看到，数据库已成功部署。</p><h2 id="2-Prisma远程操作数据库"><a href="#2-Prisma远程操作数据库" class="headerlink" title="2. Prisma远程操作数据库"></a>2. Prisma远程操作数据库</h2><h3 id="2-1-环境配置"><a href="#2-1-环境配置" class="headerlink" title="2.1 环境配置"></a>2.1 环境配置</h3><p>初始化一个 TypeScript 项目，并将 Prisma CLI 作为开发依赖项添加到其中。</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">postgresql</span>&gt;<span class="title">npm</span> <span class="title">init</span> -<span class="title">y</span></span></span><br><span class="line"><span class="function"><span class="title">Wrote</span> <span class="title">to</span> <span class="title">D</span>:\<span class="title">postgresql</span>\<span class="title">package.json</span>:</span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line"><span class="function">  &quot;<span class="title">name</span>&quot;: &quot;<span class="title">postgresql</span>&quot;,</span></span><br><span class="line"><span class="function">  &quot;<span class="title">version</span>&quot;: &quot;1.0.0&quot;,</span></span><br><span class="line"><span class="function">  &quot;<span class="title">main</span>&quot;: &quot;<span class="title">index.js</span>&quot;,</span></span><br><span class="line"><span class="function">  &quot;<span class="title">scripts</span>&quot;: &#123;</span></span><br><span class="line"><span class="function">    &quot;<span class="title">test</span>&quot;: &quot;<span class="title">echo</span> \&quot;<span class="title">Error</span>: <span class="title">no</span> <span class="title">test</span> <span class="title">specified</span>\&quot; &amp;&amp; <span class="title">exit</span> 1&quot;</span></span><br><span class="line"><span class="function">  &#125;,</span></span><br><span class="line"><span class="function">  &quot;<span class="title">keywords</span>&quot;: [],</span></span><br><span class="line"><span class="function">  &quot;<span class="title">author</span>&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="function">  &quot;<span class="title">license</span>&quot;: &quot;<span class="title">ISC</span>&quot;,</span></span><br><span class="line"><span class="function">  &quot;<span class="title">description</span>&quot;: &quot;&quot;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">postgresql</span>&gt;<span class="title">npm</span> <span class="title">install</span> <span class="title">prisma</span> <span class="title">typescript</span> <span class="title">ts</span>-<span class="title">node</span> @<span class="title">types</span>/<span class="title">node</span> --<span class="title">save</span>-<span class="title">dev</span></span></span><br><span class="line"><span class="function"><span class="title">added</span> 26 <span class="title">packages</span> <span class="title">in</span> 9<span class="title">s</span></span></span><br></pre></td></tr></table></figure><p>这将创建一个包含 TypeScript 应用程序的初始设置的 <code>package.json</code>。接着初始化TypeScirpt:</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">postgresql</span>&gt; <span class="title">npmx</span> <span class="title">tsc</span> --<span class="title">init</span></span></span><br></pre></td></tr></table></figure><p>我们可以尝试调用<code>prisma</code>：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">postgresql</span>&gt; <span class="title">npx</span> <span class="title">prisma</span></span></span><br></pre></td></tr></table></figure><p>然后，初始化<code>prisma</code>，并生成环境配置文件<code>.env</code>:</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">postgresql</span>&gt; <span class="title">npx</span> <span class="title">prisma</span> <span class="title">init</span></span></span><br></pre></td></tr></table></figure><p><code>.env</code>中存放数据库的远程链接等内容。PostgreSQL的远程链接地址一般如下：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">DATABASE_URL=&quot;postgresql://username:password@localhost:5432/sqlname&quot;</span><br></pre></td></tr></table></figure><p>记得将<code>username</code> <code>password</code> 以及 <code>sqlname</code>替换成刚才创建<code>docker</code>中的配置文件中的信息<code>docker-compose.yml</code>.</p><p>例如我的<code>.env</code>文件内容为：(参考我的<code>docker-compose.yml</code>)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DATABASE_URL=&quot;postgresql://postgres:postgres@localhost:5432/postgres&quot;</span><br></pre></td></tr></table></figure><h3 id="2-2-创建数据库表"><a href="#2-2-创建数据库表" class="headerlink" title="2.2 创建数据库表"></a>2.2 创建数据库表</h3><p><code>prisma</code>中数据库表用<code>model</code>表示，它提供了多种属性类型等，在<code>schema.prisma</code>中写入两张表，关于数据库表的属性的设计可以参考官网：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">generator client &#123;</span><br><span class="line">  provider = &quot;prisma-client-js&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">datasource db &#123;</span><br><span class="line">  provider = &quot;postgresql&quot;</span><br><span class="line">  url      = env(&quot;DATABASE_URL&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">model Profile &#123;</span><br><span class="line">  id Int @id @default(autoincrement())</span><br><span class="line">  bio String</span><br><span class="line">  user User @relation(fields: [userId], references: [id])</span><br><span class="line">  userId Int @unique</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">model User &#123;</span><br><span class="line">  id Int @id @default(autoincrement())</span><br><span class="line">  name String</span><br><span class="line">  age Int</span><br><span class="line">  profile Profile?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在进行数据库映射：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">postgresql</span>&gt; <span class="title">npx</span> <span class="title">prisma</span> <span class="title">migrate</span> <span class="title">dev</span> --<span class="title">name</span> <span class="title">init</span></span></span><br></pre></td></tr></table></figure><p>这样操作之后，远程对数据库的更改就可以同步到我们的数据库镜像中。</p><h3 id="2-3-增删改查-CURD"><a href="#2-3-增删改查-CURD" class="headerlink" title="2.3 增删改查 (CURD)"></a>2.3 增删改查 (CURD)</h3><p>创建一个<code>index.ts</code>文件，用来通过<code>prisma</code>操作数据库：</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PrismaClient</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@prisma/client&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> prisma = <span class="keyword">new</span> <span class="title class_">PrismaClient</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> prisma.<span class="property">user</span>.<span class="title function_">findMany</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(user);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="title function_">main</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> prisma.$disconnect()</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="title function_">async</span> (e) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span><br><span class="line">    <span class="keyword">await</span> prisma.$disconnect()</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>根据我们之前创建的两张表<code>User</code>和<code>Profile</code>，我们上面的操作是对<code>User</code>进行了查询操作。<code>[table].findMany()</code>方法是对表格的查询，请注意，<strong>根据<code>prisma</code>规范，表格的名称在创建是首字母应该大写，但是对表格进行操作时，表格的名称应全部改成小写</strong>，所以在上面的代码中，<code>prisma.user.findMany()</code>中的表格名称<code>user</code>是小写的。</p><p>运行<code>index.ts</code>文件：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">postgresql</span>&gt; <span class="title">npx</span> <span class="title">ts</span>-<span class="title">node</span> <span class="title">index.ts</span></span></span><br></pre></td></tr></table></figure><p>如果正确执行，那么会打印出一个空数组，显而易见，由于表格新创建，所以里面没有数据内容。</p><p>下面我们来写入数据库，修改<code>index.ts</code>:</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PrismaClient</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@prisma/client&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> prisma = <span class="keyword">new</span> <span class="title class_">PrismaClient</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">addUser</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">await</span> prisma.<span class="property">user</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;hi&quot;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="attr">profile</span>: &#123;</span><br><span class="line">                <span class="attr">create</span>: &#123;</span><br><span class="line">                    <span class="attr">bio</span>: <span class="string">&quot;I am a software developer&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> profile = <span class="keyword">await</span> prisma.<span class="property">profile</span>.<span class="title function_">findMany</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(profile)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addUser</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> prisma.$disconnect()</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="title function_">async</span> (e) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span><br><span class="line">    <span class="keyword">await</span> prisma.$disconnect()</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们向<code>user</code>写入了一个名字叫<code>hi</code>、年龄为18的人，并通过绑定同时写入了<code>profile</code>表格的一项<code>bio</code>属性。</p><p>再次执行<code>index.ts</code>，注意，我将<code>prisma.user.findmany()</code>中的<code>user</code>改成了<code>profile</code>，所以我这次查询输出的是<code>Profile</code>表格中的内容，最后的输出为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; id: 1, bio: &#x27;I am a software developer&#x27;, userId: 1 &#125;,</span><br><span class="line">  &#123; id: 2, bio: &#x27;I am a software developer&#x27;, userId: 2 &#125;,</span><br><span class="line">  &#123; id: 3, bio: &#x27;I am a software developer&#x27;, userId: 3 &#125;,</span><br><span class="line">  &#123; id: 4, bio: &#x27;I am a software developer&#x27;, userId: 4 &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>可以看到确实向表格中插入的四条数据。</p><p>最后我们尝试来更新表格内容，更新的方法为<code>update()</code>，语法与上述查询和插入一样，修改<code>main</code>函数：</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> profile = <span class="keyword">await</span> prisma.<span class="property">profile</span>.<span class="title function_">update</span>(&#123;</span><br><span class="line">    <span class="attr">where</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    <span class="attr">data</span>: &#123; <span class="attr">bio</span>: <span class="string">&#x27;I am a super satr!!!&#x27;</span> &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(profile)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我对<code>Profile</code>表格使用了更新方法，在<code>id</code>属性为1的位置，将<code>bio</code>属性值修改成了”I am a super satr!!!”，再次运行<code>index.ts</code>，最后的输出为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; id: 1, bio: &#x27;I am a super satr!!!&#x27;, userId: 1 &#125;,</span><br><span class="line">  &#123; id: 2, bio: &#x27;I am a software developer&#x27;, userId: 2 &#125;,</span><br><span class="line">  &#123; id: 3, bio: &#x27;I am a software developer&#x27;, userId: 3 &#125;,</span><br><span class="line">  &#123; id: 4, bio: &#x27;I am a software developer&#x27;, userId: 4 &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>可以看到，数据已经成功更新到数据库中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前提条件：安装好Docker-Desktop、NodeJS以及具备一定的TypeScript基础&quot;&gt;&lt;a href=&quot;#前提条件：安装好Docker-Desktop、NodeJS以及具备一定的TypeScript基础&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="前端" scheme="http://xujunliang666.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Async" scheme="http://xujunliang666.com/tags/Async/"/>
    
    <category term="Docker" scheme="http://xujunliang666.com/tags/Docker/"/>
    
    <category term="数据库" scheme="http://xujunliang666.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Prisma" scheme="http://xujunliang666.com/tags/Prisma/"/>
    
    <category term="TypeScript" scheme="http://xujunliang666.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Python调用Openai接口实现图像分析</title>
    <link href="http://xujunliang666.com/Programming/OpenAI-Image-Process/"/>
    <id>http://xujunliang666.com/Programming/OpenAI-Image-Process/</id>
    <published>2024-08-04T16:00:00.000Z</published>
    <updated>2024-08-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>调用opanai库中的OpenAI接口实现。本文讨论的是openai-1.x以上版本，我在写这篇文章时使用的时openai-1.37。</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，你需要拥有一个openai平台的<code>api_key</code>，可以去淘宝或官网购买，这里推荐淘宝。</p><p>因为国内商家为了防止因代理不稳定，且确保购买的号不被封号，使用的是中转接口(卖家服务器api负责转发消息问答)。</p><h2 id="2-开始"><a href="#2-开始" class="headerlink" title="2. 开始"></a>2. 开始</h2><p>介绍两个函数接口。</p><blockquote><p><code>OpenAI(base_url, api_key)</code>: <code>chatgpt</code>应用<code>client</code>创建接口，我们只需要指定<code>base_url</code>和<code>api_key</code>两个参数即可。<code>base_url</code>表示的是我们上述提到的中专接口的地址，<code>api_key</code>代表的是我们购买的平台的通行证。<br><code>client.chat.completions.create(model, message)</code>: 创建对话，需要指定模型和问答小心内容。<code>model</code>仅可指定你的<code>api_key</code>允许的模型。</p></blockquote><h3 id="2-1-关于message参数"><a href="#2-1-关于message参数" class="headerlink" title="2.1 关于message参数"></a>2.1 关于<code>message</code>参数</h3><p>上次介绍了基础问答的<code>message</code>参数，是一个列表，包含了三个字典变量。其格式如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = [</span><br><span class="line">    <span class="comment"># 系统定位配置，可不配置。 “你是一个Python专家”告诉GPT它要做的事情</span></span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a expert in Python&quot;</span>&#125;, </span><br><span class="line">    <span class="comment"># 用户提问内容配置，“帮助我以颜色为条件筛选数据”，也就是输入的问题</span></span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;help me filter the data by color&quot;</span>&#125;,</span><br><span class="line">    <span class="comment"># 助手配置，用来规范GPT回答的格式。“以这种格式回答： ‘筛选的数据：数据’”，可不配置</span></span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;Answer in this format : &#x27;data filtered : Your Filtered DATA&#x27; &quot;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这次的图片上传的<code>massage</code>有所不同，其格式如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">messages=[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>,<span class="string">&quot;content&quot;</span>: [</span><br><span class="line">                    <span class="comment"># 第一个大括号类型定义为文本，输入你想要提问的问题</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>, <span class="string">&quot;text&quot;</span>: <span class="string">&quot;What&#x27;s in this image?&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment"># 第二个大括号类型定义为图片，输入本地图片的base64编码</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;image_url&quot;</span>,</span><br><span class="line">                        <span class="comment"># 图片格式可定义为image/png等等，编码方式为base64</span></span><br><span class="line">                        <span class="string">&quot;image_url&quot;</span>: &#123;<span class="string">&quot;url&quot;</span>: <span class="string">f&quot;data:image/jpg;base64,<span class="subst">&#123;base64_image&#125;</span>&quot;</span>&#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><h3 id="2-2-返回值"><a href="#2-2-返回值" class="headerlink" title="2.2 返回值"></a>2.2 返回值</h3><p>使用<code>completion.choices[0].message</code>接受返回值，<code>completion</code>即为在第2节开头提到的第二个函数的接收值。</p><p>它返回一个<code>content</code>对象，里面包含了回答内容等信息。可以转换为字典来获取返回值。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">completion = client.chat.completions.create(</span><br><span class="line">    model = <span class="string">&#x27;my model&#x27;</span>, </span><br><span class="line">    message = myMessage</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回</span></span><br><span class="line"><span class="built_in">print</span>(completion.choice[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="2-3-示例"><a href="#2-3-示例" class="headerlink" title="2.3 示例"></a>2.3 示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span>  openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line"><span class="comment"># base64编码函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_image</span>(<span class="params">image_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(image_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> image_file:</span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(image_file.read()).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片目录地址</span></span><br><span class="line">image_path = <span class="string">&quot;./Imgs/&quot;</span></span><br><span class="line">imgs = os.listdir(image_path)</span><br><span class="line">base64_image = [encode_image(image_path + i) <span class="keyword">for</span> i <span class="keyword">in</span> imgs]</span><br><span class="line"></span><br><span class="line">client = OpenAI(</span><br><span class="line">        base_url=Your_BASE_URL,</span><br><span class="line">        api_key=Your_API_KEY)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(base64_image)):</span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">        model=<span class="string">&quot;gpt-4o&quot;</span>,</span><br><span class="line">        messages=[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">                <span class="string">&quot;content&quot;</span>: [</span><br><span class="line">                    &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>, <span class="string">&quot;text&quot;</span>: <span class="string">&quot;What&#x27;s in this image?&quot;</span>&#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;image_url&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;image_url&quot;</span>: &#123;<span class="string">&quot;url&quot;</span>: <span class="string">f&quot;data:image/jpg;base64,<span class="subst">&#123;base64_image[i]&#125;</span>&quot;</span>&#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./results.txt&quot;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(response.choices[<span class="number">0</span>].message.content.replace(<span class="string">&quot;*&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;#&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;===============================================================================\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>示例图片为：</p><p><img src="https://images.kimbleex.top/BlogIMG/Openai_image/sample.avif" alt="Sample"></p><p>输出为：</p><p><img src="https://images.kimbleex.top/BlogIMG/Openai_image/result.avif" alt="Result"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;调用opanai库中的OpenAI接口实现。本文讨论的是openai-1.x以上版本，我在写这篇文章时使用的时openai-1.37。&lt;/p&gt;
&lt;h2 id=&quot;1-准备工作&quot;&gt;&lt;a href=&quot;#1-准备工作&quot; class=&quot;headerlink&quot; title=&quot;1. 准备</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="Python" scheme="http://xujunliang666.com/tags/Python/"/>
    
    <category term="图像处理" scheme="http://xujunliang666.com/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    <category term="ChatGPT" scheme="http://xujunliang666.com/tags/ChatGPT/"/>
    
    <category term="AI" scheme="http://xujunliang666.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Python调用Openai接口实现chatGPT问答</title>
    <link href="http://xujunliang666.com/Programming/OpenAI-Chat/"/>
    <id>http://xujunliang666.com/Programming/OpenAI-Chat/</id>
    <published>2024-08-01T16:00:00.000Z</published>
    <updated>2024-08-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要是调用opanai库中的OpenAI接口实现。本文讨论的是openai-1.x以上版本，我在写这篇文章时使用的时openai-1.37。</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，你需要拥有一个openai平台的<code>api_key</code>，可以去淘宝或官网购买，这里推荐淘宝。</p><p>因为国内商家为了防止因代理不稳定，且确保购买的号不被封号，使用的是中转接口(卖家服务器api负责转发消息问答)。</p><h2 id="2-开始"><a href="#2-开始" class="headerlink" title="2. 开始"></a>2. 开始</h2><p>介绍两个函数接口。</p><blockquote><p><code>OpenAI(base_url, api_key)</code>: <code>chatgpt</code>应用<code>client</code>创建接口，我们只需要指定<code>base_url</code>和<code>api_key</code>两个参数即可。<code>base_url</code>表示的是我们上述提到的中专接口的地址，<code>api_key</code>代表的是我们购买的平台的通行证。<br><code>client.chat.completions.create(model, message)</code>: 创建对话，需要指定模型和问答小心内容。<code>model</code>仅可指定你的<code>api_key</code>允许的模型。</p></blockquote><h3 id="2-1-关于message参数"><a href="#2-1-关于message参数" class="headerlink" title="2.1 关于message参数"></a>2.1 关于<code>message</code>参数</h3><p><code>message</code>参数是一个列表，包含了三个字典变量。其格式如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = [</span><br><span class="line">    <span class="comment"># 系统定位配置，可不配置。 “你是一个Python专家”告诉GPT它要做的事情</span></span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a expert in Python&quot;</span>&#125;, </span><br><span class="line">    <span class="comment"># 用户提问内容配置，“帮助我以颜色为条件筛选数据”，也就是输入的问题</span></span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;help me filter the data by color&quot;</span>&#125;,</span><br><span class="line">    <span class="comment"># 助手配置，用来规范GPT回答的格式。“以这种格式回答： ‘筛选的数据：数据’”，可不配置</span></span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;Answer in this format : &#x27;data filtered : Your Filtered DATA&#x27; &quot;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="2-2-返回值"><a href="#2-2-返回值" class="headerlink" title="2.2 返回值"></a>2.2 返回值</h3><p>使用<code>completion.choices[0].message</code>接受返回值，<code>completion</code>即为在第2节开头提到的第二个函数的接收值。</p><p>它返回一个<code>content</code>对象，里面包含了回答内容等信息。可以转换为字典来获取返回值。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">completion = client.chat.completions.create(</span><br><span class="line">    model = <span class="string">&#x27;my model&#x27;</span>, </span><br><span class="line">    message = myMessage</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回</span></span><br><span class="line"><span class="built_in">print</span>(completion.choice[<span class="number">0</span>].message)</span><br></pre></td></tr></table></figure><h3 id="2-3-示例"><a href="#2-3-示例" class="headerlink" title="2.3 示例"></a>2.3 示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readFile</span>(<span class="params">filepath</span>):</span><br><span class="line">    file = pd.read_csv(filepath, encoding= <span class="string">&#x27;latin&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> title_file</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dataProcess</span>(<span class="params">data, answers_from_chatgpt = []</span>):</span><br><span class="line">    client = OpenAI(</span><br><span class="line">        base_url=<span class="string">&quot;your api&quot;</span>,</span><br><span class="line">        api_key=<span class="string">&#x27;your api key&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="built_in">len</span>(data)), ncols=<span class="number">80</span>, desc=<span class="string">&quot;chatGPT正在处理&quot;</span>):</span><br><span class="line">        completion = client.chat.completions.create(</span><br><span class="line">        model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>, <span class="comment"># 指定模型</span></span><br><span class="line">        messages=[</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a expert in Python&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;help me filter the data by color&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;Answer in this format : &#x27;data filtered : Your Filtered DATA&#x27; &quot;</span>&#125;</span><br><span class="line">        ])</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">dict</span>(completion.choices[<span class="number">0</span>].message))</span><br><span class="line">        answers_from_chatgpt.append(<span class="built_in">dict</span>(completion.choices[<span class="number">0</span>].message)[<span class="string">&#x27;content&#x27;</span>])</span><br><span class="line">        </span><br><span class="line">file path = <span class="string">&#x27;your filepath&#x27;</span></span><br><span class="line">answers_from_chatgpt = []</span><br><span class="line">file = readFile(theme)</span><br><span class="line">data = file[<span class="string">&#x27;data&#x27;</span>].tolist()</span><br><span class="line">dataProcess(data, answers_from_chatgpt)</span><br><span class="line"><span class="built_in">print</span>(answers_from_chatgpt)</span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要是调用opanai库中的OpenAI接口实现。本文讨论的是openai-1.x以上版本，我在写这篇文章时使用的时openai-1.37。&lt;/p&gt;
&lt;h2 id=&quot;1-准备工作&quot;&gt;&lt;a href=&quot;#1-准备工作&quot; class=&quot;headerlink&quot; title=&quot;1.</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="Python" scheme="http://xujunliang666.com/tags/Python/"/>
    
    <category term="ChatGPT" scheme="http://xujunliang666.com/tags/ChatGPT/"/>
    
    <category term="AI" scheme="http://xujunliang666.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Python Asyncio异步深入浅出</title>
    <link href="http://xujunliang666.com/Programming/Python-AsyncIO/"/>
    <id>http://xujunliang666.com/Programming/Python-AsyncIO/</id>
    <published>2024-07-24T16:00:00.000Z</published>
    <updated>2024-07-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Asyncio异步处理基本概念"><a href="#1-Asyncio异步处理基本概念" class="headerlink" title="1. Asyncio异步处理基本概念"></a>1. <code>Asyncio</code>异步处理基本概念</h2><blockquote><p><code>async</code>  ：写在函数开头，将指定函数转换为协程。</p><p><code>event_loop</code> ：事件循环，将协程注册到事件循环上协程才可以被调用。</p><p><code>coroutine</code> ：协程，类似于平常所说的函数，用于实现某些操作，<strong>只有被转为任务或者注册到事件循环上后才可以执行，否则返回一个协程对象。</strong></p><p><code>await</code> ：写在协程、任务前，用于挂起阻塞的异步调用 。</p><p><code>task</code> ：任务，进一步封装好的协程，可以直接被调用。</p><p><code>future</code> : 从功能来讲是跟task差不多，但是它是一个底层的等待对象，表示一个异步操作的最终结果，通常情况下不会在应用层级创建。</p></blockquote><h2 id="2-Asyncio异步处理基础上手"><a href="#2-Asyncio异步处理基础上手" class="headerlink" title="2. Asyncio异步处理基础上手"></a>2. <code>Asyncio</code>异步处理基础上手</h2><h3 id="2-1-协程和休眠"><a href="#2-1-协程和休眠" class="headerlink" title="2.1 协程和休眠"></a>2.1 协程和休眠</h3><p>根据第1小节有关协程的介绍，简单写一个协程，使用<code>async</code>关键字定义一个协程函数。再使用<code>await</code>关键字挂起一个阻塞。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 定义一个协程函数，其中使用await关键字进行休眠</span></span><br><span class="line"><span class="comment"># asyncio.sleep(seconds)函数表示休眠时间，参数为秒</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">startDreamPlace</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;started at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;World Hello!&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;ended at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># asyncio.run()函数表示调用协程，参数为协程函数</span></span><br><span class="line">asyncio.run(startDreamPlace())</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://images.kimbleex.top/BlogIMG/Asyncio/1.%E5%8D%8F%E7%A8%8B.avif" alt="1.协程"></p><p>可以看到执行代码共计2s，与预期一致。</p><p><strong>注意：协程不能直接调用！</strong>如果直接调用协程返回的只有一个协程对象，并抛出<code>RuntimeWarning</code>报错，无法执行内部逻辑。将上述案例进行修改如下。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">startDreamPlace</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;started at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;World Hello!&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;ended at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">startDreamPlace()</span><br></pre></td></tr></table></figure><p>运行结果为：</p><p><img src="https://images.kimbleex.top/BlogIMG/Asyncio/2.%E5%8D%8F%E7%A8%8B%E8%BF%90%E8%A1%8C.avif" alt="2.协程运行"></p><h3 id="2-2-任务"><a href="#2-2-任务" class="headerlink" title="2.2 任务"></a>2.2 任务</h3><p>引入<strong>任务</strong>这一概念来实现多个协程的并发运行。当我两个任务都需要一定的运行时间时，可以通过并发操作来调整不同任务对cpu的时间占用，使得整个流程更加高效。</p><p><code>task</code>对象的常用方法如下：</p><blockquote><p><strong><code>asyncio.create_task(coro,*,name,context,eager_start)</code></strong>  创建化<code>task</code>对象，其中<code>coro</code>为协程对象，<code>name</code>为任务的名称可自命名，默认为<code>None</code>，<code>context</code>为关联到该任务的<code>contextvars.Context</code>对象，默认为<code>None</code>，<code>eager_satrt</code>为是否主动默认为<code>False</code>。</p><p><strong><code>task.cancel()</code></strong>  取消任务对象，会抛出<code>asyncio.CancelledError</code>异常，可被捕获</p><p><strong><code>task.done()</code></strong>  如果任务已执行完成，返回True</p><p><strong><code>task.result()</code></strong>  返回任务的返回值</p><p><strong><code>task.exception()</code></strong>  返回任务所抛出的异常</p><p><strong><code>task.get_coro()</code></strong>  返回任务所包装的协程对象，如果任务主动完成，返回None，见<code>3.1 主动任务工厂</code></p><p><strong><code>task.get_name() &amp; task.set_name</code></strong>  获取任务名称 &amp; 设置任务名称</p></blockquote><p>写一个案例。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 定义两个协程</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coroutine1</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;coroutine1 finished&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coroutine2</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;coroutine2 finished&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    task1 =  asyncio.create_task(coroutine1())</span><br><span class="line">    task2 = asyncio.create_task(coroutine2())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;started at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> task1</span><br><span class="line">    <span class="keyword">await</span> task2</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;ended at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://images.kimbleex.top/BlogIMG/Asyncio/3.%E4%BB%BB%E5%8A%A1%E5%BC%82%E6%AD%A5.avif" alt="3.任务异步"></p><p>可以看到整体时间为5s而不是8s，这就实现了基本的异步功能。如果没有使用异步，直接逐步调用协程或者普通函数，上述代码的运行时长为8s。</p><h3 id="2-3-任务组TaskGroup"><a href="#2-3-任务组TaskGroup" class="headerlink" title="2.3 任务组TaskGroup()"></a>2.3 任务组<code>TaskGroup()</code></h3><p>在python 3.11版本中新增了<strong>任务组<code>asyncio.TaskGroup()</code></strong>，它可以将很多<code>tasks</code>加入到其中，并挨个等待执行。如果任务组中任何一个任务因为非人为取消的异常而失败，任务组中后续的所有任务都将会被终止。</p><p>任务组是一个异步上下文管理器，以<code>async with</code>开头。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="comment"># 定义两个携程</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coroutine1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;coroutine1 finished&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coroutine2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;coroutine2 finished&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="comment"># 使用任务组</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> asyncio.TaskGroup() <span class="keyword">as</span> tg:</span><br><span class="line">        task1 = tg.create_task(coroutine1())</span><br><span class="line">        task2 = tg.create_task(coroutine2())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;task1-result:<span class="subst">&#123;task1.result()&#125;</span>,task2-result:<span class="subst">&#123;task2.result()&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://images.kimbleex.top/BlogIMG/Asyncio/4.%E4%BB%BB%E5%8A%A1%E7%BB%84.avif" alt="4.任务组"></p><p>可以看到任务组中的任务都成功执行了。</p><h4 id="2-3-2-asyncio-gather"><a href="#2-3-2-asyncio-gather" class="headerlink" title="2.3.2 asyncio.gather()"></a>2.3.2 <code>asyncio.gather()</code></h4><p>其中，<code>async.TaskGroup().create_task()</code>等价于<code>asyncio.create_task()</code>，<code>.result()</code>函数可以获取任务的返回值参数。</p><h4 id="2-3-1-asyncio-gather"><a href="#2-3-1-asyncio-gather" class="headerlink" title="2.3.1 asyncio.gather()"></a>2.3.1 <code>asyncio.gather()</code></h4><p>与任务组进行对比的是<strong><code>asyncio.gather()</code></strong>函数，它的参数表达式如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># *aws表示可等待对象组</span></span><br><span class="line"><span class="comment"># 当return_exceptions值设置为False时，可等待对象组中后续的任务不会被取消</span></span><br><span class="line"><span class="comment"># 当return_exceptions值设置为True时，所有的报错都会与成功运行一样，聚合道结果列表中</span></span><br><span class="line">awaitable asuncio.gather(*aws, return_exceptions=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>与任务组方法最大的区别在于，当<code>.gather()</code>函数中任务组中的任务抛出报错时，剩下的任务不会被取消，会继续执行直至任务组中的任务全部被执行。</p><p>由此可见，3.11版本新增的任务组是对<code>.gather()</code>函数的一个安全性方向上的优化。</p><h4 id="2-3-2-asyncio-wait"><a href="#2-3-2-asyncio-wait" class="headerlink" title="2.3.2 asyncio.wait()"></a>2.3.2 <code>asyncio.wait()</code></h4><p>此外，对于多任务并发的函数还有<strong><code>asyncio.wait(aws, *, timeout, return_when)</code></strong>。其中<code>aws</code>为可等待不能为空，且可等待对象必须为<code>task</code>或者<code>future</code>对象，它返回一个集合<code>(done, pending)</code>,<code>done</code>表示已完成的可等待对象，<code>pending</code>表示待完成的可等待对象。常用的用法为：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">done, pending = <span class="keyword">await</span> asyncio.wait(aws)</span><br></pre></td></tr></table></figure><p><code>timeout</code>参数可以不指定，默认等待全部任务完成，若指定需要为整型或浮点型。</p><p><code>return_when</code>参数默认为<code>ALL_COMPLETED</code>表示等待所有可等待对象全部完成，所有参数介绍如下：</p><blockquote><p><code>asyncio.FIRST_COMPLETED</code>： 函数将在第一个可等待对象结束时取消并返回。</p><p><code>asyncio.FIRST_EXCEPTION</code> ：  该函数将在任何<code>future</code>对象抛出异常时返回，如果不存在<code>future</code>对象则与<code>ALL_COMPLETED</code>等价。</p><p><code>asyncio.ALL_COMPLETED</code>：    函数在所有可等待对象结束时返回。</p></blockquote><p>下面是一个示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coroutine1</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;coroutine1 finished&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coroutine2</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;coroutine2 finished&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    task1 = asyncio.create_task(coroutine1(),name=<span class="string">&#x27;coroutine1&#x27;</span>)</span><br><span class="line">    task2 = asyncio.create_task(coroutine2(),name=<span class="string">&#x27;coroutine2&#x27;</span>)</span><br><span class="line">    aws_ = [task1, task2]</span><br><span class="line">    done, pending = <span class="keyword">await</span> asyncio.wait(aws_, timeout=<span class="number">5</span>,return_when=asyncio.ALL_COMPLETED)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;done:<span class="subst">&#123;done&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;pending:<span class="subst">&#123;pending&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://images.kimbleex.top/BlogIMG/Asyncio/8.wait.avif" alt="8.wait"></p><p>可以看到已执行任务都在<code>done</code>中，未执行的都在<code>pending</code>中。</p><h3 id="2-4-设置任务超时"><a href="#2-4-设置任务超时" class="headerlink" title="2.4 设置任务超时"></a>2.4 设置任务超时</h3><h4 id="2-4-1-asyncio-timeout"><a href="#2-4-1-asyncio-timeout" class="headerlink" title="2.4.1 asyncio.timeout()"></a>2.4.1 <code>asyncio.timeout()</code></h4><p><code>asyncio.timeout(delay)</code>异步上下文管理器，delay为秒数，可为None。创建后可用<code>Timeout.reschedule()</code>重新安排计划。它可以将任务超时引发的<code>asyncio.CancelledError</code>转化为<code>TimeoutError</code>以便捕获。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coroutine1</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;coroutine1 finished&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> asyncio.timeout(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">await</span> coroutine1()</span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://images.kimbleex.top/BlogIMG/Asyncio/5.timeout.avif" alt="timeout"></p><p>可以看到抛出的错误是<code>Timeout</code>，说明成功转换了取消异常。</p><p><strong>注意：<code>asyncio.timeout()在内部将异常进行了转化，Timeout异常是可被捕获的，所以想要捕获异常只能在该上下文管理器外部捕获。</code></strong></p><p><code>asyncio.timeout_at(when)</code>与<code>asynvio.timeout(delay)</code>功能差不多，只是参数中<code>when</code>表示是停止等待的绝代时间，而<code>delay</code>表示停止的秒数。</p><h4 id="2-4-2-asyncio-Timeout"><a href="#2-4-2-asyncio-Timeout" class="headerlink" title="2.4.2 asyncio.Timeout()"></a>2.4.2 <code>asyncio.Timeout()</code></h4><p><code>asyncio.Timeout(when)</code>也为异步上下文管理器，<code>when</code>为一个指明上下文将要过期的绝对时间，由事件的循环时钟进行计时。同样也可以通过<code>reschedule</code>函数进行重新安排超时。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coroutine1</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;coroutine1 finished&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> asyncio.Timeout(<span class="literal">None</span>) <span class="keyword">as</span> cm: <span class="comment"># 未知时间时，设置为None</span></span><br><span class="line">            new_deadline = asyncio.get_running_loop().time() + <span class="number">2</span></span><br><span class="line">            cm.reschedule(new_deadline) <span class="comment"># 更新deadline</span></span><br><span class="line">            <span class="keyword">await</span> coroutine1()</span><br><span class="line">    <span class="keyword">except</span> TimeoutError: <span class="comment"># 捕获转换后的异常</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Timeout!&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> cm.expired(): <span class="comment"># 如果为True执行，说明超时</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Looks like we haven&#x27;t finished on time.&quot;</span>)</span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://images.kimbleex.top/BlogIMG/Asyncio/6.Timeout.avif" alt="6.Timeout"></p><h4 id="2-4-3-asyncio-wait-for-aw-timeout"><a href="#2-4-3-asyncio-wait-for-aw-timeout" class="headerlink" title="2.4.3 asyncio.wait_for(aw, timeout)"></a>2.4.3 <code>asyncio.wait_for(aw, timeout)</code></h4><p>与上述的超时方法功能一致，但是它不是异步上下文管理器。<code>aw</code>参数表示可等待对象，<code>timeout</code>表示等待的秒数，也可以为<code>None</code>。如果可等待对象超时，同样会抛出<code>Timeout</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coroutine1</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;coroutine1 finished&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.wait_for(coroutine1(), timeout=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> TimeoutError: <span class="comment"># 捕获转换后的异常</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Timeout!&#x27;</span>)</span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://images.kimbleex.top/BlogIMG/Asyncio/7.wait_for.avif" alt="7.wait_for"></p><h3 id="2-5-任务取消"><a href="#2-5-任务取消" class="headerlink" title="2.5 任务取消"></a>2.5 任务取消</h3><h4 id="2-1-cancel-、cancelled-和uncancel"><a href="#2-1-cancel-、cancelled-和uncancel" class="headerlink" title="2.1 cancel()、cancelled()和uncancel()"></a>2.1 <code>cancel()、cancelled()和uncancel()</code></h4><p>如果想要人为主动取消<code>task</code>任务，可以使用<code>cancel()</code>方法来实现，它会抛出一个<code>CancelledError</code>异常停止任务，这个异常是可以被捕获的。所以可以通过<code>try...except...finally</code>方法来抑制<code>cancel()</code>方法。所以该方法并不能保证绝对可以取消任务，只要人为干涉，它会失效。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coroutine1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;协程开始执行！&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cancel函数生效，已抛出异常！&#x27;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    task = asyncio.create_task(coroutine1())</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    task.cancel()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> task</span><br><span class="line">    <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;已取消任务!&#x27;</span>)</span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://images.kimbleex.top/BlogIMG/Asyncio/9.cancel.avif" alt="9.cancel"></p><p>使用<code>cancelled()</code>函数来判断<code>task</code>对象是否被取消。如果被取消则返回<code>True</code>。</p><p>使用<code>uncancel()</code>方法来屏蔽<code>asyncio.CancelledError</code>,以达到撤销取消操作的目的，但是这个方法不应该被经常使用，因为<code>asyncio</code>很多内部函数都是通过<code>asyncio.CancelledError</code>来抛出的。</p><h4 id="2-2-shield"><a href="#2-2-shield" class="headerlink" title="2.2 shield()"></a>2.2 <code>shield()</code></h4><p>如果像屏蔽取消操作而不屏蔽<code>asyncio.CancelledError</code>异常，可以通过使用<code>shield(aw)</code>方法来实现。<code>aw</code>参数表示一个任务对象。如果传入的<code>aw</code>对象为协程对象，则它会作为任务来进行调度。即：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">task = asynciocreate_task(coroutine())</span><br><span class="line">result = <span class="keyword">await</span> shield(task)</span><br><span class="line"></span><br><span class="line"><span class="comment">#上述代码等价于</span></span><br><span class="line">result = <span class="keyword">await</span> coroutine()</span><br></pre></td></tr></table></figure><p>其实很容易看出来区别，第一个部分中协程被转为的任务，如果原来的协程被取消，任务不会受到影响，但是在第二部分直接调度协程，如果写成被取消，则会触发异常。</p><h2 id="3-Asyncio高阶"><a href="#3-Asyncio高阶" class="headerlink" title="3. Asyncio高阶"></a>3. Asyncio高阶</h2><h3 id="3-1-主动任务工厂eager-task-factory"><a href="#3-1-主动任务工厂eager-task-factory" class="headerlink" title="3.1 主动任务工厂eager_task_factory()"></a>3.1 主动任务工厂<code>eager_task_factory()</code></h3><p><strong>该内容在<code>python-3.12.</code>中新增.（2024/07/26时为最新版本）</strong></p><p>当使用这个工厂函数时，协程将在<code>task</code>对象构造期间同步地开始执行。 任务仅会在它们阻塞时被加入事件循环上的计划任务。 这可以达成性能提升因为对同步完成的协程来说可以避免循环调度的开销。</p><p>此特性会带来好处的一个常见例子是应用了缓存或记忆功能以便在可能的情况避免实际 I/O 的协程。</p><p>写一个示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 创建4个协程</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coroutine1</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;coroutine1 finished&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coroutine2</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;coroutine2 finished&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coroutine3</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;coroutine3 finished&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coroutine4</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;coroutine4 finished&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    task1 = asyncio.create_task(coroutine1(), name=<span class="string">&#x27;task1&#x27;</span>, )</span><br><span class="line">    task2 = asyncio.create_task(coroutine2(), name=<span class="string">&#x27;task2&#x27;</span>, )</span><br><span class="line">    task3 = asyncio.create_task(coroutine3(), name=<span class="string">&#x27;task3&#x27;</span>, )</span><br><span class="line">    task4 = asyncio.create_task(coroutine4(), name=<span class="string">&#x27;task4&#x27;</span>, )</span><br><span class="line">    tasks = [task1, task2, task3, task4]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start at &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&#x27;%X&#x27;</span>)))</span><br><span class="line">    asyncio.create_eager_task_factory(tasks) <span class="comment"># 主动任务工厂</span></span><br><span class="line">    <span class="keyword">await</span> task1</span><br><span class="line">    <span class="keyword">await</span> task2</span><br><span class="line">    <span class="keyword">await</span> task3</span><br><span class="line">    <span class="keyword">await</span> task4</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;finished at &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&#x27;%X&#x27;</span>)))</span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://images.kimbleex.top/BlogIMG/Asyncio/10.%E4%B8%BB%E5%8A%A8%E4%BB%BB%E5%8A%A1%E5%B7%A5%E5%8E%82.avif" alt="10.主动任务工厂"></p><h3 id="3-2-内省方法"><a href="#3-2-内省方法" class="headerlink" title="3.2 内省方法"></a>3.2 内省方法</h3><p>常用的内省方法就几个，如下：</p><blockquote><p><code>asyncio.current_task(loop=None)</code>  返回当前运行的<code>task</code>对象，没有就返回<code>None</code></p><p><code>asyncio.all_tasks(loop=None)</code>  返回事件循环所运行的未完成的<code>task</code>对象的合集</p><p><code>asyncio.iscoroutine(obj)</code>  如果传入的<code>obj</code>是一个协程则返回<code>True</code></p></blockquote><h3 id="3-3-线程中调度"><a href="#3-3-线程中调度" class="headerlink" title="3.3 线程中调度"></a>3.3 线程中调度</h3><p>当事件循环发生阻塞等问题时，通常可以用线程调度来调节阻塞。</p><h4 id="3-3-1-引入线程"><a href="#3-3-1-引入线程" class="headerlink" title="3.3.1 引入线程"></a>3.3.1 引入线程</h4><p><code>to_thread(func, /, *args, **kwargs)</code>方法可以调用一个额外的线程来执行传入的<strong>函数</strong>，以避免阻塞发生。下面写一个实例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cost_time_func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;start func at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;finish func at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;start main at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(</span><br><span class="line">        asyncio.to_thread(cost_time_func),</span><br><span class="line">        asyncio.sleep(<span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;finish main at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://images.kimbleex.top/BlogIMG/Asyncio/11.%E7%BA%BF%E7%A8%8B.avif" alt="线程"></p><p>可以看到如果不使用线程，需要2 s，但是程序的执行只需要1 s，成功避免了事件循环的阻塞。</p><h4 id="3-3-2-跨线程调度"><a href="#3-3-2-跨线程调度" class="headerlink" title="3.3.2 跨线程调度"></a>3.3.2 跨线程调度</h4><p><code>asyncio.run_coroutine_threadsafe(coro, loop)</code>函数用于跨线程调度，即线程安全。</p><p>函数返回一个<code>future</code>对象，等待其他线程的结果。需要在事件循环外部调用该函数。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创一个协程</span></span><br><span class="line">coro = asyncio.sleep(<span class="number">1</span>, result=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交一个携程到另一个事件循环loop中</span></span><br><span class="line">future = asyncio.run_coroutine_threadsafe(coro, loop)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Asyncio异步处理基本概念&quot;&gt;&lt;a href=&quot;#1-Asyncio异步处理基本概念&quot; class=&quot;headerlink&quot; title=&quot;1. Asyncio异步处理基本概念&quot;&gt;&lt;/a&gt;1. &lt;code&gt;Asyncio&lt;/code&gt;异步处理基本概念&lt;/h</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="Python" scheme="http://xujunliang666.com/tags/Python/"/>
    
    <category term="Async" scheme="http://xujunliang666.com/tags/Async/"/>
    
    <category term="多线程" scheme="http://xujunliang666.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="多进程" scheme="http://xujunliang666.com/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>CycleGAN-V2音色转换算法复现</title>
    <link href="http://xujunliang666.com/Programming/CycleGANV2/"/>
    <id>http://xujunliang666.com/Programming/CycleGANV2/</id>
    <published>2024-05-11T16:00:00.000Z</published>
    <updated>2024-05-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GAN"><a href="#GAN" class="headerlink" title="GAN"></a><code>GAN</code></h2><p>先说一下<code>GAN</code>，对抗生成模型核心即生成器<code>Generator</code>和判别器<code>Discriminator</code>，由生成器不停的生成数据，判别器给出反馈，以此往复知道判别器无法判断生成器生成的数据真伪。</p><p>这样的过程相当于是从一张白纸做成了一张假钞，“警察”(<code>Discriminator</code>)最后也无法判断出这是真币还是假币。实现了从一种特征到另一种特征的转换。</p><h2 id="CycleGAN-VC"><a href="#CycleGAN-VC" class="headerlink" title="CycleGAN-VC"></a><code>CycleGAN-VC</code></h2><p><code>CycleGAN VC2</code>是一种用于语音转换的模型，基于 <code>CycleGAN</code>和<code>GAN</code> 的原理进行改进和应用。其主要特点和原理包括：</p><ol><li><p><strong>语音转换</strong>：<code>CycleGAN VC2</code> 主要用于将一种语音特征转换为另一种语音特征，如改变说话人的声音特征，同时保持内容不变。</p></li><li><p><strong>无配对数据训练</strong>：与图像转换中的 <code>CycleGAN</code> 类似，<code>CycleGAN VC2</code> 不需要成对的语音数据进行训练。它可以在没有直接对应的语音对的情况下学习不同语音域之间的映射。</p></li><li><p><strong>循环一致性损失</strong>：为了确保转换后的语音保留原始语音的内容，<code>CycleGAN VC2</code> 使用循环一致性损失。这意味着，如果将语音从域 <code>A</code> 转换到域 <code>B</code>，然后再转换回域<code>A</code>，最终得到的语音应该与原始语音相似。</p></li><li><p><strong>生成器和判别器</strong>：</p><ul><li><strong>生成器</strong>：用于将语音特征从一种风格转换到另一种风格。</li><li><strong>判别器</strong>：用于区分生成的语音特征和真实的语音特征。</li></ul></li><li><p><strong>损失函数</strong>：</p><ul><li><strong>对抗性损失</strong>：用于训练生成器，使生成的语音特征能够骗过判别器。</li><li><strong>循环一致性损失</strong>：用于确保语音在转换来回后保持一致。</li></ul></li><li><p><strong>应用</strong>：<code>CycleGAN VC2</code>被用于语音风格转换、语音克隆、语音增强等领域。</p></li></ol><p>通过这些机制，<code>CycleGAN VC2</code> 可以在不需要大量配对数据的情况下，实现高质量的语音转换。</p><h2 id="ResNet残差思想"><a href="#ResNet残差思想" class="headerlink" title="ResNet残差思想"></a><code>ResNet</code>残差思想</h2><p><code>ResNet(Residual Network)</code>是一种深度神经网络架构，其核心思想是“残差学习”。这种思想解决了随着网络深度增加而出现的梯度消失和梯度爆炸问题。</p><h3 id="残差块（Residual-Block）"><a href="#残差块（Residual-Block）" class="headerlink" title="残差块（Residual Block）"></a>残差块（Residual Block）</h3><ol><li><strong>基本结构</strong>：<ul><li>残差块由两层或三层卷积网络组成，通常包括 <code>Batch Normalization</code> 和 <code>ReLU</code> 激活函数。</li></ul></li><li><strong>恒等映射</strong>：<ul><li>残差块的输出不是直接输出 <code>F(x)</code>，而是 <code>F(x) + x</code>，其中<code>x</code> 是输入。</li><li>这种结构称为“恒等映射”（<code>identity mapping</code>），即通过跳跃连接（<code>shortcut connection</code>）将输入直接加到输出上。</li></ul></li></ol><h3 id="残差思想的优势"><a href="#残差思想的优势" class="headerlink" title="残差思想的优势"></a>残差思想的优势</h3><ol><li><p><strong>解决退化问题</strong>：</p><ul><li>随着网络层数增加，深层网络比浅层网络表现更差的问题称为“退化问题”。</li><li>残差网络通过学习残差而不是直接学习原始映射，使得优化更容易。</li></ul></li><li><p><strong>梯度流动更顺畅</strong>：</p><ul><li>恒等映射使得梯度可以直接通过跳跃连接反向传播，缓解梯度消失和梯度爆炸问题。</li></ul></li><li><p><strong>易于优化</strong>：</p><ul><li>由于学习的是残差，网络可以更容易地接近恒等映射，从而更快地收敛。</li></ul></li></ol><h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><ul><li><strong>深度网络设计</strong>：<code>ResNet</code> 可以支持非常深的网络（如 50 层、101 层、152 层），在图像分类、目标检测等任务中表现优异。</li><li><strong>模块化设计</strong>：残差块可以堆叠，形成不同深度的 <code>ResNet</code>网络。</li></ul><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><h3 id="生成器Generator"><a href="#生成器Generator" class="headerlink" title="生成器Generator"></a>生成器<code>Generator</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">downSample_Generator</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, out_channels, kernel_size, stride, padding</span>):</span><br><span class="line">        <span class="built_in">super</span>(downSample_Generator, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.convLayer = nn.Sequential(nn.Conv2d(in_channels=in_channels,</span><br><span class="line">                                                 out_channels=out_channels,</span><br><span class="line">                                                 kernel_size=kernel_size,</span><br><span class="line">                                                 stride=stride,</span><br><span class="line">                                                 padding=padding),</span><br><span class="line">                                       nn.InstanceNorm2d(num_features=out_channels,</span><br><span class="line">                                                         affine=<span class="literal">True</span>))</span><br><span class="line">        <span class="variable language_">self</span>.convLayer_gates = nn.Sequential(nn.Conv2d(in_channels=in_channels,</span><br><span class="line">                                                       out_channels=out_channels,</span><br><span class="line">                                                       kernel_size=kernel_size,</span><br><span class="line">                                                       stride=stride,</span><br><span class="line">                                                       padding=padding),</span><br><span class="line">                                             nn.InstanceNorm2d(num_features=out_channels,</span><br><span class="line">                                                               affine=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        a = <span class="variable language_">self</span>.convLayer(<span class="built_in">input</span>)</span><br><span class="line">        b = <span class="variable language_">self</span>.convLayer_gates(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.convLayer(<span class="built_in">input</span>) * torch.sigmoid(<span class="variable language_">self</span>.convLayer_gates(<span class="built_in">input</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">upSample_Generator</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, out_channels, kernel_size, stride, padding</span>):</span><br><span class="line">        <span class="built_in">super</span>(upSample_Generator, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.convLayer = nn.Sequential(nn.Conv2d(in_channels=in_channels,</span><br><span class="line">                                                 out_channels=out_channels,</span><br><span class="line">                                                 kernel_size=kernel_size,</span><br><span class="line">                                                 stride=stride,</span><br><span class="line">                                                 padding=padding),</span><br><span class="line">                                       <span class="comment">#PixelShuffle(upscale_factor=2),</span></span><br><span class="line">                                       up_2Dsample(upscale_factor=<span class="number">2</span>),</span><br><span class="line">                                       nn.InstanceNorm2d(num_features=out_channels,</span><br><span class="line">                                                         affine=<span class="literal">True</span>))</span><br><span class="line">        <span class="variable language_">self</span>.convLayer_gates = nn.Sequential(nn.Conv2d(in_channels=in_channels,</span><br><span class="line">                                                       out_channels=out_channels,</span><br><span class="line">                                                       kernel_size=kernel_size,</span><br><span class="line">                                                       stride=stride,</span><br><span class="line">                                                       padding=padding),</span><br><span class="line">                                             <span class="comment">#PixelShuffle(upscale_factor=2),</span></span><br><span class="line">                                             up_2Dsample(upscale_factor=<span class="number">2</span>),</span><br><span class="line">                                             nn.InstanceNorm2d(num_features=out_channels,</span><br><span class="line">                                                               affine=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):        </span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.convLayer(<span class="built_in">input</span>) * torch.sigmoid(<span class="variable language_">self</span>.convLayer_gates(<span class="built_in">input</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Generator</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Generator, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(in_channels=<span class="number">1</span>,</span><br><span class="line">                               out_channels=<span class="number">128</span>,</span><br><span class="line">                               kernel_size=[<span class="number">5</span>,<span class="number">15</span>],</span><br><span class="line">                               stride=<span class="number">1</span>,</span><br><span class="line">                               padding=[<span class="number">2</span>,<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.conv1_gates = nn.Conv2d(in_channels=<span class="number">1</span>,</span><br><span class="line">                               out_channels=<span class="number">128</span>,</span><br><span class="line">                               kernel_size=[<span class="number">5</span>,<span class="number">15</span>],</span><br><span class="line">                               stride=<span class="number">1</span>,</span><br><span class="line">                               padding=[<span class="number">2</span>,<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Downsample Layer</span></span><br><span class="line">        <span class="variable language_">self</span>.downSample1 = downSample_Generator(in_channels=<span class="number">128</span>,</span><br><span class="line">                                                out_channels=<span class="number">256</span>,</span><br><span class="line">                                                kernel_size=<span class="number">5</span>,</span><br><span class="line">                                                stride=<span class="number">2</span>,</span><br><span class="line">                                                padding=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.downSample2 = downSample_Generator(in_channels=<span class="number">256</span>,</span><br><span class="line">                                                out_channels=<span class="number">512</span>,</span><br><span class="line">                                                kernel_size=<span class="number">5</span>,</span><br><span class="line">                                                stride=<span class="number">2</span>,</span><br><span class="line">                                                padding=<span class="number">2</span>)</span><br><span class="line">        <span class="comment">#reshape</span></span><br><span class="line">        <span class="variable language_">self</span>.conv2 = nn.Conv1d(in_channels=<span class="number">3072</span>,</span><br><span class="line">                               out_channels=<span class="number">512</span>,</span><br><span class="line">                               kernel_size=<span class="number">1</span>,</span><br><span class="line">                               stride=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Residual Blocks</span></span><br><span class="line">        <span class="variable language_">self</span>.residualLayer1 = ResidualLayer(in_channels=<span class="number">512</span>,</span><br><span class="line">                                            out_channels=<span class="number">1024</span>,</span><br><span class="line">                                            kernel_size=<span class="number">3</span>,</span><br><span class="line">                                            stride=<span class="number">1</span>,</span><br><span class="line">                                            padding=<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.residualLayer2 = ResidualLayer(in_channels=<span class="number">512</span>,</span><br><span class="line">                                            out_channels=<span class="number">1024</span>,</span><br><span class="line">                                            kernel_size=<span class="number">3</span>,</span><br><span class="line">                                            stride=<span class="number">1</span>,</span><br><span class="line">                                            padding=<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.residualLayer3 = ResidualLayer(in_channels=<span class="number">512</span>,</span><br><span class="line">                                            out_channels=<span class="number">1024</span>,</span><br><span class="line">                                            kernel_size=<span class="number">3</span>,</span><br><span class="line">                                            stride=<span class="number">1</span>,</span><br><span class="line">                                            padding=<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.residualLayer4 = ResidualLayer(in_channels=<span class="number">512</span>,</span><br><span class="line">                                            out_channels=<span class="number">1024</span>,</span><br><span class="line">                                            kernel_size=<span class="number">3</span>,</span><br><span class="line">                                            stride=<span class="number">1</span>,</span><br><span class="line">                                            padding=<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.residualLayer5 = ResidualLayer(in_channels=<span class="number">512</span>,</span><br><span class="line">                                            out_channels=<span class="number">1024</span>,</span><br><span class="line">                                            kernel_size=<span class="number">3</span>,</span><br><span class="line">                                            stride=<span class="number">1</span>,</span><br><span class="line">                                            padding=<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.residualLayer6 = ResidualLayer(in_channels=<span class="number">512</span>,</span><br><span class="line">                                            out_channels=<span class="number">1024</span>,</span><br><span class="line">                                            kernel_size=<span class="number">3</span>,</span><br><span class="line">                                            stride=<span class="number">1</span>,</span><br><span class="line">                                            padding=<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#reshape</span></span><br><span class="line">        <span class="variable language_">self</span>.conv3 = nn.Conv1d(in_channels=<span class="number">512</span>,</span><br><span class="line">                               out_channels=<span class="number">3072</span>,</span><br><span class="line">                               kernel_size=<span class="number">1</span>,</span><br><span class="line">                               stride=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># UpSample Layer</span></span><br><span class="line">        <span class="variable language_">self</span>.upSample1 = upSample_Generator(in_channels=<span class="number">512</span>,</span><br><span class="line">                                            out_channels=<span class="number">1024</span>,</span><br><span class="line">                                            kernel_size=<span class="number">5</span>,</span><br><span class="line">                                            stride=<span class="number">1</span>,</span><br><span class="line">                                            padding=<span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.upSample2 = upSample_Generator(in_channels=<span class="number">1024</span>,</span><br><span class="line">                                            out_channels=<span class="number">512</span>,</span><br><span class="line">                                            kernel_size=<span class="number">5</span>,</span><br><span class="line">                                            stride=<span class="number">1</span>,</span><br><span class="line">                                            padding=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.lastConvLayer = nn.Conv2d(in_channels=<span class="number">512</span>,</span><br><span class="line">                                       out_channels=<span class="number">1</span>,</span><br><span class="line">                                       kernel_size=[<span class="number">5</span>,<span class="number">15</span>],</span><br><span class="line">                                       stride=<span class="number">1</span>,</span><br><span class="line">                                       padding=[<span class="number">2</span>,<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="comment"># GLU</span></span><br><span class="line">        <span class="built_in">input</span> = <span class="built_in">input</span>.unsqueeze(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        conv1 = <span class="variable language_">self</span>.conv1(<span class="built_in">input</span>) * torch.sigmoid(<span class="variable language_">self</span>.conv1_gates(<span class="built_in">input</span>))</span><br><span class="line"></span><br><span class="line">        downsample1 = <span class="variable language_">self</span>.downSample1(conv1)</span><br><span class="line">        </span><br><span class="line">        downsample2 = <span class="variable language_">self</span>.downSample2(downsample1)</span><br><span class="line">        </span><br><span class="line">        downsample3 = downsample2.view([downsample2.shape[<span class="number">0</span>],-<span class="number">1</span>,downsample2.shape[<span class="number">3</span>]])</span><br><span class="line">        </span><br><span class="line">        downsample3 = <span class="variable language_">self</span>.conv2(downsample3)</span><br><span class="line">        </span><br><span class="line">        residual_layer_1 = <span class="variable language_">self</span>.residualLayer1(downsample3)</span><br><span class="line">        </span><br><span class="line">        residual_layer_2 = <span class="variable language_">self</span>.residualLayer2(residual_layer_1)</span><br><span class="line">        </span><br><span class="line">        residual_layer_3 = <span class="variable language_">self</span>.residualLayer3(residual_layer_2)</span><br><span class="line">        </span><br><span class="line">        residual_layer_4 = <span class="variable language_">self</span>.residualLayer4(residual_layer_3)</span><br><span class="line">        </span><br><span class="line">        residual_layer_5 = <span class="variable language_">self</span>.residualLayer5(residual_layer_4)</span><br><span class="line">        </span><br><span class="line">        residual_layer_6 = <span class="variable language_">self</span>.residualLayer6(residual_layer_5)</span><br><span class="line">        </span><br><span class="line">        residual_layer_6 = <span class="variable language_">self</span>.conv3(residual_layer_6)</span><br><span class="line">        </span><br><span class="line">        residual_layer_6 = residual_layer_6.view([downsample2.shape[<span class="number">0</span>],downsample2.shape[<span class="number">1</span>],downsample2.shape[<span class="number">2</span>],downsample2.shape[<span class="number">3</span>]])</span><br><span class="line">        </span><br><span class="line">        upSample_layer_1 = <span class="variable language_">self</span>.upSample1(residual_layer_6)</span><br><span class="line">        </span><br><span class="line">        upSample_layer_2 = <span class="variable language_">self</span>.upSample2(upSample_layer_1)</span><br><span class="line">        </span><br><span class="line">        output = <span class="variable language_">self</span>.lastConvLayer(upSample_layer_2)</span><br><span class="line">        </span><br><span class="line">        output = output.view([output.shape[<span class="number">0</span>],-<span class="number">1</span>,output.shape[<span class="number">3</span>]])</span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><h3 id="判别器Discriminator"><a href="#判别器Discriminator" class="headerlink" title="判别器Discriminator"></a>判别器<code>Discriminator</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DownSample_Discriminator</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, out_channels, kernel_size, stride, padding</span>):</span><br><span class="line">        <span class="built_in">super</span>(DownSample_Discriminator, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.convLayer = nn.Sequential(nn.Conv2d(in_channels=in_channels,</span><br><span class="line">                                                 out_channels=out_channels,</span><br><span class="line">                                                 kernel_size=kernel_size,</span><br><span class="line">                                                 stride=stride,</span><br><span class="line">                                                 padding=padding),</span><br><span class="line">                                       nn.InstanceNorm2d(num_features=out_channels,</span><br><span class="line">                                                         affine=<span class="literal">True</span>))</span><br><span class="line">        <span class="variable language_">self</span>.convLayerGates = nn.Sequential(nn.Conv2d(in_channels=in_channels,</span><br><span class="line">                                                      out_channels=out_channels,</span><br><span class="line">                                                      kernel_size=kernel_size,</span><br><span class="line">                                                      stride=stride,</span><br><span class="line">                                                      padding=padding),</span><br><span class="line">                                            nn.InstanceNorm2d(num_features=out_channels,</span><br><span class="line">                                                              affine=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="comment"># GLU</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.convLayer(<span class="built_in">input</span>) * torch.sigmoid(<span class="variable language_">self</span>.convLayerGates(<span class="built_in">input</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Discriminator</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Discriminator, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.convLayer1 = nn.Conv2d(in_channels=<span class="number">1</span>,</span><br><span class="line">                                    out_channels=<span class="number">128</span>,</span><br><span class="line">                                    kernel_size=[<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                    stride=[<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">        <span class="variable language_">self</span>.convLayer1_gates = nn.Conv2d(in_channels=<span class="number">1</span>,</span><br><span class="line">                                          out_channels=<span class="number">128</span>,</span><br><span class="line">                                          kernel_size=[<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                          stride=[<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Note: Kernel Size have been modified in the PyTorch implementation</span></span><br><span class="line">        <span class="comment"># compared to the actual paper, as to retain dimensionality. Unlike,</span></span><br><span class="line">        <span class="comment"># TensorFlow, PyTorch doesn&#x27;t have padding=&#x27;same&#x27;, hence, kernel sizes</span></span><br><span class="line">        <span class="comment"># were altered to retain the dimensionality after each layer</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># DownSample Layer</span></span><br><span class="line">        <span class="variable language_">self</span>.downSample1 = DownSample_Discriminator(in_channels=<span class="number">128</span>,</span><br><span class="line">                                                    out_channels=<span class="number">256</span>,</span><br><span class="line">                                                    kernel_size=[<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                                    stride=[<span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">                                                    padding=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.downSample2 = DownSample_Discriminator(in_channels=<span class="number">256</span>,</span><br><span class="line">                                                    out_channels=<span class="number">512</span>,</span><br><span class="line">                                                    kernel_size=[<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                                    stride=[<span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">                                                    padding=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.downSample3 = DownSample_Discriminator(in_channels=<span class="number">512</span>,</span><br><span class="line">                                                    out_channels=<span class="number">1024</span>,</span><br><span class="line">                                                    kernel_size=[<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                                    stride=[<span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">                                                    padding=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.downSample4 = DownSample_Discriminator(in_channels=<span class="number">1024</span>,</span><br><span class="line">                                                    out_channels=<span class="number">1024</span>,</span><br><span class="line">                                                    kernel_size=[<span class="number">1</span>, <span class="number">5</span>],</span><br><span class="line">                                                    stride=[<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                                                    padding=[<span class="number">0</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Fully Connected Layer</span></span><br><span class="line">        <span class="variable language_">self</span>.fc = nn.Linear(in_features=<span class="number">1024</span>,</span><br><span class="line">                            out_features=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># output Layer</span></span><br><span class="line">        <span class="variable language_">self</span>.output_layer = nn.Conv2d(in_channels=<span class="number">1024</span>,</span><br><span class="line">                                      out_channels=<span class="number">1</span>,</span><br><span class="line">                                      kernel_size=[<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">                                      stride=[<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                                      padding=[<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="comment"># input has shape [batch_size, num_features, time]</span></span><br><span class="line">        <span class="comment"># discriminator requires shape [batchSize, 1, num_features, time</span></span><br><span class="line">        <span class="built_in">input</span> = <span class="built_in">input</span>.unsqueeze(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># GLU</span></span><br><span class="line">        pad_input = nn.ZeroPad2d((<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">        layer1 = <span class="variable language_">self</span>.convLayer1(</span><br><span class="line">            pad_input(<span class="built_in">input</span>)) * torch.sigmoid(<span class="variable language_">self</span>.convLayer1_gates(pad_input(<span class="built_in">input</span>)))</span><br><span class="line"></span><br><span class="line">        pad_input = nn.ZeroPad2d((<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">        downSample1 = <span class="variable language_">self</span>.downSample1(pad_input(layer1))</span><br><span class="line"></span><br><span class="line">        pad_input = nn.ZeroPad2d((<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">        downSample2 = <span class="variable language_">self</span>.downSample2(pad_input(downSample1))</span><br><span class="line"></span><br><span class="line">        pad_input = nn.ZeroPad2d((<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">        downSample3 = <span class="variable language_">self</span>.downSample3(pad_input(downSample2))</span><br><span class="line"></span><br><span class="line">        downSample4 = <span class="variable language_">self</span>.downSample4(downSample3)</span><br><span class="line">        downSample4 = <span class="variable language_">self</span>.output_layer(downSample4)</span><br><span class="line"></span><br><span class="line">        downSample4 = downSample4.contiguous().permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>).contiguous()</span><br><span class="line">        <span class="comment"># fc = torch.sigmoid(self.fc(downSample3))</span></span><br><span class="line">        <span class="comment"># Taking off sigmoid layer to avoid vanishing gradient problem</span></span><br><span class="line">        <span class="comment">#fc = self.fc(downSample4)</span></span><br><span class="line">        fc = torch.sigmoid(downSample4)</span><br><span class="line">        <span class="keyword">return</span> fc</span><br></pre></td></tr></table></figure><h3 id="残差单元Res-Block"><a href="#残差单元Res-Block" class="headerlink" title="残差单元Res-Block"></a>残差单元<code>Res-Block</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ResidualLayer</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, out_channels, kernel_size, stride, padding</span>):</span><br><span class="line">        <span class="built_in">super</span>(ResidualLayer, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.conv1d_layer = nn.Sequential(nn.Conv1d(in_channels=in_channels,</span><br><span class="line">                                                    out_channels=out_channels,</span><br><span class="line">                                                    kernel_size=kernel_size,</span><br><span class="line">                                                    stride=<span class="number">1</span>,</span><br><span class="line">                                                    padding=padding),</span><br><span class="line">                                          nn.InstanceNorm1d(num_features=out_channels,</span><br><span class="line">                                                            affine=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.conv_layer_gates = nn.Sequential(nn.Conv1d(in_channels=in_channels,</span><br><span class="line">                                                        out_channels=out_channels,</span><br><span class="line">                                                        kernel_size=kernel_size,</span><br><span class="line">                                                        stride=<span class="number">1</span>,</span><br><span class="line">                                                        padding=padding),</span><br><span class="line">                                              nn.InstanceNorm1d(num_features=out_channels,</span><br><span class="line">                                                                affine=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.conv1d_out_layer = nn.Sequential(nn.Conv1d(in_channels=out_channels,</span><br><span class="line">                                                        out_channels=in_channels,</span><br><span class="line">                                                        kernel_size=kernel_size,</span><br><span class="line">                                                        stride=<span class="number">1</span>,</span><br><span class="line">                                                        padding=padding),</span><br><span class="line">                                              nn.InstanceNorm1d(num_features=in_channels,</span><br><span class="line">                                                                affine=<span class="literal">True</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="输入输出测试"><a href="#输入输出测试" class="headerlink" title="输入输出测试"></a>输入输出测试</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span> = torch.randn(<span class="number">10</span>, <span class="number">24</span>, <span class="number">1100</span>)  <span class="comment"># (N, C_in, Width) For Conv1d</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(np.random.randn(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">input</span> = np.random.randn(<span class="number">15</span>, <span class="number">24</span>, <span class="number">128</span>)</span><br><span class="line"><span class="built_in">input</span> = torch.from_numpy(<span class="built_in">input</span>).<span class="built_in">float</span>()</span><br><span class="line"><span class="comment"># print(input)</span></span><br><span class="line">generator = Generator()</span><br><span class="line"></span><br><span class="line">output = generator(<span class="built_in">input</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Output shape Generator&quot;</span>, output.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Discriminator Dimensionality Testing</span></span><br><span class="line"><span class="comment"># input = torch.randn(32, 1, 24, 128)  # (N, C_in, height, width) For Conv2d</span></span><br><span class="line">discriminator = Discriminator()</span><br><span class="line"><span class="comment">#pdb.set_trace()</span></span><br><span class="line">output = discriminator(output)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Output shape Discriminator&quot;</span>, output.shape)</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GLU</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(GLU, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="comment"># Custom Implementation because the Voice Conversion Cycle GAN</span></span><br><span class="line">        <span class="comment"># paper assumes GLU won&#x27;t reduce the dimension of tensor by 2.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">input</span> * torch.sigmoid(<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">up_2Dsample</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, upscale_factor=<span class="number">2</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(up_2Dsample, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.scale_factor = upscale_factor</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        h = <span class="built_in">input</span>.shape[<span class="number">2</span>]</span><br><span class="line">        w = <span class="built_in">input</span>.shape[<span class="number">3</span>]</span><br><span class="line">        new_size = [h * <span class="variable language_">self</span>.scale_factor, w * <span class="variable language_">self</span>.scale_factor]</span><br><span class="line">        <span class="keyword">return</span> F.interpolate(<span class="built_in">input</span>,new_size)</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PixelShuffle</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, upscale_factor=<span class="number">2</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(PixelShuffle, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="comment"># Custom Implementation because PyTorch PixelShuffle requires,</span></span><br><span class="line">        <span class="comment"># 4D input. Whereas, in this case we have have 3D array</span></span><br><span class="line">        <span class="variable language_">self</span>.upscale_factor = upscale_factor</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        n = <span class="built_in">input</span>.shape[<span class="number">0</span>]</span><br><span class="line">        c_out = <span class="built_in">input</span>.shape[<span class="number">1</span>] // <span class="variable language_">self</span>.upscale_factor</span><br><span class="line">        w_new = <span class="built_in">input</span>.shape[<span class="number">2</span>] * <span class="variable language_">self</span>.upscale_factor</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">input</span>.view(n, c_out, w_new)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResidualLayer</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, out_channels, kernel_size, stride, padding</span>):</span><br><span class="line">        <span class="built_in">super</span>(ResidualLayer, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.residualLayer = nn.Sequential(nn.Conv1d(in_channels=in_channels,</span></span><br><span class="line">        <span class="comment">#                                              out_channels=out_channels,</span></span><br><span class="line">        <span class="comment">#                                              kernel_size=kernel_size,</span></span><br><span class="line">        <span class="comment">#                                              stride=1,</span></span><br><span class="line">        <span class="comment">#                                              padding=padding),</span></span><br><span class="line">        <span class="comment">#                                    nn.InstanceNorm1d(</span></span><br><span class="line">        <span class="comment">#                                        num_features=out_channels,</span></span><br><span class="line">        <span class="comment">#                                        affine=True),</span></span><br><span class="line">        <span class="comment">#                                    GLU(),</span></span><br><span class="line">        <span class="comment">#                                    nn.Conv1d(in_channels=out_channels,</span></span><br><span class="line">        <span class="comment">#                                              out_channels=in_channels,</span></span><br><span class="line">        <span class="comment">#                                              kernel_size=kernel_size,</span></span><br><span class="line">        <span class="comment">#                                              stride=1,</span></span><br><span class="line">        <span class="comment">#                                              padding=padding),</span></span><br><span class="line">        <span class="comment">#                                    nn.InstanceNorm1d(</span></span><br><span class="line">        <span class="comment">#                                        num_features=in_channels,</span></span><br><span class="line">        <span class="comment">#                                        affine=True)</span></span><br><span class="line">        <span class="comment">#                                    )</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.conv1d_layer = nn.Sequential(nn.Conv1d(in_channels=in_channels,</span><br><span class="line">                                                    out_channels=out_channels,</span><br><span class="line">                                                    kernel_size=kernel_size,</span><br><span class="line">                                                    stride=<span class="number">1</span>,</span><br><span class="line">                                                    padding=padding),</span><br><span class="line">                                          nn.InstanceNorm1d(num_features=out_channels,</span><br><span class="line">                                                            affine=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.conv_layer_gates = nn.Sequential(nn.Conv1d(in_channels=in_channels,</span><br><span class="line">                                                        out_channels=out_channels,</span><br><span class="line">                                                        kernel_size=kernel_size,</span><br><span class="line">                                                        stride=<span class="number">1</span>,</span><br><span class="line">                                                        padding=padding),</span><br><span class="line">                                              nn.InstanceNorm1d(num_features=out_channels,</span><br><span class="line">                                                                affine=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.conv1d_out_layer = nn.Sequential(nn.Conv1d(in_channels=out_channels,</span><br><span class="line">                                                        out_channels=in_channels,</span><br><span class="line">                                                        kernel_size=kernel_size,</span><br><span class="line">                                                        stride=<span class="number">1</span>,</span><br><span class="line">                                                        padding=padding),</span><br><span class="line">                                              nn.InstanceNorm1d(num_features=in_channels,</span><br><span class="line">                                                                affine=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        h1_norm = <span class="variable language_">self</span>.conv1d_layer(<span class="built_in">input</span>)</span><br><span class="line">        h1_gates_norm = <span class="variable language_">self</span>.conv_layer_gates(<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># GLU</span></span><br><span class="line">        h1_glu = h1_norm * torch.sigmoid(h1_gates_norm)</span><br><span class="line"></span><br><span class="line">        h2_norm = <span class="variable language_">self</span>.conv1d_out_layer(h1_glu)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">input</span> + h2_norm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">downSample_Generator</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, out_channels, kernel_size, stride, padding</span>):</span><br><span class="line">        <span class="built_in">super</span>(downSample_Generator, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.convLayer = nn.Sequential(nn.Conv2d(in_channels=in_channels,</span><br><span class="line">                                                 out_channels=out_channels,</span><br><span class="line">                                                 kernel_size=kernel_size,</span><br><span class="line">                                                 stride=stride,</span><br><span class="line">                                                 padding=padding),</span><br><span class="line">                                       nn.InstanceNorm2d(num_features=out_channels,</span><br><span class="line">                                                         affine=<span class="literal">True</span>))</span><br><span class="line">        <span class="variable language_">self</span>.convLayer_gates = nn.Sequential(nn.Conv2d(in_channels=in_channels,</span><br><span class="line">                                                       out_channels=out_channels,</span><br><span class="line">                                                       kernel_size=kernel_size,</span><br><span class="line">                                                       stride=stride,</span><br><span class="line">                                                       padding=padding),</span><br><span class="line">                                             nn.InstanceNorm2d(num_features=out_channels,</span><br><span class="line">                                                               affine=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        a = <span class="variable language_">self</span>.convLayer(<span class="built_in">input</span>)</span><br><span class="line">        b = <span class="variable language_">self</span>.convLayer_gates(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.convLayer(<span class="built_in">input</span>) * torch.sigmoid(<span class="variable language_">self</span>.convLayer_gates(<span class="built_in">input</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">upSample_Generator</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, out_channels, kernel_size, stride, padding</span>):</span><br><span class="line">        <span class="built_in">super</span>(upSample_Generator, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.convLayer = nn.Sequential(nn.Conv2d(in_channels=in_channels,</span><br><span class="line">                                                 out_channels=out_channels,</span><br><span class="line">                                                 kernel_size=kernel_size,</span><br><span class="line">                                                 stride=stride,</span><br><span class="line">                                                 padding=padding),</span><br><span class="line">                                       <span class="comment">#PixelShuffle(upscale_factor=2),</span></span><br><span class="line">                                       up_2Dsample(upscale_factor=<span class="number">2</span>),</span><br><span class="line">                                       nn.InstanceNorm2d(num_features=out_channels,</span><br><span class="line">                                                         affine=<span class="literal">True</span>))</span><br><span class="line">        <span class="variable language_">self</span>.convLayer_gates = nn.Sequential(nn.Conv2d(in_channels=in_channels,</span><br><span class="line">                                                       out_channels=out_channels,</span><br><span class="line">                                                       kernel_size=kernel_size,</span><br><span class="line">                                                       stride=stride,</span><br><span class="line">                                                       padding=padding),</span><br><span class="line">                                             <span class="comment">#PixelShuffle(upscale_factor=2),</span></span><br><span class="line">                                             up_2Dsample(upscale_factor=<span class="number">2</span>),</span><br><span class="line">                                             nn.InstanceNorm2d(num_features=out_channels,</span><br><span class="line">                                                               affine=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):        </span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.convLayer(<span class="built_in">input</span>) * torch.sigmoid(<span class="variable language_">self</span>.convLayer_gates(<span class="built_in">input</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Generator</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Generator, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(in_channels=<span class="number">1</span>,</span><br><span class="line">                               out_channels=<span class="number">128</span>,</span><br><span class="line">                               kernel_size=[<span class="number">5</span>,<span class="number">15</span>],</span><br><span class="line">                               stride=<span class="number">1</span>,</span><br><span class="line">                               padding=[<span class="number">2</span>,<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.conv1_gates = nn.Conv2d(in_channels=<span class="number">1</span>,</span><br><span class="line">                               out_channels=<span class="number">128</span>,</span><br><span class="line">                               kernel_size=[<span class="number">5</span>,<span class="number">15</span>],</span><br><span class="line">                               stride=<span class="number">1</span>,</span><br><span class="line">                               padding=[<span class="number">2</span>,<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Downsample Layer</span></span><br><span class="line">        <span class="variable language_">self</span>.downSample1 = downSample_Generator(in_channels=<span class="number">128</span>,</span><br><span class="line">                                                out_channels=<span class="number">256</span>,</span><br><span class="line">                                                kernel_size=<span class="number">5</span>,</span><br><span class="line">                                                stride=<span class="number">2</span>,</span><br><span class="line">                                                padding=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.downSample2 = downSample_Generator(in_channels=<span class="number">256</span>,</span><br><span class="line">                                                out_channels=<span class="number">512</span>,</span><br><span class="line">                                                kernel_size=<span class="number">5</span>,</span><br><span class="line">                                                stride=<span class="number">2</span>,</span><br><span class="line">                                                padding=<span class="number">2</span>)</span><br><span class="line">        <span class="comment">#reshape</span></span><br><span class="line">        <span class="variable language_">self</span>.conv2 = nn.Conv1d(in_channels=<span class="number">3072</span>,</span><br><span class="line">                               out_channels=<span class="number">512</span>,</span><br><span class="line">                               kernel_size=<span class="number">1</span>,</span><br><span class="line">                               stride=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Residual Blocks</span></span><br><span class="line">        <span class="variable language_">self</span>.residualLayer1 = ResidualLayer(in_channels=<span class="number">512</span>,</span><br><span class="line">                                            out_channels=<span class="number">1024</span>,</span><br><span class="line">                                            kernel_size=<span class="number">3</span>,</span><br><span class="line">                                            stride=<span class="number">1</span>,</span><br><span class="line">                                            padding=<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.residualLayer2 = ResidualLayer(in_channels=<span class="number">512</span>,</span><br><span class="line">                                            out_channels=<span class="number">1024</span>,</span><br><span class="line">                                            kernel_size=<span class="number">3</span>,</span><br><span class="line">                                            stride=<span class="number">1</span>,</span><br><span class="line">                                            padding=<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.residualLayer3 = ResidualLayer(in_channels=<span class="number">512</span>,</span><br><span class="line">                                            out_channels=<span class="number">1024</span>,</span><br><span class="line">                                            kernel_size=<span class="number">3</span>,</span><br><span class="line">                                            stride=<span class="number">1</span>,</span><br><span class="line">                                            padding=<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.residualLayer4 = ResidualLayer(in_channels=<span class="number">512</span>,</span><br><span class="line">                                            out_channels=<span class="number">1024</span>,</span><br><span class="line">                                            kernel_size=<span class="number">3</span>,</span><br><span class="line">                                            stride=<span class="number">1</span>,</span><br><span class="line">                                            padding=<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.residualLayer5 = ResidualLayer(in_channels=<span class="number">512</span>,</span><br><span class="line">                                            out_channels=<span class="number">1024</span>,</span><br><span class="line">                                            kernel_size=<span class="number">3</span>,</span><br><span class="line">                                            stride=<span class="number">1</span>,</span><br><span class="line">                                            padding=<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.residualLayer6 = ResidualLayer(in_channels=<span class="number">512</span>,</span><br><span class="line">                                            out_channels=<span class="number">1024</span>,</span><br><span class="line">                                            kernel_size=<span class="number">3</span>,</span><br><span class="line">                                            stride=<span class="number">1</span>,</span><br><span class="line">                                            padding=<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#reshape</span></span><br><span class="line">        <span class="variable language_">self</span>.conv3 = nn.Conv1d(in_channels=<span class="number">512</span>,</span><br><span class="line">                               out_channels=<span class="number">3072</span>,</span><br><span class="line">                               kernel_size=<span class="number">1</span>,</span><br><span class="line">                               stride=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># UpSample Layer</span></span><br><span class="line">        <span class="variable language_">self</span>.upSample1 = upSample_Generator(in_channels=<span class="number">512</span>,</span><br><span class="line">                                            out_channels=<span class="number">1024</span>,</span><br><span class="line">                                            kernel_size=<span class="number">5</span>,</span><br><span class="line">                                            stride=<span class="number">1</span>,</span><br><span class="line">                                            padding=<span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.upSample2 = upSample_Generator(in_channels=<span class="number">1024</span>,</span><br><span class="line">                                            out_channels=<span class="number">512</span>,</span><br><span class="line">                                            kernel_size=<span class="number">5</span>,</span><br><span class="line">                                            stride=<span class="number">1</span>,</span><br><span class="line">                                            padding=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.lastConvLayer = nn.Conv2d(in_channels=<span class="number">512</span>,</span><br><span class="line">                                       out_channels=<span class="number">1</span>,</span><br><span class="line">                                       kernel_size=[<span class="number">5</span>,<span class="number">15</span>],</span><br><span class="line">                                       stride=<span class="number">1</span>,</span><br><span class="line">                                       padding=[<span class="number">2</span>,<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="comment"># GLU</span></span><br><span class="line">        <span class="built_in">input</span> = <span class="built_in">input</span>.unsqueeze(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        conv1 = <span class="variable language_">self</span>.conv1(<span class="built_in">input</span>) * torch.sigmoid(<span class="variable language_">self</span>.conv1_gates(<span class="built_in">input</span>))</span><br><span class="line"></span><br><span class="line">        downsample1 = <span class="variable language_">self</span>.downSample1(conv1)</span><br><span class="line">        </span><br><span class="line">        downsample2 = <span class="variable language_">self</span>.downSample2(downsample1)</span><br><span class="line">        </span><br><span class="line">        downsample3 = downsample2.view([downsample2.shape[<span class="number">0</span>],-<span class="number">1</span>,downsample2.shape[<span class="number">3</span>]])</span><br><span class="line">        </span><br><span class="line">        downsample3 = <span class="variable language_">self</span>.conv2(downsample3)</span><br><span class="line">        </span><br><span class="line">        residual_layer_1 = <span class="variable language_">self</span>.residualLayer1(downsample3)</span><br><span class="line">        </span><br><span class="line">        residual_layer_2 = <span class="variable language_">self</span>.residualLayer2(residual_layer_1)</span><br><span class="line">        </span><br><span class="line">        residual_layer_3 = <span class="variable language_">self</span>.residualLayer3(residual_layer_2)</span><br><span class="line">        </span><br><span class="line">        residual_layer_4 = <span class="variable language_">self</span>.residualLayer4(residual_layer_3)</span><br><span class="line">        </span><br><span class="line">        residual_layer_5 = <span class="variable language_">self</span>.residualLayer5(residual_layer_4)</span><br><span class="line">        </span><br><span class="line">        residual_layer_6 = <span class="variable language_">self</span>.residualLayer6(residual_layer_5)</span><br><span class="line">        </span><br><span class="line">        residual_layer_6 = <span class="variable language_">self</span>.conv3(residual_layer_6)</span><br><span class="line">        </span><br><span class="line">        residual_layer_6 = residual_layer_6.view([downsample2.shape[<span class="number">0</span>],downsample2.shape[<span class="number">1</span>],downsample2.shape[<span class="number">2</span>],downsample2.shape[<span class="number">3</span>]])</span><br><span class="line">        </span><br><span class="line">        upSample_layer_1 = <span class="variable language_">self</span>.upSample1(residual_layer_6)</span><br><span class="line">        </span><br><span class="line">        upSample_layer_2 = <span class="variable language_">self</span>.upSample2(upSample_layer_1)</span><br><span class="line">        </span><br><span class="line">        output = <span class="variable language_">self</span>.lastConvLayer(upSample_layer_2)</span><br><span class="line">        </span><br><span class="line">        output = output.view([output.shape[<span class="number">0</span>],-<span class="number">1</span>,output.shape[<span class="number">3</span>]])</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DownSample_Discriminator</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, out_channels, kernel_size, stride, padding</span>):</span><br><span class="line">        <span class="built_in">super</span>(DownSample_Discriminator, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.convLayer = nn.Sequential(nn.Conv2d(in_channels=in_channels,</span><br><span class="line">                                                 out_channels=out_channels,</span><br><span class="line">                                                 kernel_size=kernel_size,</span><br><span class="line">                                                 stride=stride,</span><br><span class="line">                                                 padding=padding),</span><br><span class="line">                                       nn.InstanceNorm2d(num_features=out_channels,</span><br><span class="line">                                                         affine=<span class="literal">True</span>))</span><br><span class="line">        <span class="variable language_">self</span>.convLayerGates = nn.Sequential(nn.Conv2d(in_channels=in_channels,</span><br><span class="line">                                                      out_channels=out_channels,</span><br><span class="line">                                                      kernel_size=kernel_size,</span><br><span class="line">                                                      stride=stride,</span><br><span class="line">                                                      padding=padding),</span><br><span class="line">                                            nn.InstanceNorm2d(num_features=out_channels,</span><br><span class="line">                                                              affine=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="comment"># GLU</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.convLayer(<span class="built_in">input</span>) * torch.sigmoid(<span class="variable language_">self</span>.convLayerGates(<span class="built_in">input</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Discriminator</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Discriminator, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.convLayer1 = nn.Conv2d(in_channels=<span class="number">1</span>,</span><br><span class="line">                                    out_channels=<span class="number">128</span>,</span><br><span class="line">                                    kernel_size=[<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                    stride=[<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">        <span class="variable language_">self</span>.convLayer1_gates = nn.Conv2d(in_channels=<span class="number">1</span>,</span><br><span class="line">                                          out_channels=<span class="number">128</span>,</span><br><span class="line">                                          kernel_size=[<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                          stride=[<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Note: Kernel Size have been modified in the PyTorch implementation</span></span><br><span class="line">        <span class="comment"># compared to the actual paper, as to retain dimensionality. Unlike,</span></span><br><span class="line">        <span class="comment"># TensorFlow, PyTorch doesn&#x27;t have padding=&#x27;same&#x27;, hence, kernel sizes</span></span><br><span class="line">        <span class="comment"># were altered to retain the dimensionality after each layer</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># DownSample Layer</span></span><br><span class="line">        <span class="variable language_">self</span>.downSample1 = DownSample_Discriminator(in_channels=<span class="number">128</span>,</span><br><span class="line">                                                    out_channels=<span class="number">256</span>,</span><br><span class="line">                                                    kernel_size=[<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                                    stride=[<span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">                                                    padding=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.downSample2 = DownSample_Discriminator(in_channels=<span class="number">256</span>,</span><br><span class="line">                                                    out_channels=<span class="number">512</span>,</span><br><span class="line">                                                    kernel_size=[<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                                    stride=[<span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">                                                    padding=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.downSample3 = DownSample_Discriminator(in_channels=<span class="number">512</span>,</span><br><span class="line">                                                    out_channels=<span class="number">1024</span>,</span><br><span class="line">                                                    kernel_size=[<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">                                                    stride=[<span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">                                                    padding=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.downSample4 = DownSample_Discriminator(in_channels=<span class="number">1024</span>,</span><br><span class="line">                                                    out_channels=<span class="number">1024</span>,</span><br><span class="line">                                                    kernel_size=[<span class="number">1</span>, <span class="number">5</span>],</span><br><span class="line">                                                    stride=[<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                                                    padding=[<span class="number">0</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Fully Connected Layer</span></span><br><span class="line">        <span class="variable language_">self</span>.fc = nn.Linear(in_features=<span class="number">1024</span>,</span><br><span class="line">                            out_features=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># output Layer</span></span><br><span class="line">        <span class="variable language_">self</span>.output_layer = nn.Conv2d(in_channels=<span class="number">1024</span>,</span><br><span class="line">                                      out_channels=<span class="number">1</span>,</span><br><span class="line">                                      kernel_size=[<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">                                      stride=[<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                                      padding=[<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def downSample(self, in_channels, out_channels, kernel_size, stride, padding):</span></span><br><span class="line">    <span class="comment">#     convLayer = nn.Sequential(nn.Conv2d(in_channels=in_channels,</span></span><br><span class="line">    <span class="comment">#                                         out_channels=out_channels,</span></span><br><span class="line">    <span class="comment">#                                         kernel_size=kernel_size,</span></span><br><span class="line">    <span class="comment">#                                         stride=stride,</span></span><br><span class="line">    <span class="comment">#                                         padding=padding),</span></span><br><span class="line">    <span class="comment">#                               nn.InstanceNorm2d(num_features=out_channels,</span></span><br><span class="line">    <span class="comment">#                                                 affine=True),</span></span><br><span class="line">    <span class="comment">#                               GLU())</span></span><br><span class="line">    <span class="comment">#     return convLayer</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="comment"># input has shape [batch_size, num_features, time]</span></span><br><span class="line">        <span class="comment"># discriminator requires shape [batchSize, 1, num_features, time]</span></span><br><span class="line">        <span class="built_in">input</span> = <span class="built_in">input</span>.unsqueeze(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># GLU</span></span><br><span class="line">        pad_input = nn.ZeroPad2d((<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">        layer1 = <span class="variable language_">self</span>.convLayer1(</span><br><span class="line">            pad_input(<span class="built_in">input</span>)) * torch.sigmoid(<span class="variable language_">self</span>.convLayer1_gates(pad_input(<span class="built_in">input</span>)))</span><br><span class="line"></span><br><span class="line">        pad_input = nn.ZeroPad2d((<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">        downSample1 = <span class="variable language_">self</span>.downSample1(pad_input(layer1))</span><br><span class="line"></span><br><span class="line">        pad_input = nn.ZeroPad2d((<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">        downSample2 = <span class="variable language_">self</span>.downSample2(pad_input(downSample1))</span><br><span class="line"></span><br><span class="line">        pad_input = nn.ZeroPad2d((<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">        downSample3 = <span class="variable language_">self</span>.downSample3(pad_input(downSample2))</span><br><span class="line"></span><br><span class="line">        downSample4 = <span class="variable language_">self</span>.downSample4(downSample3)</span><br><span class="line">        downSample4 = <span class="variable language_">self</span>.output_layer(downSample4)</span><br><span class="line"></span><br><span class="line">        downSample4 = downSample4.contiguous().permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>).contiguous()</span><br><span class="line">        <span class="comment"># fc = torch.sigmoid(self.fc(downSample3))</span></span><br><span class="line">        <span class="comment"># Taking off sigmoid layer to avoid vanishing gradient problem</span></span><br><span class="line">        <span class="comment">#fc = self.fc(downSample4)</span></span><br><span class="line">        fc = torch.sigmoid(downSample4)</span><br><span class="line">        <span class="keyword">return</span> fc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Generator Dimensionality Testing</span></span><br><span class="line">    <span class="built_in">input</span> = torch.randn(<span class="number">10</span>, <span class="number">24</span>, <span class="number">1100</span>)  <span class="comment"># (N, C_in, Width) For Conv1d</span></span><br><span class="line">    np.random.seed(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(np.random.randn(<span class="number">10</span>))</span><br><span class="line">    <span class="built_in">input</span> = np.random.randn(<span class="number">15</span>, <span class="number">24</span>, <span class="number">128</span>)</span><br><span class="line">    <span class="built_in">input</span> = torch.from_numpy(<span class="built_in">input</span>).<span class="built_in">float</span>()</span><br><span class="line">    <span class="comment"># print(input)</span></span><br><span class="line">    generator = Generator()</span><br><span class="line">    </span><br><span class="line">    output = generator(<span class="built_in">input</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Output shape Generator&quot;</span>, output.shape)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Discriminator Dimensionality Testing</span></span><br><span class="line">    <span class="comment"># input = torch.randn(32, 1, 24, 128)  # (N, C_in, height, width) For Conv2d</span></span><br><span class="line">    discriminator = Discriminator()</span><br><span class="line">    <span class="comment">#pdb.set_trace()</span></span><br><span class="line">    output = discriminator(output)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Output shape Discriminator&quot;</span>, output.shape)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;GAN&quot;&gt;&lt;a href=&quot;#GAN&quot; class=&quot;headerlink&quot; title=&quot;GAN&quot;&gt;&lt;/a&gt;&lt;code&gt;GAN&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;先说一下&lt;code&gt;GAN&lt;/code&gt;，对抗生成模型核心即生成器&lt;code&gt;Generator&lt;/cod</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="Python" scheme="http://xujunliang666.com/tags/Python/"/>
    
    <category term="AI" scheme="http://xujunliang666.com/tags/AI/"/>
    
    <category term="Pytorch" scheme="http://xujunliang666.com/tags/Pytorch/"/>
    
    <category term="深度学习" scheme="http://xujunliang666.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python使用Schedule模块实现定时任务</title>
    <link href="http://xujunliang666.com/Programming/Python-Schedule/"/>
    <id>http://xujunliang666.com/Programming/Python-Schedule/</id>
    <published>2023-12-04T16:00:00.000Z</published>
    <updated>2023-12-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候写爬虫的时候会想要每隔固定的时间执行一次，所以就想到了设计一个定时任务，于是找到了Python的Schedule模块，记录一下关于Schedule模块的一些知识点。</p><p><code>schedule</code> 模块是一个用于在 Python 中实现简单任务调度的库。它允许你以简洁的语法安排任务。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先，安装 <code>schedule</code> 模块：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install schedule</span><br></pre></td></tr></table></figure><h2 id="基本用法及案例"><a href="#基本用法及案例" class="headerlink" title="基本用法及案例"></a>基本用法及案例</h2><h3 id="一个整体的示例"><a href="#一个整体的示例" class="headerlink" title="一个整体的示例"></a>一个整体的示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">job</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I&#x27;m working...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每三秒钟执行一次上面的任务job</span></span><br><span class="line">schedule.every(<span class="number">3</span>).seconds.do(job)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    schedule.run_pending()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>其中<code>schedule.run_pending()</code> 来运行所有准备好的任务。通常将其放在一个循环中，以持续检查和执行任务。</p><h3 id="其他的一些定时任务写法"><a href="#其他的一些定时任务写法" class="headerlink" title="其他的一些定时任务写法"></a>其他的一些定时任务写法</h3><p><code>schedule</code> 模块使用一种类似自然语言的方式来安排任务。以下是一些常用的方法: </p><ul><li>每隔 3 sec/min/hour/day/week执行一次</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">schedule.every(<span class="number">3</span>).seconds.do(job)</span><br><span class="line">schedule.every(<span class="number">3</span>).minutes.do(job)</span><br><span class="line">schedule.every(<span class="number">3</span>).hours.do(job)</span><br><span class="line">schedule.every(<span class="number">3</span>).days.do(job)</span><br><span class="line">schedule.every(<span class="number">3</span>).weeks.do(job)</span><br></pre></td></tr></table></figure><ul><li>每分钟的第23秒执行一次任务</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">schedule.every().minute.at(<span class="string">&quot;:23&quot;</span>).do(job)</span><br></pre></td></tr></table></figure><ul><li>每小时的第40分钟执行一次任务</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">schedule.every().hour.at(<span class="string">&quot;:40&quot;</span>).do(job)</span><br></pre></td></tr></table></figure><ul><li>每隔5个小时，在第五个小时的20分钟30秒执行一次任务</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果 02:00 执行, 那么将会在 06:20:30 执行</span></span><br><span class="line">schedule.every(<span class="number">5</span>).hours.at(<span class="string">&quot;20:30&quot;</span>).do(job)</span><br></pre></td></tr></table></figure><ul><li>在每天的特定时间执行任务<code>HH:MM:SS</code></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">schedule.every().day.at(<span class="string">&quot;10:30:42&quot;</span>).do(job)</span><br></pre></td></tr></table></figure><h3 id="还可以使用装饰器来修饰"><a href="#还可以使用装饰器来修饰" class="headerlink" title="还可以使用装饰器来修饰"></a>还可以使用装饰器来修饰</h3><p>使用<code>@repect</code>装饰器装饰任务函数后，也可以做到同样的效果</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> schedule <span class="keyword">import</span> every, repeat, run_pending</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="meta">@repeat(<span class="params">every(<span class="params"><span class="number">10</span></span>).minutes</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">job</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am a scheduled job&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    run_pending()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="带有参数的任务"><a href="#带有参数的任务" class="headerlink" title="带有参数的任务"></a>带有参数的任务</h3><p>如果任务中需要传入参数，可以在<code>do()</code>中传入参数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello&#x27;</span>, name)</span><br><span class="line">schedule.every(<span class="number">2</span>).seconds.do(greet, name=<span class="string">&#x27;Alice&#x27;</span>)</span><br><span class="line">schedule.every(<span class="number">4</span>).seconds.do(greet, name=<span class="string">&#x27;Bob&#x27;</span>)</span><br></pre></td></tr></table></figure><p>装饰器版本传参代码:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> schedule <span class="keyword">import</span> every, repeat</span><br><span class="line"></span><br><span class="line"><span class="meta">@repeat(<span class="params">every(<span class="params"></span>).second, <span class="string">&quot;World&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@repeat(<span class="params">every(<span class="params"></span>).day, <span class="string">&quot;Mars&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">planet</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>, planet)</span><br></pre></td></tr></table></figure><h3 id="标记任务并按标签获取"><a href="#标记任务并按标签获取" class="headerlink" title="标记任务并按标签获取"></a>标记任务并按标签获取</h3><p>使用<code>tag()</code>可以给任务上标签。<br>使用<code>get_jobs()</code>方法获取任务所有任务，如果传入标签名则按标签获取任务。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">job1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Job 1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">job2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Job 2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上标签,可以无限标签</span></span><br><span class="line">schedule.every().day.do(job1).tag(<span class="string">&quot;daily&quot;</span>, <span class="string">&quot;haha&quot;</span>)</span><br><span class="line">schedule.every().hour.do(job2).tag(<span class="string">&quot;hourly&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有带有 &quot;daily&quot; 标签的任务</span></span><br><span class="line">daily_jobs = schedule.get_jobs(<span class="string">&quot;daily&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="取消任务"><a href="#取消任务" class="headerlink" title="取消任务"></a>取消任务</h3><p>使用<code>cancel()</code>方法可以取消任务。<br>使用<code>clear()</code>方法清除所有任务，如果传入标签名即可按标签取消</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">job1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I&#x27;m working...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">job2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I&#x27;m working too...&quot;</span>)</span><br><span class="line"></span><br><span class="line">job1 = schedule.every(<span class="number">3</span>).seconds.do(job1).tag(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line">job2 = schedule.every(<span class="number">5</span>).seconds.do(job2).tag(<span class="string">&quot;no&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消任务</span></span><br><span class="line">schedule.cancel_job1(job) <span class="comment"># 取消job1</span></span><br><span class="line">schedule.clear(<span class="string">&quot;ok&quot;</span>) <span class="comment"># 按标签取消</span></span><br><span class="line">schedule.clear() <span class="comment"># 清除所有任务</span></span><br></pre></td></tr></table></figure><h3 id="任务终止判定"><a href="#任务终止判定" class="headerlink" title="任务终止判定"></a>任务终止判定</h3><p>使用<code>until()</code>来设置任务的终止时间。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2030年1月1日18:33后不再执行</span></span><br><span class="line">schedule.every(<span class="number">1</span>).hours.until(<span class="string">&quot;2030-01-01 18:33&quot;</span>).do(job)</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><code>Schedule</code>模块的定时任务并不是真正的定时任务，而是通过循环来模拟定时任务。因此，如果任务执行时间过长，可能会导致任务堆积，影响后续任务的执行。因此，在编写任务时，需要注意任务的执行时间，避免任务堆积。</p><p>简单来说，就是<code>Schedule</code>模块不计算任务的具体执行时长，如果一个任务需要6min执行完成，但是你的调度方法时每5min执行一次，那么程序会产生等待，直到任务执行完成，才会继续执行下一个任务。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有时候写爬虫的时候会想要每隔固定的时间执行一次，所以就想到了设计一个定时任务，于是找到了Python的Schedule模块，记录一下关于Schedule模块的一些知识点。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;schedule&lt;/code&gt; 模块是一个用于在 Python 中实现简单任</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="Python" scheme="http://xujunliang666.com/tags/Python/"/>
    
    <category term="定时调度" scheme="http://xujunliang666.com/tags/%E5%AE%9A%E6%97%B6%E8%B0%83%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>关于localhost和127.0.0.1的区别</title>
    <link href="http://xujunliang666.com/Programming/LocalHost-IP/"/>
    <id>http://xujunliang666.com/Programming/LocalHost-IP/</id>
    <published>2023-11-24T16:00:00.000Z</published>
    <updated>2023-11-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近捣鼓本地部署一些大模型应用，突然发现本地网页可以通过<code>localhost:port</code>访问，但是却不能通过<code>127.0.0.1:port</code>访问，所以去详细琢磨了一下这两者的区别。</p><p>奇怪的是我以前做的一些全栈项目，当初全凭心情来使用<code>localhost</code>或是<code>127.0.0.1</code>来访问也没啥问题，所以也不清楚问题的具体原因。</p><h2 id="LocalHost"><a href="#LocalHost" class="headerlink" title="LocalHost"></a><code>LocalHost</code></h2><p><code>localhost</code>是一个主机名称，它是本地服务器名称，在访问<code>localhost</code>时，它指向本地电脑主机的网络地址，系统会自动把它解析成<code>IP</code>地址，通常即为本地回环地址<code>127.0.0.1</code>。但是，它可以被配置为任何<code>IP</code>地址，包括<code>IPv4</code>和<code>IPv6</code>。</p><h2 id="127-0-0-1"><a href="#127-0-0-1" class="headerlink" title="127.0.0.1"></a><code>127.0.0.1</code></h2><p><code>127.0.0.1</code>是一个<code>IPv4</code>地址，它是一个特殊的<code>IP</code>地址，用于指向本地主机。在计算机网络中，<code>127.0.0.1</code>被称为回环地址（Loopback Address），它是一个特殊的IP地址，用于测试网络连接和本地服务。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><div class="note success no-icon flat"><p><mark class="hl-label green">localhost</mark> </p><ul><li>是一个主机名。</li><li>通常解析为<code>127.0.0.1</code>，但解析依赖于系统的<code>hosts</code>文件配置。</li></ul></div><div class="note warning no-icon flat"><p><mark class="hl-label orange">127.0.0.1</mark> </p><ul><li>是一个具体的 IPv4 地址。</li><li>直接指向本地环回接口。</li><li>它就是一个<code>Ipv4</code>地址，无需解析，但是不支持<code>Ipv6</code>。</li></ul></div><h2 id="问题重述"><a href="#问题重述" class="headerlink" title="问题重述"></a>问题重述</h2><p>文章开头提到的两者不能同时访问的问题，究其原因，很可能是<code>localhost</code>访问时，系统带的本机当前用户的权限去访问，而用<code>ip</code>的时候，等于本机是通过网络再去访问本机，可能涉及到网络用户的权限。</p><p>总结来说，<code>localhost</code>是一个主机名，通常解析为<code>127.0.0.1</code>，但它可以配置为其他地址。而<code>127.0.0.1</code>是一个固定的<code>IPv4</code>地址，直接用于环回通信。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近捣鼓本地部署一些大模型应用，突然发现本地网页可以通过&lt;code&gt;localhost:port&lt;/code&gt;访问，但是却不能通过&lt;code&gt;127.0.0.1:port&lt;/code&gt;访问，所以去详细琢磨了一下这两者的区别。&lt;/p&gt;
&lt;p&gt;奇怪的是我以前做的一些全栈项目，当</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="前端" scheme="http://xujunliang666.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="计算机网络" scheme="http://xujunliang666.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>群智能优化算法详解与实现</title>
    <link href="http://xujunliang666.com/Programming/Swarm-Intelligence-optimization-Algorithm/"/>
    <id>http://xujunliang666.com/Programming/Swarm-Intelligence-optimization-Algorithm/</id>
    <published>2023-08-22T16:00:00.000Z</published>
    <updated>2023-08-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>跟课题组的一个学长合作的一篇论文, 最近发表了, 总结一下在代码设计中学到的算法。</p><p>首先，所谓优化算法，是指对算法的有关性能进行优化，如时间复杂度、 空间复杂度 、正确性、 健壮性 。由于算法应用情景变化很大，算法优化可以使算法具有更好泛化能力。 算法优化是指对算法的有关性能进行优化，如时间复杂度、 空间复杂度 、正确性、健壮性。 大数据时代到来，算法要处理数据的数量级也越来越大以及处理问题的场景千变万化。 为了增强算法的处理问题的能力，对算法进行优化是必不可少的。对一些流程比如加工行业、旅游行业等，进行优化，其中最为典型的问题就是<code>旅行商问题(TSP)</code>。总而言之，优化算法的总目的就是将整个过程的成本(比如金钱、时间、各种消耗等)最低，典型的优化算法包括: <code>遗传算法(GA)</code>、<code>禁忌算法(TS)</code>、<code>模拟退火算法(SA)</code>、<code>粒子群算法(PSO)</code>、<code>差分算法(DE)</code>、<code>生物地理算法(BBO)</code>等，下面我会对这些算法都或多或少做一些代码方面的讲解，每篇讲解后面我都会附上代码。</p><h2 id="1-遗传算法-GA"><a href="#1-遗传算法-GA" class="headerlink" title="1. 遗传算法(GA)"></a>1. 遗传算法(GA)</h2><p>遗传算法可以说是最基本的优化算法，它是根据人类生殖过程中染色体的变化而产生的，原理是对于父代数据进行编译，在通过一系列操作对它进行“遗传和变异”，不断淘汰<code>适应度(Fitness)</code>低的个体数据，从而跳出局部最优解，产全局最优解，当然在过程中对<code>学习率(Learning Rate)</code>也有严格的控制。现在比较通俗好懂的讲解方式是用袋鼠爬山来比喻这个算法。</p><h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><ul><li><strong>编码</strong>: 将解表示为染色体。</li><li><strong>适应度函数</strong>: 评估染色体优劣。</li><li><strong>选择</strong>: 根据适应度选择个体。</li><li><strong>交叉</strong>: 交换染色体基因。</li><li><strong>变异</strong>: 随机改变基因。</li><li><strong>迭代</strong>: 重复上述过程。</li></ul><h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">POP_SIZE = <span class="number">100</span></span><br><span class="line">GENE_LENGTH = <span class="number">10</span></span><br><span class="line">MAX_GEN = <span class="number">50</span></span><br><span class="line">CROSS_RATE = <span class="number">0.8</span></span><br><span class="line">MUTATION_RATE = <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fitness</span>(<span class="params">individual</span>):</span><br><span class="line">    x = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, individual)), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_population</span>():</span><br><span class="line">    <span class="keyword">return</span> [[random.randint(<span class="number">0</span>, <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(GENE_LENGTH)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(POP_SIZE)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select</span>(<span class="params">population</span>):</span><br><span class="line">    total_fitness = <span class="built_in">sum</span>(fitness(ind) <span class="keyword">for</span> ind <span class="keyword">in</span> population)</span><br><span class="line">    probs = [fitness(ind) / total_fitness <span class="keyword">for</span> ind <span class="keyword">in</span> population]</span><br><span class="line">    <span class="keyword">return</span> population[random.choices(<span class="built_in">range</span>(POP_SIZE), probs)[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crossover</span>(<span class="params">parent1, parent2</span>):</span><br><span class="line">    <span class="keyword">if</span> random.random() &lt; CROSS_RATE:</span><br><span class="line">        point = random.randint(<span class="number">1</span>, GENE_LENGTH - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> parent1[:point] + parent2[point:], parent2[:point] + parent1[point:]</span><br><span class="line">    <span class="keyword">return</span> parent1, parent2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mutate</span>(<span class="params">individual</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(GENE_LENGTH):</span><br><span class="line">        <span class="keyword">if</span> random.random() &lt; MUTATION_RATE:</span><br><span class="line">            individual[i] = <span class="number">1</span> - individual[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genetic_algorithm</span>():</span><br><span class="line">    population = init_population()</span><br><span class="line">    <span class="keyword">for</span> generation <span class="keyword">in</span> <span class="built_in">range</span>(MAX_GEN):</span><br><span class="line">        new_population = []</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(POP_SIZE // <span class="number">2</span>):</span><br><span class="line">            parent1 = select(population)</span><br><span class="line">            parent2 = select(population)</span><br><span class="line">            child1, child2 = crossover(parent1, parent2)</span><br><span class="line">            mutate(child1)</span><br><span class="line">            mutate(child2)</span><br><span class="line">            new_population.extend([child1, child2])</span><br><span class="line">        population = new_population</span><br><span class="line">        best_individual = <span class="built_in">max</span>(population, key=fitness)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Generation <span class="subst">&#123;generation&#125;</span>: Best fitness = <span class="subst">&#123;fitness(best_individual)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> best_individual</span><br><span class="line"></span><br><span class="line">best_solution = genetic_algorithm()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Best solution: <span class="subst">&#123;best_solution&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><ul><li><strong>初始化</strong>: 生成随机种群。</li><li><strong>适应度计算</strong>: 评估个体适应度。</li><li><strong>选择、交叉与变异</strong>: 生成新个体。</li><li><strong>迭代更新</strong>: 逐代进化。</li></ul><h2 id="2-粒子群优化-PSO"><a href="#2-粒子群优化-PSO" class="headerlink" title="2. 粒子群优化(PSO)"></a>2. 粒子群优化(PSO)</h2><p>粒子群算法模拟鸟群的捕食行为。一群鸟在随机搜索食物，在这个区域里只有一块食物。所有的鸟都不知道食物在那里。但是他们知道当前的位置离食物还有多远。那么找到食物的最优策略是什么呢。最简单有效的就是搜寻离食物最近的鸟的周围区域。<code>PSO</code>从这种模型中得到启示并用于解决优化问题。<code>PSO</code>中，每个优化问题的解都是搜索空间中的一只鸟。我们称之为“粒子”。所有的粒子都有一个由被优化的函数决定的<code>适应值(fitnessvalue)</code>，每个粒子还有一个速度决定他们飞翔的方向和距离。然后粒子们就追随当前的最优粒子在解空间中搜索。</p><h3 id="算法流程-1"><a href="#算法流程-1" class="headerlink" title="算法流程"></a>算法流程</h3><ul><li><strong>初始化</strong>: 随机生成粒子的位置和速度。</li><li><strong>速度更新</strong>: 根据个体和全局最优位置更新速度。</li><li><strong>位置更新</strong>: 根据速度更新粒子位置。</li><li><strong>迭代</strong>: 更新个体和全局最优解。</li></ul><h3 id="Python实现-1"><a href="#Python实现-1" class="headerlink" title="Python实现"></a>Python实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">PARTICLE_SIZE = <span class="number">30</span></span><br><span class="line">DIMENSION = <span class="number">2</span></span><br><span class="line">MAX_ITER = <span class="number">100</span></span><br><span class="line">W = <span class="number">0.5</span></span><br><span class="line">C1 = <span class="number">1.5</span></span><br><span class="line">C2 = <span class="number">1.5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">objective_function</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">sum</span>(x**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Particle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.position = np.random.rand(DIMENSION)</span><br><span class="line">        <span class="variable language_">self</span>.velocity = np.random.rand(DIMENSION)</span><br><span class="line">        <span class="variable language_">self</span>.best_position = <span class="variable language_">self</span>.position.copy()</span><br><span class="line">        <span class="variable language_">self</span>.best_value = objective_function(<span class="variable language_">self</span>.position)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pso</span>():</span><br><span class="line">    particles = [Particle() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(PARTICLE_SIZE)]</span><br><span class="line">    global_best_position = <span class="built_in">min</span>(particles, key=<span class="keyword">lambda</span> p: p.best_value).best_position</span><br><span class="line">    global_best_value = objective_function(global_best_position)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(MAX_ITER):</span><br><span class="line">        <span class="keyword">for</span> particle <span class="keyword">in</span> particles:</span><br><span class="line">            r1, r2 = np.random.rand(DIMENSION), np.random.rand(DIMENSION)</span><br><span class="line">            particle.velocity =(W * particle.velocity +</span><br><span class="line">                                 C1 * r1 *(particle.best_position - particle.position) +</span><br><span class="line">                                 C2 * r2 *(global_best_position - particle.position))</span><br><span class="line">            particle.position += particle.velocity</span><br><span class="line"></span><br><span class="line">            current_value = objective_function(particle.position)</span><br><span class="line">            <span class="keyword">if</span> current_value &lt; particle.best_value:</span><br><span class="line">                particle.best_position = particle.position.copy()</span><br><span class="line">                particle.best_value = current_value</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> current_value &lt; global_best_value:</span><br><span class="line">                global_best_position = particle.position.copy()</span><br><span class="line">                global_best_value = current_value</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Best value: <span class="subst">&#123;global_best_value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> global_best_position</span><br><span class="line"></span><br><span class="line">best_position = pso()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Best position: <span class="subst">&#123;best_position&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="代码解析-1"><a href="#代码解析-1" class="headerlink" title="代码解析"></a>代码解析</h3><ul><li><strong>初始化</strong>: 随机生成粒子。</li><li><strong>速度与位置更新</strong>: 根据个体和全局最优调整。</li><li><strong>迭代更新</strong>: 寻找最优解。</li></ul><h2 id="3-差分进化算法-DE"><a href="#3-差分进化算法-DE" class="headerlink" title="3. 差分进化算法(DE)"></a>3. 差分进化算法(DE)</h2><p>和遗传算法一样，差分进化算法也是一种基于现代智能理论的优化算法，通过群体内个体之间的相互合作与竞争产生的群体智能来指导优化搜索的方向。该算法的基本思想是: 从一个随机产生的初始种群开始，通过把种群中任意两个个体的向量差与第三个个体求和来产生新个体，然后将新个体与当代种群中相应的个体相比较，如果新个体的适应度优于当前个体的适应度，则在下一代中就用新个体取代旧个体，否则仍保存旧个体。通过不断地进化，保留优良个体，淘汰劣质个体，引导搜索向最优解逼近。<code>DE</code>算法通过采用浮点矢量进行编码生成种群个体。在<code>DE</code>算法寻优的过程中，首先，从父代个体间选择两个个体进行向量做差生成差分矢量；其次，选择另外一个个体与差分矢量求和生成实验个体；然后，对父代个体与相应的实验个体进行交叉操作，生成新的子代个体；最后在父代个体和子代个体之间进行选择操作，将符合要求的个体保存到下一代群体中去。</p><h3 id="算法流程-2"><a href="#算法流程-2" class="headerlink" title="算法流程"></a>算法流程</h3><ul><li><strong>初始化</strong>: 随机生成种群。</li><li><strong>变异</strong>: 通过差分向量生成变异向量。</li><li><strong>交叉</strong>: 生成试验向量。</li><li><strong>选择</strong>: 选择适应度更好的个体。</li><li><strong>迭代</strong>: 重复上述过程。</li></ul><h3 id="Python实现-2"><a href="#Python实现-2" class="headerlink" title="Python实现"></a>Python实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">POP_SIZE = <span class="number">30</span></span><br><span class="line">DIMENSION = <span class="number">2</span></span><br><span class="line">F = <span class="number">0.5</span></span><br><span class="line">CR = <span class="number">0.7</span></span><br><span class="line">MAX_ITER = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">objective_function</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">sum</span>(x**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">differential_evolution</span>():</span><br><span class="line">    population = np.random.rand(POP_SIZE, DIMENSION)</span><br><span class="line">    best_solution = population[<span class="number">0</span>]</span><br><span class="line">    best_value = objective_function(best_solution)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(MAX_ITER):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(POP_SIZE):</span><br><span class="line">            indices = <span class="built_in">list</span>(<span class="built_in">range</span>(POP_SIZE))</span><br><span class="line">            indices.remove(i)</span><br><span class="line">            a, b, c = population[np.random.choice(indices, <span class="number">3</span>, replace=<span class="literal">False</span>)]</span><br><span class="line">            mutant = np.clip(a + F *(b - c), <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">            cross_points = np.random.rand(DIMENSION) &lt; CR</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> np.<span class="built_in">any</span>(cross_points):</span><br><span class="line">                cross_points[np.random.randint(<span class="number">0</span>, DIMENSION)] = <span class="literal">True</span></span><br><span class="line">            trial = np.where(cross_points, mutant, population[i])</span><br><span class="line">            trial_value = objective_function(trial)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> trial_value &lt; objective_function(population[i]):</span><br><span class="line">                population[i] = trial</span><br><span class="line">                <span class="keyword">if</span> trial_value &lt; best_value:</span><br><span class="line">                    best_value = trial_value</span><br><span class="line">                    best_solution = trial</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Best value: <span class="subst">&#123;best_value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> best_solution</span><br><span class="line"></span><br><span class="line">best_solution = differential_evolution()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Best solution: <span class="subst">&#123;best_solution&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="代码解析-2"><a href="#代码解析-2" class="headerlink" title="代码解析"></a>代码解析</h3><ul><li><strong>初始化</strong>: 生成随机种群。</li><li><strong>变异与交叉</strong>: 生成试验向量。</li><li><strong>选择</strong>: 更新种群。</li><li><strong>迭代更新</strong>: 寻找最优解。</li></ul><h2 id="4-生物地理优化算法-BBO"><a href="#4-生物地理优化算法-BBO" class="headerlink" title="4. 生物地理优化算法(BBO)"></a>4. 生物地理优化算法(BBO)</h2><p>BBO算法将优化问题的每个解看成一个栖息地。解的适应度越高，表示栖息地拥有的物种越多，其迁出率就越高、迁入率就越低:反之，解的适应度越低，其对应的迁出率越低、迁入率越高。迁移操作的目的就是在不同的解之间进行信息分享，其中好的解倾向于把自身的信息传播给其他解，而差的解更倾向于从其他解中接收信息。</p><h3 id="算法流程-3"><a href="#算法流程-3" class="headerlink" title="算法流程"></a>算法流程</h3><ul><li><strong>初始化</strong>: 随机生成栖息地。</li><li><strong>迁移</strong>: 根据适应度进行特征迁移。</li><li><strong>变异</strong>: 随机调整特征。</li><li><strong>选择</strong>: 更新栖息地。</li><li><strong>迭代</strong>: 重复上述过程。</li></ul><h3 id="Python实现-3"><a href="#Python实现-3" class="headerlink" title="Python实现"></a>Python实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">POP_SIZE = <span class="number">30</span></span><br><span class="line">DIMENSION = <span class="number">2</span></span><br><span class="line">MUTATION_RATE = <span class="number">0.01</span></span><br><span class="line">MAX_ITER = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">objective_function</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">sum</span>(x**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">biogeography_based_optimization</span>():</span><br><span class="line">    population = np.random.rand(POP_SIZE, DIMENSION)</span><br><span class="line">    best_solution = population[<span class="number">0</span>]</span><br><span class="line">    best_value = objective_function(best_solution)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(MAX_ITER):</span><br><span class="line">        fitness = np.array([objective_function(ind) <span class="keyword">for</span> ind <span class="keyword">in</span> population])</span><br><span class="line">        rank = fitness.argsort()</span><br><span class="line">        population = population[rank]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(POP_SIZE):</span><br><span class="line">            <span class="keyword">if</span> np.random.rand() &lt; MUTATION_RATE:</span><br><span class="line">                population[i] = np.random.rand(DIMENSION)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(DIMENSION):</span><br><span class="line">                    <span class="keyword">if</span> np.random.rand() &lt;(POP_SIZE - i) / POP_SIZE:</span><br><span class="line">                        donor = population[np.random.randint(<span class="number">0</span>, i)]</span><br><span class="line">                        population[i, j] = donor[j]</span><br><span class="line"></span><br><span class="line">        current_best_value = objective_function(population[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> current_best_value &lt; best_value:</span><br><span class="line">            best_value = current_best_value</span><br><span class="line">            best_solution = population[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Best value: <span class="subst">&#123;best_value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> best_solution</span><br><span class="line"></span><br><span class="line">best_solution = biogeography_based_optimization()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Best solution: <span class="subst">&#123;best_solution&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="代码解析-3"><a href="#代码解析-3" class="headerlink" title="代码解析"></a>代码解析</h3><ul><li><strong>初始化</strong>: 生成随机栖息地。</li><li><strong>迁移与变异</strong>: 调整特征。</li><li><strong>选择</strong>: 更新栖息地。</li><li><strong>迭代更新</strong>: 寻找最优解。</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>Holland, J. H.(1975). Adaptation in Natural and Artificial Systems.</li><li>Kennedy, J., &amp; Eberhart, R.(1995). Particle Swarm Optimization.</li><li>Storn, R., &amp; Price, K.(1997). Differential Evolution.</li><li>Simon, D.(2008). Biogeography-Based Optimization.</li><li>Dorigo, M., &amp; Stützle, T.(2004). Ant Colony Optimization.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;跟课题组的一个学长合作的一篇论文, 最近发表了, 总结一下在代码设计中学到的算法。&lt;/p&gt;
&lt;p&gt;首先，所谓优化算法，是指对算法的有关性能进行优化，如时间复杂度、 空间复杂度 、正确性、 健壮性 。由于算法应用情景变化很大，算法优化可以使算法具有更好泛化能力。 算法优化是指</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="Python" scheme="http://xujunliang666.com/tags/Python/"/>
    
    <category term="算法" scheme="http://xujunliang666.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="机器学习" scheme="http://xujunliang666.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux 选择显卡启动的问题</title>
    <link href="http://xujunliang666.com/School/Arch-GPU/"/>
    <id>http://xujunliang666.com/School/Arch-GPU/</id>
    <published>2023-07-02T16:00:00.000Z</published>
    <updated>2023-07-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本机配置：AMD核显 + NVIDIA独显</strong><br>成功安装了optimus-manager管理显卡驱动，它可以很好接触显卡驱动的切换.于是昨晚因为屏幕刷新率问题尝试切换startup mode.</p><p>于是尝试切换启动项显卡驱动模式：</p><ul><li>尝试nvidia独显直连启动：成功启动.使用感受上感觉到性能下降，图形动画效果变差.</li><li>尝试nvidia+amd混合启动：成功启动.使用感受极佳，推荐.</li><li>尝试amd核显启动：启动失败.无法进入kde.黑屏(显卡未通电的那种黑屏).可以进入tty.</li></ul><p><img src="https://images.kimbleex.top/BlogIMG/Arch_GPU/black.avif" alt="黑屏">  </p><p>于是尝试在tty中解决：</p><ul><li>尝试卸载了optimus管理器，reboot，无效.</li><li>尝试optimus-manager - -switch nvidia，报错，无有效解决方法.</li><li>尝试进入bios，禁用核显启动，无法进入tty，风扇狂转，黑屏.</li></ul><div class="video"><video controls preload><source src="https://images.kimbleex.top/BlogIMG/Arch_GPU/gameover.mp4" type="video/mp4">Your browser does not support the video tag.</video></div>  <p><strong>至此，Arch宣告滚挂…….GG！</strong></p><p>os驱动问题由于机器各有所不同很难解决，考虑到短学期需要使用电脑，所以打算重装.这次会尝试在grub里安装iso，这样就无需插u盘抢救系统.并且尝试使用btrfs文件系统代替传统的ext4文件系统.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;本机配置：AMD核显 + NVIDIA独显&lt;/strong&gt;&lt;br&gt;成功安装了optimus-manager管理显卡驱动，它可以很好接触显卡驱动的切换.于是昨晚因为屏幕刷新率问题尝试切换startup mode.&lt;/p&gt;
&lt;p&gt;于是尝试切换启动项显卡驱动模式</summary>
      
    
    
    
    <category term="School" scheme="http://xujunliang666.com/categories/School/"/>
    
    
    <category term="Arch Linux" scheme="http://xujunliang666.com/tags/Arch-Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hello, Arch Linux !!!</title>
    <link href="http://xujunliang666.com/School/Arch-Open/"/>
    <id>http://xujunliang666.com/School/Arch-Open/</id>
    <published>2023-06-29T16:00:00.000Z</published>
    <updated>2023-06-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>不妨说windows已然成为历史的车轮印.<br><img src="https://images.kimbleex.top/BlogIMG/Arch_Open/pic.avif" alt="惬意的研究Arch"></p><p>经过前三次的捣鼓，昨晚毅然卸载windows.</p><p>这样就不会arch装不好就继续用windows了.😭</p><p>晚上好，尊敬的Arch Linux用户！</p><div class="video"><video controls preload><source src="https://images.kimbleex.top/BlogIMG/Arch_Open/start.mp4" type="video/mp4">Your browser does not support the video tag.</video></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;不妨说windows已然成为历史的车轮印.&lt;br&gt;&lt;img src=&quot;https://images.kimbleex.top/BlogIMG/Arch_Open/pic.avif&quot; alt=&quot;惬意的研究Arch&quot;&gt;&lt;/p&gt;
&lt;p&gt;经过前三次的捣鼓，昨晚毅然卸载windows</summary>
      
    
    
    
    <category term="School" scheme="http://xujunliang666.com/categories/School/"/>
    
    
    <category term="Arch Linux" scheme="http://xujunliang666.com/tags/Arch-Linux/"/>
    
  </entry>
  
  <entry>
    <title>一些很方便但是容易忘记的SQL语句</title>
    <link href="http://xujunliang666.com/School/Useful-SQL/"/>
    <id>http://xujunliang666.com/School/Useful-SQL/</id>
    <published>2023-02-18T16:00:00.000Z</published>
    <updated>2023-02-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>有一些方便数据库操作的<code>SQL</code>语句，它可以简化一些代码。总是或多或少忘记，记录一下。</p><p>我这里拿一个<code>students</code>表举例，表结构如下：</p><div class="table-container"><table><thead><tr><th>id</th><th>class_id</th><th>name</th><th>gender</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>张三</td><td>男</td><td>90</td></tr><tr><td>2</td><td>1</td><td>李四</td><td>男</td><td>85</td></tr><tr><td>3</td><td>2</td><td>王五</td><td>女</td><td>95</td></tr><tr><td>4</td><td>2</td><td>赵六</td><td>女</td><td>88</td></tr></tbody></table></div><h2 id="插入或替换"><a href="#插入或替换" class="headerlink" title="插入或替换"></a>插入或替换</h2><p>如果我们希望插入一条新记录<code>INSERT</code>，但如果记录已经存在，就先删除原记录，再插入新记录。此时，可以使用<code>REPLACE</code>语句，这样就不必先查询，再决定是否先删除再插入。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">REPLACE <span class="keyword">INTO</span> students (id, class_id, name, gender, score) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">99</span>);</span><br></pre></td></tr></table></figure><p>若<code>id=1</code>的记录不存在，<code>REPLACE</code>语句将插入新记录，否则，当前<code>id=1</code>的记录将被删除，然后再插入新记录。</p><h2 id="插入或更新"><a href="#插入或更新" class="headerlink" title="插入或更新"></a>插入或更新</h2><p>如果我们希望插入一条新记录<code>INSERT</code>，但如果记录已经存在，就啥事也不干直接忽略，此时，可以使用<code>INSERT IGNORE INTO ...</code>语句。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (id, class_id, name, gender, score) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">99</span>) <span class="keyword">ON</span> DUPLICATE KEY <span class="keyword">UPDATE</span> name<span class="operator">=</span><span class="string">&#x27;小明&#x27;</span>, gender<span class="operator">=</span><span class="string">&#x27;F&#x27;</span>, score<span class="operator">=</span><span class="number">99</span>;</span><br></pre></td></tr></table></figure><p>若<code>id=1</code>的记录不存在，<code>INSERT</code>语句将插入新记录，否则，当前<code>id=1</code>的记录将被更新，更新的字段由<code>UPDATE</code>指定。</p><h2 id="插入或忽略"><a href="#插入或忽略" class="headerlink" title="插入或忽略"></a>插入或忽略</h2><p>如果我们希望插入一条新记录<code>INSERT</code>，但如果记录已经存在，就啥事也不干直接忽略，此时，可以使用<code>INSERT IGNORE INTO ...</code>语句.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> IGNORE <span class="keyword">INTO</span> students (id, class_id, name, gender, score) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">99</span>);</span><br></pre></td></tr></table></figure><p>若<code>id=1</code>的记录不存在，<code>INSERT</code>语句将插入新记录，否则，不执行任何操作。</p><h2 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h2><p>如果想要对一个表进行快照，即复制一份当前表的数据到一个新表，可以结合<code>CREATE TABLE</code>和<code>SELECT</code>。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students_of_class1 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> class_id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="写入查询结果集"><a href="#写入查询结果集" class="headerlink" title="写入查询结果集"></a>写入查询结果集</h2><p>如果查询结果集需要写入到表中，可以结合<code>INSERT</code>和<code>SELECT</code>，将<code>SELECT</code>语句的结果集直接插入到指定表中。</p><p>例如，创建一个统计成绩的表<code>statistics</code>，记录各班的平均成绩。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> statistics (</span><br><span class="line">    id <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    class_id <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    average <span class="keyword">DOUBLE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后，我们就可以用一条语句写入各班的平均成绩。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> statistics (class_id, average) <span class="keyword">SELECT</span> class_id, <span class="built_in">AVG</span>(score) <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class_id;</span><br></pre></td></tr></table></figure><p>确保<code>INSERT</code>语句的列和<code>SELECT</code>语句的列能一一对应，就可以在<code>statistics</code>表中直接保存查询的结果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有一些方便数据库操作的&lt;code&gt;SQL&lt;/code&gt;语句，它可以简化一些代码。总是或多或少忘记，记录一下。&lt;/p&gt;
&lt;p&gt;我这里拿一个&lt;code&gt;students&lt;/code&gt;表举例，表结构如下：&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;ta</summary>
      
    
    
    
    <category term="School" scheme="http://xujunliang666.com/categories/School/"/>
    
    
    <category term="数据库" scheme="http://xujunliang666.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>AmazonSpider-亚马逊用户画像</title>
    <link href="http://xujunliang666.com/Programming/AmazonSpider/"/>
    <id>http://xujunliang666.com/Programming/AmazonSpider/</id>
    <published>2022-08-14T16:00:00.000Z</published>
    <updated>2022-08-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用selenium等工具类，在亚马逊平台上爬去商品信息和用户信息，并进行数据分析和分词统计，最后生成用户画像报告。</p><p><strong>亚马逊平台访问需要代理访问！</strong></p><p><code>github仓库</code>: <a href="https://github.com/kimbleex/AmazonSpider.git">Github仓库地址</a>  </p><p>star和fork是一个好习惯！:)</p><p>点赞和关注也是好习惯！:D</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p><strong>写在前面：代码本身很多函数是写在类当中的，如果单个函数无法使用，请滑到文章最后面查看完整代码！</strong></p><p>需要的导入：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br></pre></td></tr></table></figure><p>首先需要初始化浏览器，并对商品的页面等进行划分。</p><p>写两个函数，用于启动浏览器和进入指定的页面。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">star_browser</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 获取计算机用户名</span></span><br><span class="line">    username = os.getlogin()</span><br><span class="line">    <span class="variable language_">self</span>.browser_path = <span class="string">f&#x27;C:/Users/<span class="subst">&#123;username&#125;</span>/AppData/Local/Google/Chrome/User Data&#x27;</span></span><br><span class="line">    options = webdriver.ChromeOptions()</span><br><span class="line">    options.add_argument(<span class="string">&#x27;user-data-dir=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="variable language_">self</span>.browser_path)) </span><br><span class="line">    options.add_argument(<span class="string">&#x27;lang=en-US&#x27;</span>) <span class="comment"># 设置英文默认</span></span><br><span class="line">    <span class="variable language_">self</span>.browser = webdriver.Chrome(options=options)</span><br><span class="line">    <span class="variable language_">self</span>.browser.maximize_window()  <span class="comment"># 窗口最大化</span></span><br></pre></td></tr></table></figure><p><strong>注意：<code>browser_path</code>属性需要根据自己电脑中chrome浏览器安装路径准备</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">enter_page</span>(<span class="params">self, url, asin=<span class="literal">None</span></span>):</span><br><span class="line">    urls = &#123;</span><br><span class="line">        <span class="string">&#x27;主页&#x27;</span>: <span class="string">&#x27;https://www.amazon.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;商品页&#x27;</span>: <span class="string">&#x27;https://www.amazon.com/dp/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(asin),</span><br><span class="line">        <span class="string">&#x27;评论区&#x27;</span>: <span class="string">&#x27;https://www.amazon.com/product-reviews/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(asin),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">self</span>.browser.get(urls[url])</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><strong>注意：以上网址均为实地考察得到，如有更新也需要自行更改！</strong></p><h2 id="2-获取商品Asin-亚马逊商品唯一识别ID"><a href="#2-获取商品Asin-亚马逊商品唯一识别ID" class="headerlink" title="2.获取商品Asin (亚马逊商品唯一识别ID)"></a>2.获取商品<code>Asin</code> (亚马逊商品唯一识别ID)</h2><p>根据网页的页面元素排列定位元素，首先需要定位首页的搜索框。</p><p>防止页面元素没有刷新出来，使用<code>WebDriverWait</code>来进行等待。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wait = WebDriverWait(<span class="variable language_">self</span>.browser, <span class="number">500</span>)</span><br><span class="line"><span class="comment"># 根据搜索词 抓取Asin</span></span><br><span class="line">wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">&#x27;//*[@id=&quot;twotabsearchtextbox&quot;]&#x27;</span>)))</span><br></pre></td></tr></table></figure><p>找到搜索框，模拟用户输入需要查找的商品名称，并模拟按下<code>Enter</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">searchbox = <span class="variable language_">self</span>.browser.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;twotabsearchtextbox&quot;]&#x27;</span>)</span><br><span class="line">searchbox.clear() </span><br><span class="line">searchbox.send_keys(theme)</span><br><span class="line">searchbox.send_keys(Keys.ENTER)</span><br></pre></td></tr></table></figure><p>接下来进入商品页面后就需要爬取商品的<code>Asin</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">&#x27;//*[@id=&quot;departments&quot;]&#x27;</span>)))</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, page):</span><br><span class="line">    asins = <span class="variable language_">self</span>.browser.find_elements(By.XPATH, <span class="string">&#x27;//*[@id=&quot;search&quot;]/div[1]/div[1]/div/span[1]/div[1]/div&#x27;</span>)</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> asins:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            asin = a.get_attribute(<span class="string">&#x27;data-asin&#x27;</span>)</span><br><span class="line">            results.append(asin)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 移除空白 </span></span><br><span class="line">    <span class="keyword">while</span> <span class="string">&quot;&quot;</span> <span class="keyword">in</span> results:</span><br><span class="line">        results.remove(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>页面元素的定位如果失效需要去页面上自行复制元素的<code>XPATH</code>，当然定位的方法也有很多种。</p><p>爬取完成后保存到<code>csv</code>文件中，方便后续操作的使用。也可以用作断点。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.Series(results)</span><br><span class="line">df.dropna(inplace=<span class="literal">True</span>)</span><br><span class="line">filename = <span class="string">&#x27;./read/&#x27;</span> + theme + <span class="string">&#x27;-asin.csv&#x27;</span></span><br><span class="line">df.to_csv(filename, mode=<span class="string">&#x27;a&#x27;</span>, index=<span class="literal">False</span>, header=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>结束后进行翻页，防止页面不在翻页按钮那，所以需要执行<code>js</code>将页面下去。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    nextbutton = <span class="variable language_">self</span>.browser.find_element(By.XPATH,<span class="string">&#x27;.//a[text()=&quot;Next&quot;]&#x27;</span>)</span><br><span class="line">    <span class="variable language_">self</span>.browser.execute_script(<span class="string">&quot;arguments[0].scrollIntoView();&quot;</span>, nextbutton)</span><br><span class="line">    nextbutton.click()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>爬取<code>Asin</code>完整函数如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_asin</span>(<span class="params">self, theme, page</span>):</span><br><span class="line">    <span class="variable language_">self</span>.wait = WebDriverWait(<span class="variable language_">self</span>.browser, <span class="number">500</span>)</span><br><span class="line">    <span class="comment"># 根据搜索词 抓取Asin</span></span><br><span class="line">    <span class="variable language_">self</span>.wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">&#x27;//*[@id=&quot;twotabsearchtextbox&quot;]&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(theme)):</span><br><span class="line">        searchbox = <span class="variable language_">self</span>.browser.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;twotabsearchtextbox&quot;]&#x27;</span>)</span><br><span class="line">        searchbox.clear() </span><br><span class="line">        searchbox.send_keys(theme)</span><br><span class="line">        searchbox.send_keys(Keys.ENTER)</span><br><span class="line">        <span class="comment"># 等待加载</span></span><br><span class="line">        <span class="variable language_">self</span>.wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">&#x27;//*[@id=&quot;departments&quot;]&#x27;</span>)))</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, page):</span><br><span class="line">            asins = <span class="variable language_">self</span>.browser.find_elements(By.XPATH, <span class="string">&#x27;//*[@id=&quot;search&quot;]/div[1]/div[1]/div/span[1]/div[1]/div&#x27;</span>)</span><br><span class="line">            results = []</span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> asins:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    asin = a.get_attribute(<span class="string">&#x27;data-asin&#x27;</span>)</span><br><span class="line">                    results.append(asin)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">            <span class="comment"># 移除空白 </span></span><br><span class="line">            <span class="keyword">while</span> <span class="string">&quot;&quot;</span> <span class="keyword">in</span> results:</span><br><span class="line">                results.remove(<span class="string">&quot;&quot;</span>)</span><br><span class="line">            df = pd.Series(results)</span><br><span class="line">            df.dropna(inplace=<span class="literal">True</span>)</span><br><span class="line">            filename = <span class="string">&#x27;./read/&#x27;</span> + theme + <span class="string">&#x27;-asin.csv&#x27;</span></span><br><span class="line">            df.to_csv(filename, mode=<span class="string">&#x27;a&#x27;</span>, index=<span class="literal">False</span>, header=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                nextbutton = <span class="variable language_">self</span>.browser.find_element(By.XPATH,<span class="string">&#x27;.//a[text()=&quot;Next&quot;]&#x27;</span>)</span><br><span class="line">                <span class="variable language_">self</span>.browser.execute_script(<span class="string">&quot;arguments[0].scrollIntoView();&quot;</span>, nextbutton)</span><br><span class="line">                nextbutton.click()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="3-获取标题-五点描述-分词"><a href="#3-获取标题-五点描述-分词" class="headerlink" title="3.获取标题+五点描述+分词"></a>3.获取标题+五点描述+分词</h2><p>原理与上述过程一致，定位<code>title</code>元素位置并抓取。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">title</span>(<span class="params">self, theme, savepath, asin</span>):</span><br><span class="line">    title = <span class="variable language_">self</span>.browser.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;productTitle&quot;]&#x27;</span>).text           </span><br><span class="line">    js_script= <span class="string">&#x27;return document.querySelector(&quot;#corePriceDisplay_desktop_feature_div &gt; div.a-section.a-spacing-none.aok-align-center.aok-relative &gt; span.aok-offscreen&quot;).textContent;&#x27;</span>  </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        price = <span class="variable language_">self</span>.browser.execute_script(js_script)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;with&#x27;</span> <span class="keyword">in</span> price:</span><br><span class="line">            price = price.split(<span class="string">&#x27;with&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        price = <span class="literal">None</span></span><br><span class="line">    points = <span class="variable language_">self</span>.browser.find_elements(By.XPATH, <span class="string">&#x27;//*[@id=&quot;feature-bullets&quot;]/ul/li/span&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        imgurl = <span class="variable language_">self</span>.browser.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;landingImage&quot;]&#x27;</span>).get_attribute(<span class="string">&quot;src&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        imgurl = <span class="literal">None</span></span><br><span class="line">    fivepoint = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> point <span class="keyword">in</span> points:</span><br><span class="line">        fivepoint = fivepoint + point.text + <span class="string">&#x27;\n&#x27;</span> </span><br><span class="line">    filename = savepath + theme + <span class="string">&#x27;-title.csv&#x27;</span></span><br><span class="line">    data = [asin, title, price, imgurl, fivepoint]</span><br><span class="line">    df = pd.DataFrame([data])</span><br><span class="line">    df.to_csv(filename, mode=<span class="string">&#x27;a&#x27;</span>, index=<span class="literal">False</span>, header=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="4-抓取评论-分词"><a href="#4-抓取评论-分词" class="headerlink" title="4.抓取评论+分词"></a>4.抓取评论+分词</h2><p>评论抓取了用户名<code>username</code>，用户评分<code>star</code>，购买时间<code>buytime</code>，颜色<code>color</code>，商品标题<code>title</code>，评论内容<code>content</code>，爬取完成后再进行分词。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">product_reviews</span>(<span class="params">self, theme, savepath, asin</span>):</span><br><span class="line">    <span class="comment"># 获取评论总数 计算翻页次数</span></span><br><span class="line">    page_div = <span class="variable language_">self</span>.browser.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;filter-info-section&quot;]/div&#x27;</span>).text</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        page = <span class="built_in">int</span>(re.findall(<span class="string">&#x27;, (.*?)with review&#x27;</span>, page_div)[<span class="number">0</span>].replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        page = <span class="built_in">int</span>(re.findall(<span class="string">&#x27;, (.*?)with reviews&#x27;</span>, page_div)[<span class="number">0</span>].replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">    page = <span class="number">10</span> <span class="keyword">if</span> <span class="built_in">int</span>(math.ceil(page/<span class="number">10</span>)) &gt;= <span class="number">10</span> <span class="keyword">else</span> <span class="built_in">int</span>(math.ceil(page/<span class="number">10</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;一共&#123;&#125;页&quot;</span>.<span class="built_in">format</span>(page))</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(page), desc=<span class="string">&quot;当前asin:&#123;&#125;进度&quot;</span>.<span class="built_in">format</span>(asin),ncols=<span class="number">80</span>):</span><br><span class="line">        divs = <span class="variable language_">self</span>.browser.find_elements(By.XPATH, <span class="string">&#x27;//*[@id=&quot;cm_cr-review_list&quot;]/div&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(divs)-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="variable language_">self</span>.browser.execute_script(<span class="string">&quot;arguments[0].scrollIntoView();&quot;</span>, divs[i])</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line">                username = divs[i].find_element(By.XPATH,<span class="string">&#x27;div/div/div[1]&#x27;</span>).text</span><br><span class="line">                star = divs[i].find_element(By.XPATH, <span class="string">&#x27;div/div/div[2]/a/i/span&#x27;</span>).get_attribute(<span class="string">&quot;textContent&quot;</span>).split(<span class="string">&#x27;，&#x27;</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                title = divs[i].find_element(By.XPATH, <span class="string">&#x27;div/div/div[2]/a/span[2]&#x27;</span>).text</span><br><span class="line">                buytime = divs[i].find_element(By.XPATH, <span class="string">&#x27;div/div/span&#x27;</span>).text.split(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    color = divs[i].find_element(By.XPATH, <span class="string">&#x27;div/div/div[3]/a[1]&#x27;</span>).text.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    color = <span class="string">&quot; &quot;</span></span><br><span class="line">                content = divs[i].find_element(By.XPATH, <span class="string">&#x27;div/div/div[4]&#x27;</span>).text</span><br><span class="line">                data = [username, star, buytime, color , title, content]</span><br><span class="line">                dataframe = pd.DataFrame([data])</span><br><span class="line">                filename = <span class="string">&#x27;&#123;&#125;&#123;&#125;-reviews.csv&#x27;</span>.<span class="built_in">format</span>(savepath, theme)</span><br><span class="line">                dataframe.to_csv(filename, mode=<span class="string">&#x27;a&#x27;</span>, index=<span class="literal">False</span>, header=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">if</span> p+<span class="number">1</span> &lt; page:</span><br><span class="line">            <span class="comment"># 翻页</span></span><br><span class="line">            <span class="variable language_">self</span>.browser.find_element(By.XPATH, <span class="string">&#x27;.//a[text()=&quot;Next Page&quot;]&#x27;</span>).click()</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)   </span><br></pre></td></tr></table></figure><h2 id="5-获取问题和回答-分词"><a href="#5-获取问题和回答-分词" class="headerlink" title="5. 获取问题和回答+分词"></a>5. 获取问题和回答+分词</h2><p>进入到商品用户问答界面爬取用户的提问和回答。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">qa</span>(<span class="params">self, theme, savepath, asin</span>):</span><br><span class="line">    page = <span class="variable language_">self</span>.browser.find_elements(By.XPATH, <span class="string">&#x27;//*[@id=&quot;askPaginationBar&quot;]/ul/li&#x27;</span>)</span><br><span class="line">    page = page[-<span class="number">2</span>].text</span><br><span class="line">    page = <span class="built_in">int</span>(page)</span><br><span class="line">    filename = savepath + theme + <span class="string">&#x27;-QA.csv&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(page):</span><br><span class="line">        qas = <span class="variable language_">self</span>.browser.find_elements(By.XPATH, <span class="string">&#x27;//*[@id=&quot;a-page&quot;]/div[1]/div[6]/div/div/div/div/div[2]&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> qa <span class="keyword">in</span> qas:</span><br><span class="line">            q = qa.find_element(By.XPATH, <span class="string">&#x27;div/div/div[2]/a/span&#x27;</span>).text</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                a = qa.find_element(By.XPATH, <span class="string">&#x27;div[2]/div/div[2]/span&#x27;</span>).text</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                a = <span class="literal">None</span></span><br><span class="line">            data = [asin, q, a]</span><br><span class="line">            df = pd.DataFrame([data])</span><br><span class="line">            df.to_csv(filename, mode=<span class="string">&#x27;a&#x27;</span>, index=<span class="literal">False</span>, header=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="variable language_">self</span>.browser.find_element(By.XPATH, <span class="string">&#x27;.//a[text()=&quot;Next&quot;]&#x27;</span>).click()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>===============================================================</strong>  </p><p><strong>2024.08.15更新：亚马逊平台取消了QA界面，这个功能暂时无法在使用了</strong>  </p><p><strong>===============================================================</strong>  </p><h2 id="6-工具类代码完整版"><a href="#6-工具类代码完整版" class="headerlink" title="6.工具类代码完整版"></a>6.工具类代码完整版</h2><h2 id="6-1-AmazonSpider类完整版"><a href="#6-1-AmazonSpider类完整版" class="headerlink" title="6.1 AmazonSpider类完整版"></a>6.1 AmazonSpider类完整版</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AmazonSpider</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">star_browser</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获取计算机用户名</span></span><br><span class="line">        username = os.getlogin()</span><br><span class="line">        <span class="variable language_">self</span>.browser_path = <span class="string">&#x27;C:/Users/&#123;&#125;/AppData/Local/Google/Chrome/User Data&#x27;</span>.<span class="built_in">format</span>(username)</span><br><span class="line">        options = webdriver.ChromeOptions()</span><br><span class="line">        options.add_argument(<span class="string">&#x27;user-data-dir=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="variable language_">self</span>.browser_path))</span><br><span class="line">        options.add_argument(<span class="string">&#x27;lang=en-US&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.browser = webdriver.Chrome(options=options)</span><br><span class="line">        <span class="comment"># 窗口最大化</span></span><br><span class="line">        <span class="variable language_">self</span>.browser.maximize_window()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enter_page</span>(<span class="params">self, url, asin=<span class="literal">None</span></span>):</span><br><span class="line">        urls = &#123;</span><br><span class="line">            <span class="string">&#x27;主页&#x27;</span>: <span class="string">&#x27;https://www.amazon.com/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;商品页&#x27;</span>: <span class="string">&#x27;https://www.amazon.com/dp/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(asin),</span><br><span class="line">            <span class="string">&#x27;评论区&#x27;</span>: <span class="string">&#x27;https://www.amazon.com/product-reviews/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(asin),</span><br><span class="line">            <span class="string">&#x27;QA&#x27;</span>:<span class="string">&#x27;https://www.amazon.com/ask/questions/asin/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(asin)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">self</span>.browser.get(urls[url])</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_asin</span>(<span class="params">self, theme, page</span>):</span><br><span class="line">        <span class="variable language_">self</span>.wait = WebDriverWait(<span class="variable language_">self</span>.browser, <span class="number">500</span>)</span><br><span class="line">        <span class="comment"># 根据搜索词 抓取Asin</span></span><br><span class="line">        <span class="variable language_">self</span>.wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">&#x27;//*[@id=&quot;twotabsearchtextbox&quot;]&#x27;</span>)))</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(theme)):</span><br><span class="line">            searchbox = <span class="variable language_">self</span>.browser.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;twotabsearchtextbox&quot;]&#x27;</span>)</span><br><span class="line">            searchbox.clear() </span><br><span class="line">            searchbox.send_keys(theme)</span><br><span class="line">            searchbox.send_keys(Keys.ENTER)</span><br><span class="line">            <span class="comment"># 等待加载</span></span><br><span class="line">            <span class="variable language_">self</span>.wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">&#x27;//*[@id=&quot;departments&quot;]&#x27;</span>)))</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, page):</span><br><span class="line">                asins = <span class="variable language_">self</span>.browser.find_elements(By.XPATH, <span class="string">&#x27;//*[@id=&quot;search&quot;]/div[1]/div[1]/div/span[1]/div[1]/div&#x27;</span>)</span><br><span class="line">                results = []</span><br><span class="line">                <span class="keyword">for</span> a <span class="keyword">in</span> asins:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        asin = a.get_attribute(<span class="string">&#x27;data-asin&#x27;</span>)</span><br><span class="line">                        results.append(asin)</span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line">                <span class="comment"># 移除空白 </span></span><br><span class="line">                <span class="keyword">while</span> <span class="string">&quot;&quot;</span> <span class="keyword">in</span> results:</span><br><span class="line">                    results.remove(<span class="string">&quot;&quot;</span>)</span><br><span class="line">                df = pd.Series(results)</span><br><span class="line">                df.dropna(inplace=<span class="literal">True</span>)</span><br><span class="line">                filename = <span class="string">&#x27;./read/&#x27;</span> + theme + <span class="string">&#x27;-asin.csv&#x27;</span></span><br><span class="line">                df.to_csv(filename, mode=<span class="string">&#x27;a&#x27;</span>, index=<span class="literal">False</span>, header=<span class="literal">False</span>)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    nextbutton = <span class="variable language_">self</span>.browser.find_element(By.XPATH,<span class="string">&#x27;.//a[text()=&quot;Next&quot;]&#x27;</span>)</span><br><span class="line">                    <span class="variable language_">self</span>.browser.execute_script(<span class="string">&quot;arguments[0].scrollIntoView();&quot;</span>, nextbutton)</span><br><span class="line">                    nextbutton.click()</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">qa</span>(<span class="params">self, theme, savepath, asin</span>):</span><br><span class="line">        page = <span class="variable language_">self</span>.browser.find_elements(By.XPATH, <span class="string">&#x27;//*[@id=&quot;askPaginationBar&quot;]/ul/li&#x27;</span>)</span><br><span class="line">        page = page[-<span class="number">2</span>].text</span><br><span class="line">        page = <span class="built_in">int</span>(page)</span><br><span class="line">        filename = savepath + theme + <span class="string">&#x27;-QA.csv&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(page):</span><br><span class="line">            qas = <span class="variable language_">self</span>.browser.find_elements(By.XPATH, <span class="string">&#x27;//*[@id=&quot;a-page&quot;]/div[1]/div[6]/div/div/div/div/div[2]&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> qa <span class="keyword">in</span> qas:</span><br><span class="line">                q = qa.find_element(By.XPATH, <span class="string">&#x27;div/div/div[2]/a/span&#x27;</span>).text</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    a = qa.find_element(By.XPATH, <span class="string">&#x27;div[2]/div/div[2]/span&#x27;</span>).text</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    a = <span class="literal">None</span></span><br><span class="line">                data = [asin, q, a]</span><br><span class="line">                df = pd.DataFrame([data])</span><br><span class="line"></span><br><span class="line">                df.to_csv(filename, mode=<span class="string">&#x27;a&#x27;</span>, index=<span class="literal">False</span>, header=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="variable language_">self</span>.browser.find_element(By.XPATH, <span class="string">&#x27;.//a[text()=&quot;Next&quot;]&#x27;</span>).click()</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">title</span>(<span class="params">self, theme, savepath, asin</span>):</span><br><span class="line">        title = <span class="variable language_">self</span>.browser.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;productTitle&quot;]&#x27;</span>).text       </span><br><span class="line">        js_script= <span class="string">&#x27;return document.querySelector(&quot;#corePriceDisplay_desktop_feature_div &gt; div.a-section.a-spacing-none.aok-align-center.aok-relative &gt; span.aok-offscreen&quot;).textContent;&#x27;</span>  </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            price = <span class="variable language_">self</span>.browser.execute_script(js_script)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;with&#x27;</span> <span class="keyword">in</span> price:</span><br><span class="line">                price = price.split(<span class="string">&#x27;with&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            price = <span class="literal">None</span></span><br><span class="line">        points = <span class="variable language_">self</span>.browser.find_elements(By.XPATH, <span class="string">&#x27;//*[@id=&quot;feature-bullets&quot;]/ul/li/span&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            imgurl = <span class="variable language_">self</span>.browser.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;landingImage&quot;]&#x27;</span>).get_attribute(<span class="string">&quot;src&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            imgurl = <span class="literal">None</span></span><br><span class="line">        fivepoint = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> points:</span><br><span class="line">            fivepoint = fivepoint + point.text + <span class="string">&#x27;\n&#x27;</span> </span><br><span class="line">        filename = savepath + theme + <span class="string">&#x27;-title.csv&#x27;</span></span><br><span class="line">        data = [asin, title, price, imgurl, fivepoint]</span><br><span class="line">        df = pd.DataFrame([data])</span><br><span class="line">        df.to_csv(filename, mode=<span class="string">&#x27;a&#x27;</span>, index=<span class="literal">False</span>, header=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">product_reviews</span>(<span class="params">self, theme, savepath, asin</span>):</span><br><span class="line">        <span class="comment"># 获取评论总数 计算翻页次数</span></span><br><span class="line">        page_div = <span class="variable language_">self</span>.browser.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;filter-info-section&quot;]/div&#x27;</span>).text</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            page = <span class="built_in">int</span>(re.findall(<span class="string">&#x27;, (.*?)带评论&#x27;</span>, page_div)[<span class="number">0</span>].replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            page = <span class="built_in">int</span>(re.findall(<span class="string">&#x27;, (.*?)带评论&#x27;</span>, page_div)[<span class="number">0</span>].replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">        page = <span class="number">10</span> <span class="keyword">if</span> <span class="built_in">int</span>(math.ceil(page/<span class="number">10</span>)) &gt;= <span class="number">10</span> <span class="keyword">else</span> <span class="built_in">int</span>(math.ceil(page/<span class="number">10</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;一共&#123;&#125;页&quot;</span>.<span class="built_in">format</span>(page))</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(page), desc=<span class="string">&quot;当前asin:&#123;&#125;进度&quot;</span>.<span class="built_in">format</span>(asin),ncols=<span class="number">80</span>):</span><br><span class="line">            divs = <span class="variable language_">self</span>.browser.find_elements(By.XPATH, <span class="string">&#x27;//*[@id=&quot;cm_cr-review_list&quot;]/div&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(divs)-<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="variable language_">self</span>.browser.execute_script(<span class="string">&quot;arguments[0].scrollIntoView();&quot;</span>, divs[i])</span><br><span class="line">                    time.sleep(<span class="number">1</span>)</span><br><span class="line">                    username = divs[i].find_element(By.XPATH,<span class="string">&#x27;div/div/div[1]&#x27;</span>).text</span><br><span class="line">                    star = divs[i].find_element(By.XPATH, <span class="string">&#x27;div/div/div[2]/a/i/span&#x27;</span>).get_attribute(<span class="string">&quot;textContent&quot;</span>).split(<span class="string">&#x27;，&#x27;</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                    title = divs[i].find_element(By.XPATH, <span class="string">&#x27;div/div/div[2]/a/span[2]&#x27;</span>).text</span><br><span class="line">                    buytime = divs[i].find_element(By.XPATH, <span class="string">&#x27;div/div/span&#x27;</span>).text.split(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        color = divs[i].find_element(By.XPATH, <span class="string">&#x27;div/div/div[3]/a[1]&#x27;</span>).text.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        color = <span class="string">&quot; &quot;</span></span><br><span class="line">                    content = divs[i].find_element(By.XPATH, <span class="string">&#x27;div/div/div[4]&#x27;</span>).text</span><br><span class="line">                    data = [username, star, buytime, color , title, content]</span><br><span class="line">                    dataframe = pd.DataFrame([data])</span><br><span class="line">                    filename = <span class="string">&#x27;&#123;&#125;&#123;&#125;-reviews.csv&#x27;</span>.<span class="built_in">format</span>(savepath, theme)</span><br><span class="line">                    dataframe.to_csv(filename, mode=<span class="string">&#x27;a&#x27;</span>, index=<span class="literal">False</span>, header=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">if</span> p+<span class="number">1</span> &lt; page:</span><br><span class="line">                <span class="comment"># 翻页</span></span><br><span class="line">                <span class="variable language_">self</span>.browser.find_element(By.XPATH, <span class="string">&#x27;.//a[text()=&quot;下一页&quot;]&#x27;</span>).click()</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                time.sleep(<span class="number">1</span>)   </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-2-CutWord代码完整版"><a href="#6-2-CutWord代码完整版" class="headerlink" title="6.2 CutWord代码完整版"></a>6.2 CutWord代码完整版</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> stopwords</span><br><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> word_tokenize</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_word</span>(<span class="params">theme, fun, columns, column</span>):</span><br><span class="line"></span><br><span class="line">    filename = <span class="string">&#x27;./data/&#123;&#125;/&#123;&#125;-&#123;&#125;.csv&#x27;</span>.<span class="built_in">format</span>(theme, theme, fun)</span><br><span class="line">    data = pd.read_csv(filename,names=columns)</span><br><span class="line">    data.drop_duplicates(keep=<span class="string">&#x27;first&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    data[column] = data[column].astype(<span class="built_in">str</span>)</span><br><span class="line">    titles = data[column].to_list()</span><br><span class="line"></span><br><span class="line">    stopWords = stopwords.words(<span class="string">&#x27;english&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    allWords = []</span><br><span class="line">    <span class="keyword">for</span> title <span class="keyword">in</span> titles:</span><br><span class="line">        title = re.sub(<span class="string">&#x27;\W+&#x27;</span>, <span class="string">&#x27; &#x27;</span>, title).replace(<span class="string">&quot;_&quot;</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        words = word_tokenize(title, <span class="string">&#x27;english&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> stopWords:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(word)&gt;<span class="number">1</span>:</span><br><span class="line">                    allWords.append(word)</span><br><span class="line">    </span><br><span class="line">    df = pd.Series(allWords)</span><br><span class="line">    df = df.value_counts()</span><br><span class="line">    df = df.to_frame().reset_index()</span><br><span class="line">    </span><br><span class="line">    savepath = <span class="string">&#x27;./result/&#123;&#125;/&#x27;</span>.<span class="built_in">format</span>(theme)</span><br><span class="line">    filename = <span class="string">&#x27;./result/&#123;&#125;/&#123;&#125;分词结果.csv&#x27;</span>.<span class="built_in">format</span>(theme, column)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(savepath):</span><br><span class="line">        os.makedirs(savepath)</span><br><span class="line">    df.to_csv(filename, index=<span class="literal">False</span>, header=[<span class="string">&#x27;word&#x27;</span>, <span class="string">&#x27;times&#x27;</span>], encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="类调用"><a href="#类调用" class="headerlink" title="类调用"></a>类调用</h2><h3 id="1-获取Asin"><a href="#1-获取Asin" class="headerlink" title="1 获取Asin"></a>1 获取<code>Asin</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> AmzonSpider <span class="keyword">import</span> AmazonSpider</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题</span></span><br><span class="line">theme = <span class="string">&#x27;Your Theme&#x27;</span></span><br><span class="line"><span class="comment"># 一共抓取多少页</span></span><br><span class="line">page = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">A = AmazonSpider()</span><br><span class="line">A.star_browser()</span><br><span class="line">A.enter_page(<span class="string">&#x27;主页&#x27;</span>)</span><br><span class="line">A.get_asin(theme, page)</span><br><span class="line"></span><br><span class="line">filename= <span class="string">&#x27;./read/&#123;&#125;-asin.csv&#x27;</span>.<span class="built_in">format</span>(theme) </span><br><span class="line"><span class="built_in">print</span>(filename)</span><br><span class="line">df = pd.read_csv(filename, names=[<span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;check&#x27;</span>])</span><br><span class="line">df.drop_duplicates(keep=<span class="string">&#x27;first&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df.to_csv(filename, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>主题即搜索词条，根据自己偏好填写</strong>  </p><p>需要输入的参数:  </p><blockquote><p><code>theme</code><em>关键字，即输入的词</em><br><code>page</code>需要抓取的页数，根据亚马逊官网的情况，最大为20</p></blockquote><p>输出的结果储存在: <code>./read/主题-asin.csv</code> 用于以下程序使用</p><h3 id="2获取评论-五点描述-分词"><a href="#2获取评论-五点描述-分词" class="headerlink" title="2获取评论+五点描述+分词"></a>2获取评论+五点描述+分词</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> AmzonSpider <span class="keyword">import</span> AmazonSpider</span><br><span class="line"><span class="keyword">from</span> CutWord <span class="keyword">import</span> cut_word</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题</span></span><br><span class="line">theme = <span class="string">&#x27;Your Theme&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 源数据储存路径</span></span><br><span class="line">savepath1 = <span class="string">&#x27;./data/&#123;&#125;/&#x27;</span>.<span class="built_in">format</span>(theme)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(savepath1):</span><br><span class="line">    os.makedirs(savepath1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果储存路径</span></span><br><span class="line">savepath2 = <span class="string">&#x27;./result/&#123;&#125;/&#x27;</span>.<span class="built_in">format</span>(theme)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(savepath2):</span><br><span class="line">    os.makedirs(savepath2)</span><br><span class="line"></span><br><span class="line">a = AmazonSpider()</span><br><span class="line">a.star_browser()</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;./read/&#123;&#125;-asin.csv&#x27;</span>.<span class="built_in">format</span>(theme)</span><br><span class="line">df_asin = pd.read_csv(filename)</span><br><span class="line">df_asin[<span class="string">&#x27;check&#x27;</span>] = <span class="number">0</span></span><br><span class="line">df_asin2 = df_asin[df_asin[<span class="string">&#x27;check&#x27;</span>]!=<span class="number">1</span>]</span><br><span class="line">asins = df_asin2[<span class="string">&#x27;asin&#x27;</span>].tolist()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> asin <span class="keyword">in</span> tqdm(asins, ncols=<span class="number">80</span>):</span><br><span class="line">    a.enter_page(<span class="string">&#x27;商品页&#x27;</span>, asin)</span><br><span class="line">    a.title(theme, savepath1, asin)</span><br><span class="line">    df_asin.loc[df_asin[<span class="string">&#x27;asin&#x27;</span>]==asin, <span class="string">&#x27;check&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    df_asin.to_csv(filename, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">a.browser.close()</span><br><span class="line"></span><br><span class="line">cut_word(theme, <span class="string">&#x27;title&#x27;</span>,  [<span class="string">&#x27;asin&#x27;</span>,<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;price&#x27;</span>,<span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;fivepoint&#x27;</span>], <span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">cut_word(theme, <span class="string">&#x27;title&#x27;</span>,  [<span class="string">&#x27;asin&#x27;</span>,<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;price&#x27;</span>,<span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;fivepoint&#x27;</span>], <span class="string">&#x27;fivepoint&#x27;</span>)</span><br></pre></td></tr></table></figure><p>需要输入的参数:  </p><blockquote><p><code>theme</code>同上</p></blockquote><p>输出的结果储存在: <code>./result/主题名称/title分词结果</code>和<code>./data/主题名称/主题-title.csv</code></p><h3 id="3-获取评论-分词"><a href="#3-获取评论-分词" class="headerlink" title="3 获取评论+分词"></a>3 获取评论+分词</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> AmzonSpider <span class="keyword">import</span> AmazonSpider</span><br><span class="line"><span class="keyword">from</span> CutWord <span class="keyword">import</span> cut_word</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题</span></span><br><span class="line">theme = <span class="string">&#x27;Your Theme&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据存储路径</span></span><br><span class="line">savepath1 = <span class="string">&#x27;./data/&#123;&#125;/&#x27;</span>.<span class="built_in">format</span>(theme)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(savepath1):</span><br><span class="line">    os.makedirs(savepath1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果存储路径</span></span><br><span class="line">savepath2 = <span class="string">&#x27;./result/&#123;&#125;/&#x27;</span>.<span class="built_in">format</span>(theme)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(savepath2):</span><br><span class="line">    os.makedirs(savepath2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抓取评论</span></span><br><span class="line">a = AmazonSpider()</span><br><span class="line">a.star_browser()</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;./read/&#123;&#125;-asin.csv&#x27;</span>.<span class="built_in">format</span>(theme)</span><br><span class="line">df_asin = pd.read_csv(filename)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置check 如果报错想要按照之前的asin继续运行程序 请将此条代码注释</span></span><br><span class="line">df_asin[<span class="string">&#x27;check&#x27;</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">df_asin2 = df_asin[df_asin[<span class="string">&#x27;check&#x27;</span>]!=<span class="number">1</span>]</span><br><span class="line">asins = df_asin2[<span class="string">&#x27;asin&#x27;</span>].tolist()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="built_in">len</span>(asins)),desc=<span class="string">&quot;评论爬取总进度&quot;</span>, ncols=<span class="number">80</span>):</span><br><span class="line">    a.enter_page(<span class="string">&#x27;评论区&#x27;</span>, asins[i])</span><br><span class="line">    a.product_reviews(theme, savepath1, asins[i])</span><br><span class="line">    df_asin.loc[df_asin[<span class="string">&#x27;asin&#x27;</span>]==asins[i], <span class="string">&#x27;check&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    df_asin.to_csv(filename, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">a.browser.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并评论</span></span><br><span class="line">files = os.listdir(savepath1)</span><br><span class="line">allData = pd.DataFrame()</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    filepath = savepath1 + file</span><br><span class="line">    df = pd.read_csv(filepath, names=[<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;star&#x27;</span>, <span class="string">&#x27;buytime&#x27;</span>, <span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;content&#x27;</span>])</span><br><span class="line">    df = df.drop_duplicates(keep=<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">    allData = pd.concat([allData, df])</span><br><span class="line"></span><br><span class="line">allData[<span class="string">&#x27;username&#x27;</span>] = allData[<span class="string">&#x27;username&#x27;</span>].astype(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">filename1 = <span class="string">&#x27;./data/&#123;&#125;/&#123;&#125;-&#123;&#125;.csv&#x27;</span>.<span class="built_in">format</span>( theme,theme, <span class="string">&#x27;reviews&#x27;</span>)</span><br><span class="line">allData.to_csv(filename1, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>, index=<span class="literal">False</span>, header=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对用户名进行分词</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_name</span>(<span class="params">username</span>):</span><br><span class="line">    firstname = username.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> firstname</span><br><span class="line"></span><br><span class="line">reviews_filename = savepath1 + theme + <span class="string">&#x27;-reviews.csv&#x27;</span></span><br><span class="line"></span><br><span class="line">allData = pd.read_csv(reviews_filename, names=[<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;star&#x27;</span>, <span class="string">&#x27;buytime&#x27;</span>, <span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;content&#x27;</span>])</span><br><span class="line">allData[<span class="string">&#x27;username&#x27;</span>] = allData[<span class="string">&#x27;username&#x27;</span>].astype(<span class="built_in">str</span>)</span><br><span class="line">allData[<span class="string">&#x27;firstname&#x27;</span>] = allData[<span class="string">&#x27;username&#x27;</span>].apply(cut_name)</span><br><span class="line">df_firstname = allData[<span class="string">&#x27;firstname&#x27;</span>].value_counts(ascending=<span class="literal">False</span>)</span><br><span class="line">filename2 = savepath2 + <span class="string">&#x27;firstname分词结果.csv&#x27;</span></span><br><span class="line">df_firstname.to_csv(filename2, header=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对评论内容进行分词</span></span><br><span class="line">cut_word(theme, <span class="string">&#x27;reviews&#x27;</span>,  [<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;star&#x27;</span>,<span class="string">&#x27;buytime&#x27;</span>,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;content&#x27;</span>], <span class="string">&#x27;content&#x27;</span>)</span><br></pre></td></tr></table></figure><p>需要输入的参数:  </p><blockquote><p><code>theme</code> 同上</p></blockquote><p>输出的结果储存在: <code>./result/主题名称/content分词结果</code>和<code>firstname分词结果</code>以及<code>./data/主题名称/主题-reviewscsv</code></p><h3 id="4-QA分词"><a href="#4-QA分词" class="headerlink" title="4 QA分词"></a>4 QA分词</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> AmzonSpider <span class="keyword">import</span> AmazonSpider</span><br><span class="line"><span class="keyword">from</span> CutWord <span class="keyword">import</span> cut_word</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题</span></span><br><span class="line">theme = <span class="string">&#x27;Your Theme&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 储存路径</span></span><br><span class="line">savepath = <span class="string">&#x27;./data/&#123;&#125;/&#x27;</span>.<span class="built_in">format</span>(theme)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(savepath):</span><br><span class="line">    os.makedirs(savepath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = AmazonSpider()</span><br><span class="line">a.star_browser()</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;./read/&#123;&#125;-asin.csv&#x27;</span>.<span class="built_in">format</span>(theme)</span><br><span class="line">df_asin = pd.read_csv(filename)</span><br><span class="line">df_asin[<span class="string">&#x27;check&#x27;</span>] = <span class="number">0</span></span><br><span class="line">df_asin2 = df_asin[df_asin[<span class="string">&#x27;check&#x27;</span>]!=<span class="number">1</span>]</span><br><span class="line">asins = df_asin2[<span class="string">&#x27;asin&#x27;</span>].tolist()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="built_in">len</span>(asins)),ncols=<span class="number">80</span>):</span><br><span class="line">    a.enter_page(<span class="string">&#x27;QA&#x27;</span>, asins[i])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a.qa(theme, savepath, asins[i])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    df_asin.loc[df_asin[<span class="string">&#x27;asin&#x27;</span>]==asins[i], <span class="string">&#x27;check&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    df_asin.to_csv(filename, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">a.browser.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cut_word(theme, <span class="string">&#x27;QA&#x27;</span>,[<span class="string">&#x27;asin&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;A&#x27;</span>], <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">cut_word(theme, <span class="string">&#x27;QA&#x27;</span>,[<span class="string">&#x27;asin&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;A&#x27;</span>], <span class="string">&#x27;A&#x27;</span>)</span><br></pre></td></tr></table></figure><p>需要输入的参数:  </p><blockquote><p><code>theme</code> 同上</p></blockquote><p>输出的结果存储在: <code>./result/主题名称/QA分词结果.csv</code>和<code>./data/主题名称/主题-QA.csv</code></p><h2 id="8-获取姓名年龄分布"><a href="#8-获取姓名年龄分布" class="headerlink" title="8.获取姓名年龄分布"></a>8.获取姓名年龄分布</h2><p>需要准备的文件: <code>./read/主题-name.csv</code>, 该文件需要从<code>firtname</code>分词(03获取评论+分词.py运行结果)中选出100个姓名并且标注好性别，可以使用<code>chatGPT</code>来执行,将csv中前150行复制到GPT中让它返回CSV即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">name_distribution</span>(<span class="params">name, male</span>):</span><br><span class="line">    </span><br><span class="line">    url = <span class="string">&#x27;https://randalolson.com/name-age-calculator/index.html?Gender=&#123;&#125;&amp;Name=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(male, name)</span><br><span class="line"></span><br><span class="line">    browser.get(url)</span><br><span class="line">    browser.delete_all_cookies()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;cookies.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        cookies = pickle.load(file)</span><br><span class="line">        <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies:</span><br><span class="line">            browser.add_cookie(cookie)</span><br><span class="line">    browser.refresh()   </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = browser.page_source</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">        <span class="keyword">if</span> male==<span class="string">&#x27;F&#x27;</span>:</span><br><span class="line">            male = <span class="string">&#x27;M&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            male=<span class="string">&#x27;F&#x27;</span></span><br><span class="line">        url = <span class="string">&#x27;https://randalolson.com/name-age-calculator/index.html?Gender=&#123;&#125;&amp;Name=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(male, name)</span><br><span class="line">        browser.get(url)</span><br><span class="line">        browser.delete_all_cookies()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;cookies.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            cookies = pickle.load(file)</span><br><span class="line">            <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies:</span><br><span class="line">                browser.add_cookie(cookie)</span><br><span class="line">        browser.refresh()</span><br><span class="line">        html = browser.page_source</span><br><span class="line">    </span><br><span class="line">    txt = re.findall(<span class="string">&#x27;was born around (.*?) old.&#x27;</span>, html)[<span class="number">0</span>]</span><br><span class="line">    media = re.findall(<span class="string">&#x27;(.*?) and&#x27;</span>, txt)[<span class="number">0</span>]</span><br><span class="line">    age = re.findall(<span class="string">&#x27;and ranges from (.*?) years&#x27;</span>, txt)[<span class="number">0</span>].replace(<span class="string">&#x27; to &#x27;</span>,<span class="string">&#x27;~&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  media, age, male</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_age</span>(<span class="params">theme</span>):</span><br><span class="line">    <span class="comment"># 获取计算机用户名</span></span><br><span class="line">    <span class="comment"># username = os.getlogin()</span></span><br><span class="line">    options = webdriver.ChromeOptions()</span><br><span class="line">    <span class="comment"># 设置用户目录 保持浏览器设置信息</span></span><br><span class="line">    <span class="comment"># userPath = &#x27;user-data-dir=C:/Users/&#123;&#125;/AppData/Local/Google/Chrome/User Data&#x27;.format(username)</span></span><br><span class="line">    <span class="comment"># options.add_argument(userPath)</span></span><br><span class="line">    <span class="keyword">global</span> browser</span><br><span class="line">    browser = webdriver.Chrome(options=options)</span><br><span class="line">    <span class="comment"># 窗口最大化</span></span><br><span class="line">    browser.maximize_window()</span><br><span class="line"></span><br><span class="line">    filename = <span class="string">&#x27;./read/&#123;&#125;-name.csv&#x27;</span>.<span class="built_in">format</span>(theme)</span><br><span class="line">    savepath = <span class="string">&#x27;./result/&#123;&#125;/用户年龄分布.csv&#x27;</span>.<span class="built_in">format</span>(theme)</span><br><span class="line"></span><br><span class="line">    df = pd.read_csv(filename)</span><br><span class="line">    df2 = df[df[<span class="string">&#x27;check&#x27;</span>]!=<span class="number">1</span>]</span><br><span class="line">    names = df2[<span class="string">&#x27;name&#x27;</span>].tolist()</span><br><span class="line">    males = df2[<span class="string">&#x27;male&#x27;</span>].tolist()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(names)):</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        name = names[i]</span><br><span class="line">        male = males[i]</span><br><span class="line">        result = name_distribution(name, male)</span><br><span class="line">        media = result[<span class="number">0</span>]</span><br><span class="line">        age = result[<span class="number">1</span>]</span><br><span class="line">        male = result[<span class="number">2</span>]</span><br><span class="line">        data = [name, male, media, age]</span><br><span class="line">        dataframe = pd.DataFrame([data])</span><br><span class="line">        </span><br><span class="line">        dataframe.to_csv(savepath, mode=<span class="string">&#x27;a&#x27;</span>, header=<span class="literal">False</span>, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line">        df.loc[df[<span class="string">&#x27;name&#x27;</span>]==name, <span class="string">&#x27;check&#x27;</span>]=<span class="number">1</span></span><br><span class="line">        df.to_csv(filename, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该步骤之前需要准备好XXX-name.csv文件,使用chatgpt标注性别</span></span><br><span class="line">get_age(theme=<span class="string">&#x27;Your Theme&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出的结果存储在: <code>./result/主题名称/用户画像分布.csv</code></p><h2 id="9-合并成报告"><a href="#9-合并成报告" class="headerlink" title="9.合并成报告"></a>9.合并成报告</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_files</span>(<span class="params">theme</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选取所需要的列 合并三份文件到一个excel中,</span></span><br><span class="line">    filepath1 = <span class="string">&#x27;./data/&#123;&#125;/&#x27;</span>.<span class="built_in">format</span>(theme)</span><br><span class="line">    filename1 = filepath1 + <span class="string">&#x27;&#123;&#125;-QA.csv&#x27;</span>.<span class="built_in">format</span>(theme)</span><br><span class="line">    filename2 = filepath1 + <span class="string">&#x27;&#123;&#125;-reviews.csv&#x27;</span>.<span class="built_in">format</span>(theme)</span><br><span class="line">    filename3 = filepath1 + <span class="string">&#x27;&#123;&#125;-title.csv&#x27;</span>.<span class="built_in">format</span>(theme)</span><br><span class="line"></span><br><span class="line">    filepath2 = <span class="string">&#x27;./result/&#123;&#125;/&#x27;</span>.<span class="built_in">format</span>(theme)</span><br><span class="line">    filename4 =  filepath2 + <span class="string">&#x27;用户年龄分布.csv&#x27;</span></span><br><span class="line">    filename10 = filepath2 + <span class="string">&#x27;firstname分词结果.csv&#x27;</span></span><br><span class="line"></span><br><span class="line">    df1 = pd.read_csv(filename1, names=[<span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;A&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    df2 = pd.read_csv(filename2, names=[<span class="string">&#x27;用户名&#x27;</span>, <span class="string">&#x27;评分&#x27;</span>, <span class="string">&#x27;购买日期&#x27;</span>, <span class="string">&#x27;款式&#x27;</span>, <span class="string">&#x27;评论标题&#x27;</span>, <span class="string">&#x27;评论内容&#x27;</span>])</span><br><span class="line">    df3 = pd.read_csv(filename3, names=[<span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;标题&#x27;</span>, <span class="string">&#x27;价格&#x27;</span>, <span class="string">&#x27;图片地址&#x27;</span>, <span class="string">&#x27;五点描述&#x27;</span>])</span><br><span class="line">    df4 = pd.read_csv(filename4, names=[<span class="string">&#x27;姓名&#x27;</span>,<span class="string">&#x27;性别&#x27;</span>,<span class="string">&#x27;中位数&#x27;</span>,<span class="string">&#x27;年龄范围&#x27;</span>])</span><br><span class="line">    df10 = pd.read_csv(filename10, names=[<span class="string">&#x27;word&#x27;</span>,<span class="string">&#x27;times&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    filename5 =  filepath2 + <span class="string">&#x27;Q分词结果.csv&#x27;</span></span><br><span class="line">    filename6 =  filepath2 + <span class="string">&#x27;A分词结果.csv&#x27;</span></span><br><span class="line">    filename7 =  filepath2 + <span class="string">&#x27;title分词结果.csv&#x27;</span></span><br><span class="line">    filename8 =  filepath2 + <span class="string">&#x27;fivepoint分词结果.csv&#x27;</span></span><br><span class="line">    filename9 =  filepath2 + <span class="string">&#x27;content分词结果.csv&#x27;</span></span><br><span class="line">    </span><br><span class="line">    df5 = pd.read_csv(filename5)</span><br><span class="line">    df6 = pd.read_csv(filename6)</span><br><span class="line">    df7 = pd.read_csv(filename7)</span><br><span class="line">    df8 = pd.read_csv(filename8)</span><br><span class="line">    df9 = pd.read_csv(filename9)</span><br><span class="line"></span><br><span class="line">    df5 = df5.rename(columns=&#123;<span class="string">&#x27;word&#x27;</span>: <span class="string">&#x27;Q_word&#x27;</span>, <span class="string">&#x27;times&#x27;</span>: <span class="string">&#x27;Q_count&#x27;</span>&#125;)</span><br><span class="line">    df6 = df6.rename(columns=&#123;<span class="string">&#x27;word&#x27;</span>: <span class="string">&#x27;A_word&#x27;</span>, <span class="string">&#x27;times&#x27;</span>: <span class="string">&#x27;A_count&#x27;</span>&#125;)</span><br><span class="line">    df7 = dfrename(columns=&#123;<span class="string">&#x27;word&#x27;</span>: <span class="string">&#x27;Title_word&#x27;</span>, <span class="string">&#x27;times&#x27;</span>: <span class="string">&#x27;Title_count&#x27;</span>&#125;)</span><br><span class="line">    df8 = df8.rename(columns=&#123;<span class="string">&#x27;word&#x27;</span>: <span class="string">&#x27;Fivepoint_word&#x27;</span>, <span class="string">&#x27;times&#x27;</span>: <span class="string">&#x27;Fivepoint_count&#x27;</span>&#125;)</span><br><span class="line">    df9 = df9.rename(columns=&#123;<span class="string">&#x27;word&#x27;</span>: <span class="string">&#x27;Reviews_word&#x27;</span>, <span class="string">&#x27;times&#x27;</span>: <span class="string">&#x27;Reviews_count&#x27;</span>&#125;)</span><br><span class="line">   </span><br><span class="line">    cutword_df = pd.concat([df5, df6, df7, df8, df9],axis=<span class="number">1</span>)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    savename = <span class="string">&#x27;./&#x27;</span> + theme + <span class="string">&#x27;-用户画像报告.xlsx&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> pd.ExcelWriter(savename) <span class="keyword">as</span> writer:</span><br><span class="line">        </span><br><span class="line">        cutword_df.to_excel(writer, sheet_name=<span class="string">&#x27;分词&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        df1.to_excel(writer, sheet_name=<span class="string">&#x27;QA原始数据&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line">        df2.to_excel(writer, sheet_name=<span class="string">&#x27;评论原始数据&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line">        df3.to_excel(writer, sheet_name=<span class="string">&#x27;标题原始数据&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line">        df4.to_excel(writer, sheet_name=<span class="string">&#x27;用户年龄分布&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line">        df10.to_excel(writer, sheet_name=<span class="string">&#x27;姓名分词统计&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">theme = <span class="string">&#x27;Your Theme&#x27;</span></span><br><span class="line">merge_files(theme)</span><br></pre></td></tr></table></figure><p>输出的结果存储在: <code>./主题名称-用户画像报告.csv</code>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用selenium等工具类，在亚马逊平台上爬去商品信息和用户信息，并进行数据分析和分词统计，最后生成用户画像报告。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;亚马逊平台访问需要代理访问！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;github仓库&lt;/code&gt;: &lt;a href=&quot;</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="Python" scheme="http://xujunliang666.com/tags/Python/"/>
    
    <category term="Selenium" scheme="http://xujunliang666.com/tags/Selenium/"/>
    
    <category term="自动化测试" scheme="http://xujunliang666.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="爬虫" scheme="http://xujunliang666.com/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="数据分析" scheme="http://xujunliang666.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="可视化" scheme="http://xujunliang666.com/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>使用Python Turtle绘制冰墩墩</title>
    <link href="http://xujunliang666.com/School/Turtle-Bingdundun/"/>
    <id>http://xujunliang666.com/School/Turtle-Bingdundun/</id>
    <published>2022-02-05T16:00:00.000Z</published>
    <updated>2022-02-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>冰墩墩是2022年北京冬奥会的吉祥物，确实好玩！</p><p>废话不多说，直接开画！</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">screen = turtle.Screen()</span><br><span class="line">turtle.title(<span class="string">&#x27;Python（冰墩墩）&#x27;</span>)  <span class="comment"># 可以自己修改名称</span></span><br><span class="line">turtle.speed(<span class="number">10</span>)  <span class="comment"># 可以自己调节速度</span></span><br><span class="line"><span class="comment"># 左手</span></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(<span class="number">177</span>, <span class="number">112</span>)</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;lightgray&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.pensize(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">45</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">300</span>, <span class="number">23</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 左手内</span></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(<span class="number">182</span>, <span class="number">95</span>)</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.pensize(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">95</span>)</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">37</span>, <span class="number">160</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">20</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">200</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 轮廓</span></span><br><span class="line"><span class="comment"># 头顶</span></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(-<span class="number">73</span>, <span class="number">230</span>)</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;lightgray&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.pensize(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">250</span>, <span class="number">35</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 左耳</span></span><br><span class="line">turtle.setheading(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">42</span>, <span class="number">180</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 左侧</span></span><br><span class="line">turtle.setheading(-<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">190</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">320</span>, <span class="number">45</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 左腿</span></span><br><span class="line">turtle.circle(<span class="number">120</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">200</span>, <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">18</span>, <span class="number">85</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">180</span>, <span class="number">23</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">20</span>, <span class="number">110</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">15</span>, <span class="number">115</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">100</span>, <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 右腿</span></span><br><span class="line">turtle.circle(<span class="number">15</span>, <span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">15</span>, <span class="number">110</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">150</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">15</span>, <span class="number">70</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">150</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">200</span>, <span class="number">35</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">150</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 右手</span></span><br><span class="line">turtle.setheading(-<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">50</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">35</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">300</span>, <span class="number">23</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 右侧</span></span><br><span class="line">turtle.setheading(<span class="number">86</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">300</span>, <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 右耳</span></span><br><span class="line">turtle.setheading(<span class="number">122</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">53</span>, <span class="number">160</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 右耳内</span></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(-<span class="number">130</span>, <span class="number">180</span>)</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.pensize(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">28</span>, <span class="number">160</span>)</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">210</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">150</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 左耳内</span></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(<span class="number">90</span>, <span class="number">230</span>)</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">30</span>, <span class="number">170</span>)</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">125</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">150</span>, <span class="number">23</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 右手内</span></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(-<span class="number">180</span>, -<span class="number">55</span>)</span><br><span class="line"></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.setheading(-<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">50</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">27</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">300</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">turtle.setheading(-<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">300</span>, <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 左腿内</span></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(<span class="number">108</span>, -<span class="number">168</span>)</span><br><span class="line"></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(-<span class="number">115</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">110</span>, <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">200</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">18</span>, <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">180</span>, <span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">20</span>, <span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">15</span>, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">200</span>, <span class="number">29</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 右腿内</span></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(-<span class="number">38</span>, -<span class="number">210</span>)</span><br><span class="line"></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(-<span class="number">155</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">15</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">10</span>, <span class="number">110</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">100</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">15</span>, <span class="number">65</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">100</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">200</span>, <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">turtle.setheading(-<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">200</span>, <span class="number">27</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 右眼</span></span><br><span class="line"><span class="comment"># 眼圈</span></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(-<span class="number">64</span>, <span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">35</span>, <span class="number">152</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">100</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">35</span>, <span class="number">130</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">100</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 眼珠</span></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(-<span class="number">47</span>, <span class="number">55</span>)</span><br><span class="line"></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">25</span>, <span class="number">360</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(-<span class="number">45</span>, <span class="number">62</span>)</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;darkslategray&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;darkslategray&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">19</span>, <span class="number">360</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(-<span class="number">45</span>, <span class="number">68</span>)</span><br><span class="line"></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">10</span>, <span class="number">360</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(-<span class="number">47</span>, <span class="number">86</span>)</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">5</span>, <span class="number">360</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 左眼</span></span><br><span class="line"><span class="comment"># 眼圈</span></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(<span class="number">51</span>, <span class="number">82</span>)</span><br><span class="line"></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">32</span>, <span class="number">152</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">100</span>, <span class="number">55</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">25</span>, <span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">120</span>, <span class="number">45</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 眼珠</span></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(<span class="number">79</span>, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">24</span>, <span class="number">360</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(<span class="number">79</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;darkslategray&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;darkslategray&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">19</span>, <span class="number">360</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(<span class="number">79</span>, <span class="number">70</span>)</span><br><span class="line"></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">10</span>, <span class="number">360</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(<span class="number">79</span>, <span class="number">88</span>)</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">5</span>, <span class="number">360</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼻子</span></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(<span class="number">37</span>, <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">8</span>, <span class="number">130</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">22</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">8</span>, <span class="number">130</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嘴</span></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(-<span class="number">15</span>, <span class="number">48</span>)</span><br><span class="line"></span><br><span class="line">turtle.setheading(-<span class="number">36</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">60</span>, <span class="number">70</span>)</span><br><span class="line"></span><br><span class="line">turtle.setheading(-<span class="number">132</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">45</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 彩虹圈</span></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(-<span class="number">135</span>, <span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">turtle.pensize(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;cyan&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">165</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">130</span>, <span class="number">78</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">250</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">138</span>, <span class="number">105</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(-<span class="number">131</span>, <span class="number">116</span>)</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;slateblue&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">160</span>, <span class="number">144</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">120</span>, <span class="number">78</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">242</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">135</span>, <span class="number">105</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(-<span class="number">127</span>, <span class="number">112</span>)</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;orangered&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">155</span>, <span class="number">136</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">116</span>, <span class="number">86</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">220</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">134</span>, <span class="number">103</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(-<span class="number">123</span>, <span class="number">108</span>)</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;gold&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">150</span>, <span class="number">136</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">104</span>, <span class="number">86</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">220</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">126</span>, <span class="number">102</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(-<span class="number">120</span>, <span class="number">104</span>)</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;greenyellow&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">145</span>, <span class="number">136</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">90</span>, <span class="number">83</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">220</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">120</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爱心</span></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(<span class="number">220</span>, <span class="number">115</span>)</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;brown&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.pensize(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;brown&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">36</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">8</span>, <span class="number">180</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">60</span>, <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">turtle.setheading(<span class="number">110</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">60</span>, <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(-<span class="number">8</span>, <span class="number">180</span>)</span><br><span class="line"></span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 五环</span></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(-<span class="number">5</span>, -<span class="number">170</span>)</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;blue&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(<span class="number">10</span>, -<span class="number">170</span>)</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(<span class="number">25</span>, -<span class="number">170</span>)</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;brown&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(<span class="number">2</span>, -<span class="number">175</span>)</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;lightgoldenrod&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.goto(<span class="number">16</span>, -<span class="number">175</span>)</span><br><span class="line"></span><br><span class="line">turtle.pendown()</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;green&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.pencolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line"></span><br><span class="line">turtle.goto(-<span class="number">16</span>, -<span class="number">160</span>)</span><br><span class="line"></span><br><span class="line">turtle.write(<span class="string">&quot;BEIJING 2022&quot;</span>, font=(<span class="string">&#x27;Arial&#x27;</span>, <span class="number">10</span>, <span class="string">&#x27;bold italic&#x27;</span>))</span><br><span class="line"></span><br><span class="line">turtle.hideturtle()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)  <span class="comment"># 页面停留时间</span></span><br><span class="line"></span><br><span class="line">screen.bye()  <span class="comment"># 关闭页面</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行代码后，将会在屏幕上绘制一个冰墩墩的图案。</p><div class="video"><video controls preload><source src="https://images.kimbleex.top/BlogIMG/Turtle_Bingdundun/BingDunDun.mp4" type="video/mp4">Your browser does not support the video tag.</video></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;冰墩墩是2022年北京冬奥会的吉祥物，确实好玩！&lt;/p&gt;
&lt;p&gt;废话不多说，直接开画！&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;spa</summary>
      
    
    
    
    <category term="School" scheme="http://xujunliang666.com/categories/School/"/>
    
    
    <category term="Python" scheme="http://xujunliang666.com/tags/Python/"/>
    
    <category term="Turtle" scheme="http://xujunliang666.com/tags/Turtle/"/>
    
  </entry>
  
  <entry>
    <title>Git 维基百科！</title>
    <link href="http://xujunliang666.com/Programming/Git-Usage/"/>
    <id>http://xujunliang666.com/Programming/Git-Usage/</id>
    <published>2021-10-24T16:00:00.000Z</published>
    <updated>2021-10-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>时维七月，序属二夏。</p><p>最近要系统的用到github，大学里看它的时候也是走马观花，现如今书到用时方恨少。于是，在一个<a href="https://github.com/miaobuao">老前端</a>两天的帮助下，我对github的了解也是得到了一些提升。现在系统的将github用法做一个汇总，以方便后续的学习。</p><p><strong>此篇博客默认已经安装好<code>Git</code>工具并配置好系统环境</strong></p><h3 id="1-最先的配置操作"><a href="#1-最先的配置操作" class="headerlink" title="1. 最先的配置操作"></a>1. 最先的配置操作</h3><p>安装好<code>git</code>后，首先需要配置<code>git</code>的用户名和邮箱，这样在提交代码时，就可以显示出提交者的信息。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;Your Email&quot;</span></span><br></pre></td></tr></table></figure><p>我在公司使用的电脑是有配置<code>proxy</code>的，访问<code>Github</code>会比较缓慢，可以取消代理配置。没有代理可以忽略。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h3 id="一次完整的克隆和上传"><a href="#一次完整的克隆和上传" class="headerlink" title="一次完整的克隆和上传"></a>一次完整的克隆和上传</h3><h4 id="1-首先进入到工作目录，在工作目录中初始化git"><a href="#1-首先进入到工作目录，在工作目录中初始化git" class="headerlink" title="1 首先进入到工作目录，在工作目录中初始化git"></a>1 首先进入到工作目录，在工作目录中初始化git</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h4 id="2-克隆仓库到本地"><a href="#2-克隆仓库到本地" class="headerlink" title="2 克隆仓库到本地"></a>2 克隆仓库到本地</h4><p>首先你需要去<code>github.com</code>找到自己需要克隆的仓库链接。以我的仓库为例。github提供<code>HTTPS</code>和<code>SSH</code>以及<code>Github CIL</code>三种连接方式，平时主要采用<code>HTTPS</code>和<code>SSH</code>两种方式。推荐使用<code>SSH</code>方式，使用下来会更加稳定快速。</p><p><img src="https://images.kimbleex.top/BlogIMG/Git_Commands/get-github-links.avif" alt="获取github仓库链接"></p><p>链接复制完成后，打开<code>Windows PowerShell</code>或者<code>Git Bash</code>，进入到本地工作目录中，输入以下指令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:kimbleex/kimbleex.git</span><br></pre></td></tr></table></figure><h4 id="3-为本地仓库添加远程仓库"><a href="#3-为本地仓库添加远程仓库" class="headerlink" title="3 为本地仓库添加远程仓库"></a>3 为本地仓库添加远程仓库</h4><p>需要给本地仓库添加一个远程github目标仓库链接，以将本地仓库内容提交到目标仓库中。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加一个名为repositoryName的远程仓库</span></span><br><span class="line">git remote add repositoryName repositoryLink</span><br></pre></td></tr></table></figure><h4 id="4-上传本地代码到github仓库"><a href="#4-上传本地代码到github仓库" class="headerlink" title="4 上传本地代码到github仓库"></a>4 上传本地代码到github仓库</h4><p>要提交到github仓库，首先要了解它的工作原理。</p><p>git为了保证代码的原子性(即可以很容易的回滚到任何阶段的代码状态)，发明了一个叫做暂存区的概念。我们在提交代码之前可以将所有的修改都保存到暂存区中，这样我们可以通过一些指令精细的挑选出我们需要提交的修改。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将名为FileName的文件上传到暂存区中</span></span><br><span class="line">git add FileName </span><br><span class="line"><span class="comment"># 将目录下所有文件上传到暂存区中</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将暂存区中的修改提交到github仓库</span></span><br><span class="line"><span class="comment"># -m表示msg，后面的信息为提交的备注信息，可以为空</span></span><br><span class="line">git commit -m <span class="string">&quot;Your Commit Message&quot;</span></span><br><span class="line"><span class="comment"># 如果有反复修改，可以合并提交</span></span><br><span class="line">git commit --amend -m <span class="string">&quot;Your Commit Message&quot;</span></span><br></pre></td></tr></table></figure><p>这样，我们就完成了一次完整的克隆和上传。</p><p>在<code>commit</code>之后，我们就可以同步更新github仓库了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认更新github仓库的master分支</span></span><br><span class="line">git push repositoryName master</span><br></pre></td></tr></table></figure><p>执行完成后，进入<code>github.com</code>，刷新一下仓库页面，即可看到仓库的代码更新和<code>commit</code>时输入的<code>msg</code>。</p><h3 id="3-仓库的同步"><a href="#3-仓库的同步" class="headerlink" title="3. 仓库的同步"></a>3. 仓库的同步</h3><p>我们可能不止在一个本地段操作同一个github仓库。比如我在公司更新我保存个人博客源码的github仓库，我回家后也需要操作，但是我家里本地的仓库就是滞后的，并不是最新的，这样我们就需要更新我家里电脑的本地仓库。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉去远端github仓库</span></span><br><span class="line">git fetch </span><br><span class="line"></span><br><span class="line"><span class="comment"># 用远端github仓库覆盖更新本地仓库(3小节中使用remote绑定的名为repositoryName的远程仓库)</span></span><br><span class="line">git merge repositoryName/master </span><br></pre></td></tr></table></figure><p>我们可以使用以下指令合并上述的两个操作。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull repositoryName master</span><br></pre></td></tr></table></figure><p>恭喜你，你已经学会了最基本的<code>git</code>指令。</p><h3 id="4-踩坑实记"><a href="#4-踩坑实记" class="headerlink" title="4. 踩坑实记"></a>4. 踩坑实记</h3><p>正当我沾沾自喜的以为自己已经如入无人之境的时候，我的仓库某个目录下的文件push失败了，我又去找了老前端，原因是该目录下我clone了别人的仓库，但是没有将别人仓库下的<code>.git</code>文件删除，并且在后续删除.git之前我就已经<code>git add</code>过了，导致最后<code>commit</code>的时候显示nothing changed，他直接甩给我一行指令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># directory为目录名</span></span><br><span class="line">git submodule deinit directory</span><br></pre></td></tr></table></figure><p>查阅后发现时说是取消注册，但是实践下来并没有啥作用，后续尝试过使用<code>git rm</code>指令，<strong>千万不要使用，使用后会将本地仓库的目录和远端github仓库的目录全部删除</strong>，血淋淋的踩坑。</p><h3 id="5-其他指令-并不常用，仅做些许列举"><a href="#5-其他指令-并不常用，仅做些许列举" class="headerlink" title="5. 其他指令(并不常用，仅做些许列举)"></a>5. 其他指令(并不常用，仅做些许列举)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 展示提交日志</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"><span class="comment"># 显示已存在的分支tag</span></span><br><span class="line">git tag</span><br><span class="line"><span class="comment"># 展示未add到暂存区的修改</span></span><br><span class="line">git diff</span><br><span class="line"><span class="comment"># 比较远端github仓库已有的修改但是本地没有的</span></span><br><span class="line">git diff repositoryName/master..master</span><br><span class="line"><span class="comment"># 展示提交历史对应的修改</span></span><br><span class="line">git whatchanged</span><br><span class="line"><span class="comment"># 搜索文件中的文本内容</span></span><br><span class="line">git grep <span class="string">&quot;Search Content&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;时维七月，序属二夏。&lt;/p&gt;
&lt;p&gt;最近要系统的用到github，大学里看它的时候也是走马观花，现如今书到用时方恨少。于是，在一个&lt;a href=&quot;https://github.com/miaobuao&quot;&gt;老前端&lt;/a&gt;两天的帮助下，我对github的了解也是得到了一些提升</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="Git" scheme="http://xujunliang666.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Python手写肘部法则确定Kmeans聚类算法中的K值</title>
    <link href="http://xujunliang666.com/Programming/K-Means-Elbow/"/>
    <id>http://xujunliang666.com/Programming/K-Means-Elbow/</id>
    <published>2021-10-14T16:00:00.000Z</published>
    <updated>2021-10-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>上次手写了<code>Kmeans</code>算法，但是关于分类数目<code>K</code>的取值，只是固定了两类，这次就手写一下<code>Kmeans</code>算法中<code>K</code>值的确定方法——肘部法则。</p><p>介绍一个词<code>WCSS</code>: <code>WCSS</code>是衡量聚类结果紧密程度的指标，表示每个样本点与其所属簇中心的距离平方和，简言之，就是样本类里面每个点到中心点的距离的平方，然后全部相加。</p><h2 id="肘部法的详细步骤"><a href="#肘部法的详细步骤" class="headerlink" title="肘部法的详细步骤"></a>肘部法的详细步骤</h2><ul><li><p>确定K值范围<br>选择一个合理的<code>K</code>值范围，一般从1开始，逐步增加，直到达到一个预设的最大<code>K</code>值(例如，<code>K=10</code>)。</p></li><li><p>计算不同<code>K</code>值下的<code>WCSS</code><br>对于每一个K值，执行以下步骤：</p></li><li><p>运行<code>K</code>均值算法：将数据集划分为K个簇。<br>计算<code>WCSS</code>：计算簇内误差平方和，即所有样本点到其所属簇中心的距离平方和。</p></li><li><p>绘制肘部图<br>在图中，横轴表示簇的数量<code>K</code>，纵轴表示对应的<code>WCSS</code>值。绘制<code>K</code>值与<code>WCSS</code>的关系曲线。</p></li><li><p>识别“肘部”位置<br>观察曲线中<code>WCSS</code>下降速度显著减缓的位置，即曲线出现“肘部”的点。该<code>K</code>值被认为是最佳的聚类数。</p></li></ul><h2 id="Python代码实现"><a href="#Python代码实现" class="headerlink" title="Python代码实现"></a>Python代码实现</h2><p>沿用之前手写的<code>Kmeans</code>算法，这次我们只需要在<code>Kmeans</code>算法的基础上，增加计算<code>WCSS</code>和绘图流程即可即可。并且增加了一些数据。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 一些数据点</span></span><br><span class="line">data = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">4</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">0</span>], [<span class="number">1</span>,<span class="number">6</span>], [<span class="number">5</span>,<span class="number">6</span>], [<span class="number">9</span>,<span class="number">9</span>], [<span class="number">2</span>,<span class="number">7</span>], [<span class="number">3</span>,<span class="number">3</span>], [<span class="number">6</span>,<span class="number">4</span>], [<span class="number">2</span>,<span class="number">5</span>], [<span class="number">3</span>,<span class="number">5</span>], [<span class="number">4</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">5</span>]]</span><br><span class="line"><span class="comment"># K的取值范围</span></span><br><span class="line">K = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">WCSS = [] <span class="comment"># 存放各个K对应的WCSS</span></span><br><span class="line"><span class="comment"># 遍历K值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> K:</span><br><span class="line">    index_list = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>: <span class="comment"># 随机选择中心点，但不能重复</span></span><br><span class="line">            index_ = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(data)-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> index_ <span class="keyword">in</span> index_list:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                index_list.append(index_)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    centerPoint = [data[x] <span class="keyword">for</span> x <span class="keyword">in</span> index_list] <span class="comment"># 确定各个k值的中心点</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;center: &quot;</span>, centerPoint)</span><br><span class="line">    <span class="comment"># 确定每个点在K值下的分类</span></span><br><span class="line">    cate_data = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        distance = []</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> centerPoint:</span><br><span class="line">            distance.append(((y[<span class="number">0</span>]-data[z][<span class="number">0</span>])**<span class="number">2</span> + (y[<span class="number">1</span>]-data[z][<span class="number">1</span>])**<span class="number">2</span>) ** <span class="number">0.5</span>)</span><br><span class="line">        cate_data[<span class="string">f&quot;<span class="subst">&#123;data[z]&#125;</span>&quot;</span>] = distance.index(<span class="built_in">min</span>(distance))     </span><br><span class="line">    <span class="built_in">print</span>(cate_data)</span><br><span class="line">    <span class="comment"># 计算每个K值对应的WCSS</span></span><br><span class="line">    wcss_list = []</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">        points = [<span class="built_in">eval</span>(key) <span class="keyword">for</span> key <span class="keyword">in</span> cate_data.keys() <span class="keyword">if</span> cate_data[key] == p]</span><br><span class="line">        wcss_list.append(<span class="built_in">sum</span>([((points[n][<span class="number">0</span>]-centerPoint[p][<span class="number">0</span>])**<span class="number">2</span> + (points[n][<span class="number">1</span>]-centerPoint[p][<span class="number">1</span>])**<span class="number">2</span>) ** <span class="number">0.5</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(points))]))</span><br><span class="line">    WCSS.append(<span class="built_in">sum</span>(wcss_list))</span><br><span class="line"><span class="built_in">print</span>(WCSS)</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">center:  [[6, 4]]</span><br><span class="line">&#123;&#x27;[1, 2]&#x27;: 0, &#x27;[1, 4]&#x27;: 0, &#x27;[1, 0]&#x27;: 0, &#x27;[4, 2]&#x27;: 0, &#x27;[4, 4]&#x27;: 0, &#x27;[4, 0]&#x27;: 0, &#x27;[1, 6]&#x27;: 0, &#x27;[5, 6]&#x27;: 0, &#x27;[9, 9]&#x27;: 0, &#x27;[2, 7]&#x27;: 0, &#x27;[3, 3]&#x27;: 0, &#x27;[6, 4]&#x27;: 0, &#x27;[2, 5]&#x27;: 0, &#x27;[3, 5]&#x27;: 0, &#x27;[4, 5]&#x27;: 0, &#x27;[5, 5]&#x27;: 0&#125;</span><br><span class="line"></span><br><span class="line">center:  [[2, 7], [4, 5]]</span><br><span class="line">&#123;&#x27;[1, 2]&#x27;: 1, &#x27;[1, 4]&#x27;: 0, &#x27;[1, 0]&#x27;: 1, &#x27;[4, 2]&#x27;: 1, &#x27;[4, 4]&#x27;: 1, &#x27;[4, 0]&#x27;: 1, &#x27;[1, 6]&#x27;: 0, &#x27;[5, 6]&#x27;: 1, &#x27;[9, 9]&#x27;: 1, &#x27;[2, 7]&#x27;: 0, &#x27;[3, 3]&#x27;: 1, &#x27;[6, 4]&#x27;: 1, &#x27;[2, 5]&#x27;: 0, &#x27;[3, 5]&#x27;: 1, &#x27;[4, 5]&#x27;: 1, &#x27;[5, 5]&#x27;: 1&#125;</span><br><span class="line"></span><br><span class="line">center:  [[3, 5], [5, 5], [3, 3]]</span><br><span class="line">&#123;&#x27;[1, 2]&#x27;: 2, &#x27;[1, 4]&#x27;: 0, &#x27;[1, 0]&#x27;: 2, &#x27;[4, 2]&#x27;: 2, &#x27;[4, 4]&#x27;: 0, &#x27;[4, 0]&#x27;: 2, &#x27;[1, 6]&#x27;: 0, &#x27;[5, 6]&#x27;: 1, &#x27;[9, 9]&#x27;: 1, &#x27;[2, 7]&#x27;: 0, &#x27;[3, 3]&#x27;: 2, &#x27;[6, 4]&#x27;: 1, &#x27;[2, 5]&#x27;: 0, &#x27;[3, 5]&#x27;: 0, &#x27;[4, 5]&#x27;: 0, &#x27;[5, 5]&#x27;: 1&#125;</span><br><span class="line"></span><br><span class="line">center:  [[4, 2], [1, 0], [1, 4], [3, 5]]</span><br><span class="line">&#123;&#x27;[1, 2]&#x27;: 1, &#x27;[1, 4]&#x27;: 2, &#x27;[1, 0]&#x27;: 1, &#x27;[4, 2]&#x27;: 0, &#x27;[4, 4]&#x27;: 3, &#x27;[4, 0]&#x27;: 0, &#x27;[1, 6]&#x27;: 2, &#x27;[5, 6]&#x27;: 3, &#x27;[9, 9]&#x27;: 3, &#x27;[2, 7]&#x27;: 3, &#x27;[3, 3]&#x27;: 0, &#x27;[6, 4]&#x27;: 0, &#x27;[2, 5]&#x27;: 3, &#x27;[3, 5]&#x27;: 3, &#x27;[4, 5]&#x27;: 3, &#x27;[5, 5]&#x27;: 3&#125;</span><br><span class="line"></span><br><span class="line">center:  [[5, 6], [4, 0], [1, 0], [3, 3], [6, 4]]</span><br><span class="line">&#123;&#x27;[1, 2]&#x27;: 2, &#x27;[1, 4]&#x27;: 3, &#x27;[1, 0]&#x27;: 2, &#x27;[4, 2]&#x27;: 3, &#x27;[4, 4]&#x27;: 3, &#x27;[4, 0]&#x27;: 1, &#x27;[1, 6]&#x27;: 3, &#x27;[5, 6]&#x27;: 0, &#x27;[9, 9]&#x27;: 0, &#x27;[2, 7]&#x27;: 0, &#x27;[3, 3]&#x27;: 3, &#x27;[6, 4]&#x27;: 4, &#x27;[2, 5]&#x27;: 3, &#x27;[3, 5]&#x27;: 3, &#x27;[4, 5]&#x27;: 0, &#x27;[5, 5]&#x27;: 0&#125;</span><br><span class="line"></span><br><span class="line">center:  [[4, 5], [5, 6], [5, 5], [6, 4], [2, 5], [1, 0]]</span><br><span class="line">&#123;&#x27;[1, 2]&#x27;: 5, &#x27;[1, 4]&#x27;: 4, &#x27;[1, 0]&#x27;: 5, &#x27;[4, 2]&#x27;: 3, &#x27;[4, 4]&#x27;: 0, &#x27;[4, 0]&#x27;: 5, &#x27;[1, 6]&#x27;: 4, &#x27;[5, 6]&#x27;: 1, &#x27;[9, 9]&#x27;: 1, &#x27;[2, 7]&#x27;: 4, &#x27;[3, 3]&#x27;: 0, &#x27;[6, 4]&#x27;: 3, &#x27;[2, 5]&#x27;: 4, &#x27;[3, 5]&#x27;: 0, &#x27;[4, 5]&#x27;: 0, &#x27;[5, 5]&#x27;: 2&#125;</span><br><span class="line"></span><br><span class="line">center:  [[1, 4], [3, 3], [4, 4], [6, 4], [2, 7], [1, 2], [3, 5]]</span><br><span class="line">&#123;&#x27;[1, 2]&#x27;: 5, &#x27;[1, 4]&#x27;: 0, &#x27;[1, 0]&#x27;: 5, &#x27;[4, 2]&#x27;: 1, &#x27;[4, 4]&#x27;: 2, &#x27;[4, 0]&#x27;: 1, &#x27;[1, 6]&#x27;: 4, &#x27;[5, 6]&#x27;: 2, &#x27;[9, 9]&#x27;: 3, &#x27;[2, 7]&#x27;: 4, &#x27;[3, 3]&#x27;: 1, &#x27;[6, 4]&#x27;: 3, &#x27;[2, 5]&#x27;: 6, &#x27;[3, 5]&#x27;: 6, &#x27;[4, 5]&#x27;: 2, &#x27;[5, 5]&#x27;: 2&#125;</span><br><span class="line"></span><br><span class="line">center:  [[4, 0], [4, 5], [6, 4], [4, 4], [9, 9], [3, 3], [1, 4], [1, 2]]</span><br><span class="line">&#123;&#x27;[1, 2]&#x27;: 7, &#x27;[1, 4]&#x27;: 6, &#x27;[1, 0]&#x27;: 7, &#x27;[4, 2]&#x27;: 5, &#x27;[4, 4]&#x27;: 3, &#x27;[4, 0]&#x27;: 0, &#x27;[1, 6]&#x27;: 6, &#x27;[5, 6]&#x27;: 1, &#x27;[9, 9]&#x27;: 4, &#x27;[2, 7]&#x27;: 1, &#x27;[3, 3]&#x27;: 5, &#x27;[6, 4]&#x27;: 2, &#x27;[2, 5]&#x27;: 6, &#x27;[3, 5]&#x27;: 1, &#x27;[4, 5]&#x27;: 1, &#x27;[5, 5]&#x27;: 1&#125;</span><br><span class="line"></span><br><span class="line">center:  [[3, 3], [9, 9], [5, 5], [3, 5], [1, 4], [4, 5], [4, 0], [1, 0], [6, 4]]</span><br><span class="line">&#123;&#x27;[1, 2]&#x27;: 4, &#x27;[1, 4]&#x27;: 4, &#x27;[1, 0]&#x27;: 7, &#x27;[4, 2]&#x27;: 0, &#x27;[4, 4]&#x27;: 5, &#x27;[4, 0]&#x27;: 6, &#x27;[1, 6]&#x27;: 4, &#x27;[5, 6]&#x27;: 2, &#x27;[9, 9]&#x27;: 1, &#x27;[2, 7]&#x27;: 3, &#x27;[3, 3]&#x27;: 0, &#x27;[6, 4]&#x27;: 8, &#x27;[2, 5]&#x27;: 3, &#x27;[3, 5]&#x27;: 3, &#x27;[4, 5]&#x27;: 5, &#x27;[5, 5]&#x27;: 2&#125;</span><br><span class="line"></span><br><span class="line">[58.638979289620025, 39.93955755931159, 28.611595782243192, 27.34009275541994, 25.482605577751237, 21.89292222699217, 19.471938219632754, 13.071067811865476, 10.650281539872886]</span><br></pre></td></tr></table></figure><p>可以看到每个数据点都有了自己的分类，并且最后的<code>WCSS</code>也有对应所有<code>K</code>的值。</p><p>下面我们可以通过绘图来观察<code>WCSS</code>的变化情况，从而确定最佳的<code>K</code>值。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">5</span>))</span><br><span class="line">plt.plot(K, WCSS, <span class="string">&#x27;bo-&#x27;</span>, markersize=<span class="number">8</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;K&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;WCSS&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Elbow Method =&gt; K&#x27;</span>)</span><br><span class="line">plt.xticks(K)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>运行上述代码，可以得到如下的图像:<br><img src="https://images.kimbleex.top/BlogIMG/Kmeans-Elbow/WCSS.avif" alt="Kmeans肘部法则确定K值"></p><p>可以看出<code>K</code>在4或者5这个点附近有一个明显的拐点，因此我们可以认为最佳的<code>K</code>值为4或者5。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">4</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">0</span>], [<span class="number">1</span>,<span class="number">6</span>], [<span class="number">5</span>,<span class="number">6</span>], [<span class="number">9</span>,<span class="number">9</span>], [<span class="number">2</span>,<span class="number">7</span>], [<span class="number">3</span>,<span class="number">3</span>], [<span class="number">6</span>,<span class="number">4</span>], [<span class="number">2</span>,<span class="number">5</span>], [<span class="number">3</span>,<span class="number">5</span>], [<span class="number">4</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">5</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">K = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">WCSS = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> K:</span><br><span class="line">    index_list = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            index_ = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(data)-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> index_ <span class="keyword">in</span> index_list:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                index_list.append(index_)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    centerPoint = [data[x] <span class="keyword">for</span> x <span class="keyword">in</span> index_list]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;center: &quot;</span>, centerPoint)</span><br><span class="line"></span><br><span class="line">    cate_data = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        distance = []</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> centerPoint:</span><br><span class="line">            distance.append(((y[<span class="number">0</span>]-data[z][<span class="number">0</span>])**<span class="number">2</span> + (y[<span class="number">1</span>]-data[z][<span class="number">1</span>])**<span class="number">2</span>) ** <span class="number">0.5</span>)</span><br><span class="line">        cate_data[<span class="string">f&quot;<span class="subst">&#123;data[z]&#125;</span>&quot;</span>] = distance.index(<span class="built_in">min</span>(distance))     </span><br><span class="line">    <span class="built_in">print</span>(cate_data)</span><br><span class="line">    </span><br><span class="line">    wcss_list = []</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">        points = [<span class="built_in">eval</span>(key) <span class="keyword">for</span> key <span class="keyword">in</span> cate_data.keys() <span class="keyword">if</span> cate_data[key] == p]</span><br><span class="line">        wcss_list.append(<span class="built_in">sum</span>([((points[n][<span class="number">0</span>]-centerPoint[p][<span class="number">0</span>])**<span class="number">2</span> + (points[n][<span class="number">1</span>]-centerPoint[p][<span class="number">1</span>])**<span class="number">2</span>) ** <span class="number">0.5</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(points))]))</span><br><span class="line">    </span><br><span class="line">    WCSS.append(<span class="built_in">sum</span>(wcss_list))</span><br><span class="line">    <span class="comment"># WCSS.append()</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(WCSS)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">5</span>))</span><br><span class="line">plt.plot(K, WCSS, <span class="string">&#x27;bo-&#x27;</span>, markersize=<span class="number">8</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;K&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;WCSS&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Elbow Method =&gt; K&#x27;</span>)</span><br><span class="line">plt.xticks(K)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上次手写了&lt;code&gt;Kmeans&lt;/code&gt;算法，但是关于分类数目&lt;code&gt;K&lt;/code&gt;的取值，只是固定了两类，这次就手写一下&lt;code&gt;Kmeans&lt;/code&gt;算法中&lt;code&gt;K&lt;/code&gt;值的确定方法——肘部法则。&lt;/p&gt;
&lt;p&gt;介绍一个词&lt;code&gt;W</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="Python" scheme="http://xujunliang666.com/tags/Python/"/>
    
    <category term="算法" scheme="http://xujunliang666.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="机器学习" scheme="http://xujunliang666.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python手写Kmeans聚类算法</title>
    <link href="http://xujunliang666.com/Programming/K-Means/"/>
    <id>http://xujunliang666.com/Programming/K-Means/</id>
    <published>2021-10-10T16:00:00.000Z</published>
    <updated>2021-10-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Kmeans</code>算法是选取数据的中心点，将数据按照距离中心点的距离进行分类，从而将数据分成K类。是一个聚类算法。</p><p>下面展示脱离机器学习库，Python手写<code>Kmeans</code>算法的代码。</p><h2 id="Kmeans"><a href="#Kmeans" class="headerlink" title="Kmeans"></a><code>Kmeans</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 假设有一些数据</span></span><br><span class="line">data = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">4</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">0</span>]]</span><br><span class="line"><span class="comment"># 设置分类数量</span></span><br><span class="line">K = <span class="number">2</span></span><br><span class="line"><span class="comment"># 随机选取中心点</span></span><br><span class="line">x, y  = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(data)-<span class="number">1</span>), random.randint(<span class="number">0</span>, <span class="built_in">len</span>(data)-<span class="number">1</span>)</span><br><span class="line">centerPoint = [data[x], data[y]]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;center: &quot;</span>, centerPoint)</span><br><span class="line"><span class="comment"># 结果保存为字典格式</span></span><br><span class="line">cate_data = &#123;&#125;</span><br><span class="line"><span class="comment"># 计算欧氏距离并将所有的点分类</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    distance1 = ((data[i][<span class="number">0</span>] - centerPoint[<span class="number">0</span>][<span class="number">0</span>])**<span class="number">2</span> + (data[i][<span class="number">1</span>] - centerPoint[<span class="number">0</span>][<span class="number">1</span>])**<span class="number">2</span>)**<span class="number">0.5</span></span><br><span class="line">    distance2 = ((data[i][<span class="number">0</span>] - centerPoint[<span class="number">1</span>][<span class="number">0</span>])**<span class="number">2</span> + (data[i][<span class="number">1</span>] - centerPoint[<span class="number">1</span>][<span class="number">1</span>])**<span class="number">2</span>)**<span class="number">0.5</span></span><br><span class="line">    cate_data[<span class="string">f&quot;<span class="subst">&#123;data[i]&#125;</span>&quot;</span>] = &#123;<span class="string">&quot;label&quot;</span> : <span class="number">0</span> <span class="keyword">if</span> distance1 &lt;= distance2 <span class="keyword">else</span> <span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cate_data:&quot;</span>, cate_data)</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">center:  [[1, 0], [4, 2]]</span><br><span class="line">cate_data:&#123;</span><br><span class="line">            &#x27;[1, 2]&#x27;: &#123;&#x27;label&#x27;: 0&#125;, </span><br><span class="line">            &#x27;[1, 4]&#x27;: &#123;&#x27;label&#x27;: 1&#125;, </span><br><span class="line">            &#x27;[1, 0]&#x27;: &#123;&#x27;label&#x27;: 0&#125;, </span><br><span class="line">            &#x27;[4, 2]&#x27;: &#123;&#x27;label&#x27;: 1&#125;, </span><br><span class="line">            &#x27;[4, 4]&#x27;: &#123;&#x27;label&#x27;: 1&#125;, </span><br><span class="line">            &#x27;[4, 0]&#x27;: &#123;&#x27;label&#x27;: 1&#125;,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可以看到所有的点都根据距离中心点的距离进行了分类。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Kmeans&lt;/code&gt;算法是选取数据的中心点，将数据按照距离中心点的距离进行分类，从而将数据分成K类。是一个聚类算法。&lt;/p&gt;
&lt;p&gt;下面展示脱离机器学习库，Python手写&lt;code&gt;Kmeans&lt;/code&gt;算法的代码。&lt;/p&gt;
&lt;h2 id=&quot;Kmea</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="Python" scheme="http://xujunliang666.com/tags/Python/"/>
    
    <category term="算法" scheme="http://xujunliang666.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="机器学习" scheme="http://xujunliang666.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python Selenium Headless模式下爬虫的一些反爬方法</title>
    <link href="http://xujunliang666.com/Programming/Selenium-Headless/"/>
    <id>http://xujunliang666.com/Programming/Selenium-Headless/</id>
    <published>2021-06-10T16:00:00.000Z</published>
    <updated>2021-05-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Selenium设计爬虫的过程中，其实很多时候浏览器是不用打开的，但是为了方便调试，我们往往会在本地打开浏览器，如果确实不需要打开浏览器，我们可以把浏览器设置为Headless模式，这样就可以避免打开浏览器，节省资源，但是有时候，目标网站会检测到你的爬虫，导致爬虫无法正常运行，本文就此问题介绍解决方法。</p><h2 id="1-设置请求头-user-agent"><a href="#1-设置请求头-user-agent" class="headerlink" title="1.设置请求头 user-agent"></a>1.设置请求头 <code>user-agent</code></h2><p>在浏览器<code>Chrome</code>(下文都称呼为<code>Chrome</code>)中，正常情况下和<code>Headless</code>模式下的请求头是有差别的，所以目标网站可以很容易的根据<code>Headless</code>模式下的请求头来分辨出程序是否为爬虫脚本，从而阻止程序。所以，我们可以通过设置请求头来模拟浏览器，从而避免被反爬虫机制检测到。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)  <span class="comment"># 设置为无头模式</span></span><br></pre></td></tr></table></figure><h2 id="2-设置分辨率"><a href="#2-设置分辨率" class="headerlink" title="2.设置分辨率"></a>2.设置分辨率</h2><p><code>Chrome</code>浏览器在<code>Headless</code>模式下，浏览器默认的分辨率是<code>800*600</code>，很多情况下，目标网站会检测到分辨率，从而阻止爬虫，而且，在这样的默认分辨率下，页面中很多元素会无法加载，从而导致元素无法定位的问题，所以我们可以设置分辨率，模拟真实浏览器。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">&#x27;--window-size=1920,1080&#x27;</span>)  <span class="comment"># 设置分辨率</span></span><br><span class="line">browser = webdriver.Chrome(options=options)</span><br><span class="line">browser.set_window_size(<span class="number">1920</span>, <span class="number">1080</span>)</span><br></pre></td></tr></table></figure><h2 id="3-禁用GPU加速"><a href="#3-禁用GPU加速" class="headerlink" title="3.禁用GPU加速"></a>3.禁用GPU加速</h2><p>在<code>Headless</code>模式下，<code>Chrome</code>浏览器默认会启用<code>GPU</code>加速，但是目标网站会检测到<code>GPU</code>加速，从而阻止爬虫，所以我们可以禁用<code>GPU</code>加速。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)  <span class="comment"># 禁用GPU加速</span></span><br></pre></td></tr></table></figure><p>但是，在我个人的测试下，很多网站没有这个检测，或者说没有对<code>GPU</code>加速进行检测，所以大家可以根据具体情况决定是否禁用<code>GPU</code>加速。</p><h2 id="4-杂谈"><a href="#4-杂谈" class="headerlink" title="4.杂谈"></a>4.杂谈</h2><p>不使用<code>Headless</code>模式时打开浏览器，上面总会出现类似于”Chrome正在受到自动化软件的控制”的提示，这个提示是<code>Chrome</code>浏览器自带的，在<code>Headless</code>模式下，这个提示不会出现，但是目标网站会检测到这个提示，从而阻止爬虫，就算不阻止，我们看着也不爽，我们可以手动的禁止掉这个提示。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">browser = webdriver.Chrome(options=options)</span><br><span class="line">browser.set_window_size(<span class="number">1920</span>, <span class="number">1080</span>)</span><br><span class="line">browser.execute_cdp_cmd(<span class="string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>, &#123;</span><br><span class="line">    <span class="string">&quot;source&quot;</span>: <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Object.defineProperty(navigator, &#x27;webdriver&#x27;, &#123;</span></span><br><span class="line"><span class="string">        get: () =&gt; undefined</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>这段代码的作用是，在每次新打开一个页面时，将<code>navigator.webdriver</code>的值设置为<code>undefined</code>，从而禁止掉”Chrome正在受到自动化软件的控制”的提示。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在使用Selenium设计爬虫的过程中，其实很多时候浏览器是不用打开的，但是为了方便调试，我们往往会在本地打开浏览器，如果确实不需要打开浏览器，我们可以把浏览器设置为Headless模式，这样就可以避免打开浏览器，节省资源，但是有时候，目标网站会检测到你的爬虫，导致爬虫无法</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="Python" scheme="http://xujunliang666.com/tags/Python/"/>
    
    <category term="Selenium" scheme="http://xujunliang666.com/tags/Selenium/"/>
    
    <category term="自动化测试" scheme="http://xujunliang666.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    <category term="爬虫" scheme="http://xujunliang666.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python自动化测试Selenium读取用户配置信息的方法</title>
    <link href="http://xujunliang666.com/Programming/Selenium-Read-UsersInfo/"/>
    <id>http://xujunliang666.com/Programming/Selenium-Read-UsersInfo/</id>
    <published>2021-03-17T16:00:00.000Z</published>
    <updated>2021-03-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>selenium</code>方法进行自动化测试或爬虫中，会遇到很多网页需要用户登录的情况。</p><h3 id="1-使用-selenium内置的-options模块读取用户本地配置"><a href="#1-使用-selenium内置的-options模块读取用户本地配置" class="headerlink" title="1. 使用 selenium内置的 options模块读取用户本地配置"></a>1. 使用 <code>selenium</code>内置的 <code>options</code>模块读取用户本地配置</h3><p>使用这种方法前，你需要确保你本地浏览器已经有访问目标网站的配置。需要事先本地访问目标网站，登录后保存登陆状态信息并保存密码等操作。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment"># 通过os模块读取本机登录用户名</span></span><br><span class="line">username = os.getlogin()</span><br><span class="line"><span class="comment"># 根据本地chrome安装路径，找到用户目录 保持浏览器设置信息</span></span><br><span class="line">userPath = <span class="string">&#x27;C:/Users/&#123;&#125;/AppData/Local/Google/Chrome/User Data&#x27;</span>.<span class="built_in">format</span>(username)</span><br><span class="line"><span class="comment"># 初始化options模块</span></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment"># 添加用户信息到options</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;user-data-dir=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(userPath))</span><br><span class="line"><span class="comment"># 初始化browser对象，将options传入browser</span></span><br><span class="line">browser = webdriver.Chrome(options=options)</span><br><span class="line"><span class="comment"># 窗口最大化</span></span><br><span class="line">browser.maximize_window()</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果你的 <code>chromedriver.exe</code>并没有配置全局环境变量，或放在了 <code>chrome</code>安装路径或放在了 <code>python</code>安装路径下，则最好使用 <code>service</code>参数指定 <code>chromedriver.exe</code>位置，否则 <code>Selenium</code>有可能报错找不到 <code>chromedriver</code>驱动。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将上述代码中的初始化browser行代码改为以下内容</span></span><br><span class="line">browser = webdriver.Chrome(service=<span class="string">&quot;你的chromedriver.exe路径&quot;</span>, options=options)</span><br></pre></td></tr></table></figure><h3 id="2-使用pickle打包用户cookie方法保存用户配置"><a href="#2-使用pickle打包用户cookie方法保存用户配置" class="headerlink" title="2. 使用pickle打包用户cookie方法保存用户配置"></a>2. 使用pickle打包用户cookie方法保存用户配置</h3><p>使用这种方法时，需要使用time模块来给你充足的时间进行登录操作，完成后使用 <code>pickle</code>模块打包 <code>cookie</code>信息，后续访问网站时每次读取 <code>cookie</code>即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化browser，指定chromedriver.exe位置</span></span><br><span class="line">browser = webdriver.Chrome(service = <span class="string">&quot;你的chromedriver.exe的目录&quot;</span>)</span><br><span class="line"><span class="comment"># 最大化浏览器窗口</span></span><br><span class="line">browser.maximize_window()</span><br><span class="line"><span class="comment"># 目标网站地址</span></span><br><span class="line">url = <span class="string">&quot;你的目标网站地址&quot;</span></span><br><span class="line"><span class="comment"># 访问该网站</span></span><br><span class="line">browser.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停程序，保留充足时间进行手动登录操作</span></span><br><span class="line">sleep(<span class="number">200</span>) <span class="comment"># 暂停200秒，暂停时你需要手动登录完成该网站，后续注释即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存cookie到本地,这段代码只有第一次运行的时候需要，后续注释即可</span></span><br><span class="line">cookies = browser.get_cookies()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;cookies.plk&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    pickle.dump(cookies, file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取保存到本地的cookies，这样就可以直接登录到网站</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;cookies.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    cookies = pickle.load(file)</span><br><span class="line">    <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies:</span><br><span class="line">        browser.add_cookie(cookie)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新页面查看是否已经登陆成功</span></span><br><span class="line"><span class="variable language_">self</span>.browser.refresh()</span><br><span class="line">sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用 &lt;code&gt;selenium&lt;/code&gt;方法进行自动化测试或爬虫中，会遇到很多网页需要用户登录的情况。&lt;/p&gt;
&lt;h3 id=&quot;1-使用-selenium内置的-options模块读取用户本地配置&quot;&gt;&lt;a href=&quot;#1-使用-selenium内置的-option</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="Python" scheme="http://xujunliang666.com/tags/Python/"/>
    
    <category term="Selenium" scheme="http://xujunliang666.com/tags/Selenium/"/>
    
    <category term="自动化测试" scheme="http://xujunliang666.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>好物推荐01: tqdm进度条</title>
    <link href="http://xujunliang666.com/Programming/Tqdm/"/>
    <id>http://xujunliang666.com/Programming/Tqdm/</id>
    <published>2020-12-08T16:00:00.000Z</published>
    <updated>2020-12-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发过程中，尤其是深度学习或者时数据处理时，程序长时间的运行总是会让广大程序员产生怀疑、后怕、自卑、发毛的情绪。因此，在程序设计中加入进度条就显得很有必要了。</p><h3 id="1-tqdm的安装"><a href="#1-tqdm的安装" class="headerlink" title="1. tqdm的安装"></a>1. <code>tqdm</code>的安装</h3><p>安装很容易，进入到工作环境直接安装，如果不分环境就全局安装即可。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install tqdm</span><br></pre></td></tr></table></figure><h3 id="2-导入-tqdm"><a href="#2-导入-tqdm" class="headerlink" title="2. 导入 tqdm"></a>2. 导入 <code>tqdm</code></h3><p> <strong>注意</strong>：踩坑记录，导入并非直接导入包名，否则会报错。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm, trange</span><br></pre></td></tr></table></figure><h3 id="tqdm的使用"><a href="#tqdm的使用" class="headerlink" title="tqdm的使用"></a><code>tqdm</code>的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm, trange</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">参数说明：(带*号的默认不填即可)</span></span><br><span class="line"><span class="string">    iterable，   需要传入的可迭代对象，作为整体进度条的尺。</span></span><br><span class="line"><span class="string">    desc，       进度条的描述内容。</span></span><br><span class="line"><span class="string">    ncols，      进度条的长度，可认为更改，建议更改为合适终端的长度。</span></span><br><span class="line"><span class="string">    *total，     迭代次数，默认为iterable的长度。</span></span><br><span class="line"><span class="string">    *leave，     布尔值，表示是否保留进度条。</span></span><br><span class="line"><span class="string">    *file，      进度条保存路径，默认保留在终端即可。</span></span><br><span class="line"><span class="string">    *unit，      迭代内容的迭代单位，默认为it(代)。</span></span><br><span class="line"><span class="string">    *postfix，   可传入的详细数据。</span></span><br><span class="line"><span class="string">    *unit_scale，单位换算尺度，默认是国际标准换算。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 使用tqdm展示进度条</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">10</span>), desc=<span class="string">&quot;这是一个进度条&quot;</span>, ncols=<span class="number">80</span>):</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>效果展示如下：</p><p><img src="https://images.kimbleex.top/BlogIMG/Tqdm/tqdm-process-letter.avif" alt="tqdm"></p><p>如果在循环过程中，还需要查看变量信息等，可以使用 <code>tqdm.write()</code>方法，它可以将循环中的变量进行输出。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">10</span>), desc=<span class="string">&quot;这是一个进度条&quot;</span>, ncols=<span class="number">80</span>):</span><br><span class="line">    tqdm.write(<span class="string">&quot;当前为第&#123;&#125;次循环&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://images.kimbleex.top/BlogIMG/Tqdm/tqdm-write.avif" alt="tqdm"></p><p>至于 <code>trange</code>方法就是内置的封装好的 <code>tqdm</code>，即将 <code>tqdm</code>方法中的可迭代对象 <code>iterable</code>参数改为了可迭代对象的<strong>长度</strong>，其他基本一致。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">10</span>, desc=<span class="string">&quot;这是一个进度条&quot;</span>, ncols=<span class="number">80</span>):</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>效果与上面展示的图片一致。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在开发过程中，尤其是深度学习或者时数据处理时，程序长时间的运行总是会让广大程序员产生怀疑、后怕、自卑、发毛的情绪。因此，在程序设计中加入进度条就显得很有必要了。&lt;/p&gt;
&lt;h3 id=&quot;1-tqdm的安装&quot;&gt;&lt;a href=&quot;#1-tqdm的安装&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="Python" scheme="http://xujunliang666.com/tags/Python/"/>
    
    <category term="工具" scheme="http://xujunliang666.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hexo插入图片路径出错的处理方法</title>
    <link href="http://xujunliang666.com/Programming/Hexo-Image-Process/"/>
    <id>http://xujunliang666.com/Programming/Hexo-Image-Process/</id>
    <published>2020-03-10T16:00:00.000Z</published>
    <updated>2020-03-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用Hexo搭建个人博客时，插图片总是无法被读取。在网上查找了很多资料，都是让你安装<code>hexo-asset-image</code>插件，并且将根目录下的配置文件中的<code>post_asset_folder</code>设置为<code>true</code>。然而，我的亲身实践经历证实了这并不管用。</p><p>我在一篇博客中引用了我<code>source/Photos/</code>目录下的图片。并且经过检查我的相对路径是完全正确的，但是在博客页面中出现了报错。</p><p>目录结构为：</p><p><img src="https://images.kimbleex.top/BlogIMG/Hexo_image_Process/sourceStruct.avif" alt="目录结构"></p><p>网页端报错为：</p><p><img src="https://images.kimbleex.top/BlogIMG/Hexo_image_Process/webError.avif" alt="网页端报错"></p><p>可以看到，我的本地目录经过指令<code>hexo deploy -d</code>构建后，网页读取的图片地址是<code>https://kimbleex.github.io/.com//Photos/Github_Commands/get-github-links.jpg</code>，相比于正确的应该被读取的地址<code>/Photos/Github_Commands/get-github-links.jpg</code>，多出了两个前缀，还多出了一个<code>/</code>，这显然是地址转化的过程中的问题。</p><p>OK事情又回到了本源，我在插入图片时，为了让hexo自动转化图片的地址，下载了<code>hexo-asset-image</code>插件，现在地址出现了问题，这显然是它的锅。</p><p>于是，我打开了这个插件的代码，仔细琢磨了它的代码逻辑，果然发现了罪魁祸首。</p><p><img src="https://images.kimbleex.top/BlogIMG/Hexo_image_Process/hexo-asset-image-origin.avif" alt="原始代码"></p><p>在<code>node_modules/hexo-asset-image/index.js</code>中，它给图片路径长度大于1的路径增加了一个<code>/</code>，并且在转换路径的过程中加入了<code>root</code>和<code>link</code>前缀，这不就是我们网页端报错的问题所在吗？</p><p>于是，按照正确的地址路径，修改<code>node_modules/hexo-asset-image/index.js</code>中的路径转换逻辑。</p><p>修改后的代码片段如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将原来的逻辑代码注释掉，如下所示，并将最后的代码转换逻辑修改为正确的图片路径 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if(srcArray.length &gt; 1)</span></span><br><span class="line"><span class="comment">// srcArray.shift();</span></span><br><span class="line"><span class="comment">// src = srcArray.join(&#x27;/&#x27;);</span></span><br><span class="line"><span class="comment">// $(this).attr(&#x27;src&#x27;, config.root + link + src);</span></span><br><span class="line"><span class="comment">// console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);            </span></span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>,  src);</span><br><span class="line"><span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;update link as:--&gt;&quot;</span>+ src);</span><br></pre></td></tr></table></figure><p>修改后，重新部署，图片可以正常显示。</p><p><img src="https://images.kimbleex.top/BlogIMG/Hexo_image_Process/result.avif" alt="修改后"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用Hexo搭建个人博客时，插图片总是无法被读取。在网上查找了很多资料，都是让你安装&lt;code&gt;hexo-asset-image&lt;/code&gt;插件，并且将根目录下的配置文件中的&lt;code&gt;post_asset_folder&lt;/code&gt;设置为&lt;code&gt;true&lt;/code</summary>
      
    
    
    
    <category term="Programming" scheme="http://xujunliang666.com/categories/Programming/"/>
    
    
    <category term="Hexo" scheme="http://xujunliang666.com/tags/Hexo/"/>
    
    <category term="图像处理" scheme="http://xujunliang666.com/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
</feed>
